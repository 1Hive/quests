{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/libraries/Deposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// Solidity: Package Default Dependencies Directory = \"node_modules\"\r\n\r\npragma solidity ^0.8.2;\nfunction c_9cc2e7a8(bytes8 c__9cc2e7a8) pure {}\nfunction c_true9cc2e7a8(bytes8 c__9cc2e7a8) pure returns (bool){ return true; }\nfunction c_false9cc2e7a8(bytes8 c__9cc2e7a8) pure returns (bool){ return false; }\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"./Models.sol\";\r\n\r\nlibrary DepositLib {\nfunction c_86fb8751(bytes8 c__86fb8751) internal pure {}\nfunction c_true86fb8751(bytes8 c__86fb8751) internal pure returns (bool){ return true; }\nfunction c_false86fb8751(bytes8 c__86fb8751) internal pure returns (bool){ return false; }\n\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /*\r\n     * Collect deposit from signer and send it to _to address.\r\n     * @param _token The deposit token.\r\n     * @param _amount The deposit amount.\r\n     * @param _to The address where the deposit should be transfered.\r\n     */\r\n    function collectFrom(\r\n        Models.Deposit memory _collateral,\r\n        address _from,\r\n        address _to\r\n    ) internal {c_86fb8751(0xeba890abd5c6a759); /* function */ \n\r\nc_86fb8751(0xb04facfefe209ca9); /* line */ \n        c_86fb8751(0x9fd82d3b198ff42e); /* statement */ \ncollectFrom(_collateral, _from);\r\nc_86fb8751(0x28c2e03e97b66c5d); /* line */ \n        c_86fb8751(0xa102dcd4441caad7); /* statement */ \nreleaseTo(_collateral, _to);\r\n    }\r\n\r\n    /*\r\n     * Collect deposit from signer\r\n     * @param _token The deposit token.\r\n     * @param _amount The deposit amount.\r\n     */\r\n    function collectFrom(Models.Deposit memory _collateral, address _from)\r\n        internal\r\n    {c_86fb8751(0x2e54ea59257511eb); /* function */ \n\r\nc_86fb8751(0x4e8e40e3fe690b99); /* line */ \n        c_86fb8751(0x374794e13b4eef95); /* statement */ \nif (_collateral.amount > 0) {c_86fb8751(0xfd0e615dde5b41a4); /* branch */ \n\r\n            // Verify allowance\r\nc_86fb8751(0xdb66974502781d8f); /* line */ \n            c_86fb8751(0x080d93e154980c1b); /* statement */ \nuint256 allowance = _collateral.token.allowance(\r\n                _from,\r\n                address(this)\r\n            );\r\nc_86fb8751(0x7dda1ed0663e65f4); /* line */ \n            c_86fb8751(0x4a61ff67c4f4e6eb); /* requirePre */ \nc_86fb8751(0x5a19dc5b13ed4fff); /* statement */ \nrequire(\r\n                allowance >= _collateral.amount,\r\n                \"ERROR : Deposit bad allowance\"\r\n            );c_86fb8751(0x90b84030d937b50e); /* requirePost */ \n\r\n\r\nc_86fb8751(0x4fc2048aa3c7cf70); /* line */ \n            c_86fb8751(0x52cc92bf23aa099a); /* statement */ \n_collateral.token.safeTransferFrom(\r\n                _from,\r\n                address(this),\r\n                _collateral.amount\r\n            );\r\n        }else { c_86fb8751(0xeab61c20b6146987); /* branch */ \n}\r\n    }\r\n\r\n    function releaseTo(Models.Deposit memory _collateral, address _to)\r\n        internal\r\n    {c_86fb8751(0x0c0ebada067a59b5); /* function */ \n\r\nc_86fb8751(0x51979652a99cd56a); /* line */ \n        c_86fb8751(0xe795a2e8985d3628); /* statement */ \nif (_collateral.amount > 0) {c_86fb8751(0x32f390c8aa674226); /* branch */ \n\r\nc_86fb8751(0x434f21563c81b9cb); /* line */ \n            c_86fb8751(0xbcd3ed1b2dea21fb); /* statement */ \n_collateral.token.safeTransfer(_to, _collateral.amount);\r\n        }else { c_86fb8751(0x0a1e82b479f54f47); /* branch */ \n}\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/IExecutable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.2;\nfunction c_f10db837(bytes8 c__f10db837) pure {}\nfunction c_truef10db837(bytes8 c__f10db837) pure returns (bool){ return true; }\nfunction c_falsef10db837(bytes8 c__f10db837) pure returns (bool){ return false; }\n\r\n\r\ninterface IExecutable {\r\n    function canExecute(address executer) external returns (bool);\r\n}\r\n"
    },
    "contracts/libraries/Models.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.2;\nfunction c_b7e3ad2e(bytes8 c__b7e3ad2e) pure {}\nfunction c_trueb7e3ad2e(bytes8 c__b7e3ad2e) pure returns (bool){ return true; }\nfunction c_falseb7e3ad2e(bytes8 c__b7e3ad2e) pure returns (bool){ return false; }\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\n\r\nlibrary Models {\nfunction c_a9dfceef(bytes8 c__a9dfceef) internal pure {}\nfunction c_truea9dfceef(bytes8 c__a9dfceef) internal pure returns (bool){ return true; }\nfunction c_falsea9dfceef(bytes8 c__a9dfceef) internal pure returns (bool){ return false; }\n\r\n    struct Deposit {\r\n        IERC20Upgradeable token;\r\n        uint256 amount;\r\n    }\r\n    struct Claim {\r\n        bytes evidence;\r\n        address player;\r\n        uint256 amount;\r\n    }\r\n    struct QuestParam {\r\n        address questCreator;\r\n        uint32 maxPlayers;\r\n        IERC20Upgradeable rewardToken;\r\n        uint256 expireTime;\r\n        address aragonGovernAddress;\r\n        address payable fundsRecoveryAddress;\r\n        bool isWhiteList;\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/TokenMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n// Example class - a mock class using delivering from ERC20\r\ncontract TokenMock is ERC20 {\r\n    constructor(string memory name, string memory symbol)\r\n        payable\r\n        ERC20(name, symbol)\r\n    {}\r\n\r\n    function mint(address owner, uint256 initialBalance) external {\r\n        _mint(owner, initialBalance);\r\n    }\r\n}\r\n"
    },
    "contracts/Quest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.2;\nfunction c_16df0459(bytes8 c__16df0459) pure {}\nfunction c_true16df0459(bytes8 c__16df0459) pure returns (bool){ return true; }\nfunction c_false16df0459(bytes8 c__16df0459) pure returns (bool){ return false; }\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./libraries/Deposit.sol\";\r\nimport \"./libraries/Models.sol\";\r\nimport \"./libraries/IExecutable.sol\";\r\n\r\ncontract Quest is IExecutable {\nfunction c_28c23fc5(bytes8 c__28c23fc5) internal pure {}\nfunction c_true28c23fc5(bytes8 c__28c23fc5) internal pure returns (bool){ return true; }\nfunction c_false28c23fc5(bytes8 c__28c23fc5) internal pure returns (bool){ return false; }\nmodifier c_mode76ec6a3{ c_28c23fc5(0x8c65dde638976eaf); /* modifier-post */ \n _; }\nmodifier c_modea7514a5{ c_28c23fc5(0xa93087ecaf33eca2); /* modifier-pre */ \n _; }\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n    using DepositLib for Models.Deposit;\r\n\r\n    // Quest payload\r\n    address public questCreator;\r\n    string public questTitle;\r\n    bytes public questDetailsRef;\r\n    IERC20Upgradeable public rewardToken;\r\n    uint256 public expireTime;\r\n    address public aragonGovernAddress;\r\n    address payable public fundsRecoveryAddress;\r\n    uint32 public maxPlayers; // 0 for unlimited players\r\n    bool public isWhiteList;\r\n    Models.Claim[] public claims;\r\n    Models.Deposit public createDeposit;\r\n    Models.Deposit public playDeposit;\r\n    bool public isCreateDepositReleased;\r\n\r\n    address[] private playerList;\r\n\r\n    event QuestClaimed(bytes evidence, address player, uint256 amount);\r\n    event QuestPlayed(address player, uint256 timestamp);\r\n    event QuestUnplayed(address player, uint256 timestamp);\r\n    event QuestWhiteListChanged(address[] whiteListPlayers, uint256 timestamp);\r\n    modifier OnlyCreator() {c_28c23fc5(0x6b1d65e9e23a3b08); /* function */ \n\r\nc_28c23fc5(0x7ca364bfeb14a8e4); /* line */ \n        c_28c23fc5(0xafefb6249adc44f3); /* requirePre */ \nc_28c23fc5(0x2cb158ab646063f7); /* statement */ \nrequire(\r\n            msg.sender == questCreator,\r\n            \"Only creator can call this function\"\r\n        );c_28c23fc5(0xd2a9945ec04b6cfb); /* requirePost */ \n\r\nc_28c23fc5(0x3427505522bb139d); /* line */ \n        _;\r\n    }\r\n\r\n    constructor(\r\n        string memory _questTitle,\r\n        bytes memory _questDetailsRef,\r\n        Models.Deposit memory _createDeposit,\r\n        Models.Deposit memory _playDeposit,\r\n        Models.QuestParam memory _questParam\r\n    ) {c_28c23fc5(0x201f57e7739507dc); /* function */ \n\r\nc_28c23fc5(0x605bc5c59115c3c8); /* line */ \n        c_28c23fc5(0x3bc9686f22e00565); /* requirePre */ \nc_28c23fc5(0x257e7503e984bb0a); /* statement */ \nrequire(\r\n            !(_questParam.isWhiteList && _questParam.maxPlayers > 0),\r\n            \"ERROR: Can't create a whiteListed quest with max players greater than 0 (infinity)\"\r\n        );c_28c23fc5(0xfcb65ef0df269e55); /* requirePost */ \n\r\nc_28c23fc5(0xb442a7e02b870baa); /* line */ \n        questTitle = _questTitle;\r\nc_28c23fc5(0x21462740e67d3598); /* line */ \n        questDetailsRef = _questDetailsRef;\r\nc_28c23fc5(0xe8912bdb315dfb61); /* line */ \n        rewardToken = _questParam.rewardToken;\r\nc_28c23fc5(0xa7b5220eef006e07); /* line */ \n        expireTime = _questParam.expireTime;\r\nc_28c23fc5(0x7c239f3b69a5f8ff); /* line */ \n        aragonGovernAddress = _questParam.aragonGovernAddress;\r\nc_28c23fc5(0x69ee8ffa5327919f); /* line */ \n        fundsRecoveryAddress = _questParam.fundsRecoveryAddress;\r\nc_28c23fc5(0x929a3003443ca31f); /* line */ \n        questCreator = _questParam.questCreator;\r\nc_28c23fc5(0x2e514711a332c80b); /* line */ \n        createDeposit = _createDeposit;\r\nc_28c23fc5(0xb26df9290b66dfc3); /* line */ \n        playDeposit = _playDeposit;\r\n\r\nc_28c23fc5(0x197ba710974c32e5); /* line */ \n        isCreateDepositReleased = false;\r\nc_28c23fc5(0xb744e394bd41e2ab); /* line */ \n        maxPlayers = _questParam.maxPlayers;\r\nc_28c23fc5(0xa6a29ec8b26b5673); /* line */ \n        isWhiteList = _questParam.isWhiteList;\r\n    }\r\n\r\n    /*\r\n     * Claim a quest reward.\r\n     *\r\n     * @param _evidence Evidence of the claim.\r\n     * @param _player Player address.\r\n     * @param _amount Amount of the reward.\r\n     *\r\n     * requires sender to be aragonGovernAddress\r\n     * requires evidence to not be empty\r\n     * requires claim amount to not exceed available deposit when same token\r\n     *\r\n     * emit QuestClaimed\r\n     */\r\n    function claim(\r\n        bytes memory _evidence,\r\n        address _player,\r\n        uint256 _amount,\r\n        bool _claimAll\r\n    ) external {c_28c23fc5(0x9f8e462f82fd6bf0); /* function */ \n\r\nc_28c23fc5(0xf6ecb2b671bd1efe); /* line */ \n        c_28c23fc5(0x9588db56ab918bba); /* requirePre */ \nc_28c23fc5(0x0620ecc1e9d32a90); /* statement */ \nrequire(msg.sender == aragonGovernAddress, \"ERROR: Sender not govern\");c_28c23fc5(0xcdda0a4feb60c6f3); /* requirePost */ \n\r\nc_28c23fc5(0x1da179ab82c8ba26); /* line */ \n        c_28c23fc5(0x5637603bbcfb8145); /* requirePre */ \nc_28c23fc5(0xe6e4479a6d99dc49); /* statement */ \nrequire(_evidence.length != 0, \"ERROR: No evidence\");c_28c23fc5(0x84e2da4d8de94605); /* requirePost */ \n\r\n\r\nc_28c23fc5(0xe313d5dbed0597b4); /* line */ \n        c_28c23fc5(0x06f1b57692317621); /* statement */ \nuint256 balance = rewardToken.balanceOf(address(this));\r\n\r\nc_28c23fc5(0x6e695fbaaa697bd7); /* line */ \n        c_28c23fc5(0x90f51837984cf8b9); /* statement */ \nif (_claimAll) {c_28c23fc5(0x6ef330ba4f59d473); /* branch */ \n\r\n            // Claim all but let the create deposit if they are same token\r\nc_28c23fc5(0x0a012faffaff72dc); /* line */ \n            c_28c23fc5(0x728066e634af75dd); /* statement */ \nif (address(rewardToken) == address(createDeposit.token)) {c_28c23fc5(0x3ab2f862350730f0); /* branch */ \n\r\nc_28c23fc5(0x15b00d4aa53d509e); /* line */ \n                c_28c23fc5(0x22b46e930f32ab45); /* statement */ \n(, uint256 result) = balance.trySub(createDeposit.amount);\r\nc_28c23fc5(0xa6b10536649fd966); /* line */ \n                _amount = result;\r\n            } else {c_28c23fc5(0x3cb13ebb8b3de3e7); /* branch */ \n\r\nc_28c23fc5(0xfdd6371a77b5adf4); /* line */ \n                _amount = balance;\r\n            }\r\n\r\n            // Claim all but let play deposits of each player if they are same token\r\nc_28c23fc5(0x6dbceaa93a8c8739); /* line */ \n            c_28c23fc5(0xf76090ffd46db8f3); /* statement */ \nif (\r\n                address(rewardToken) == address(playDeposit.token) &&\r\n                !isWhiteList\r\n            ) {c_28c23fc5(0xd4152bf5e1329c9a); /* branch */ \n\r\nc_28c23fc5(0xe8eba4cc47bbb555); /* line */ \n                c_28c23fc5(0x50586c2ec75d39fb); /* statement */ \n(, uint256 result) = _amount.trySub(\r\n                    playDeposit.amount * playerList.length\r\n                );\r\nc_28c23fc5(0xfa8c9a0ca7ca8ac2); /* line */ \n                _amount = result;\r\n            }else { c_28c23fc5(0x888ff90e9c79c861); /* branch */ \n}\r\n        }else { c_28c23fc5(0x5aa7a3f3feaeadd3); /* branch */ \n}\r\n\r\nc_28c23fc5(0x9cf430f60bab3f1a); /* line */ \n        c_28c23fc5(0x99a6589436abea89); /* statement */ \nif (address(rewardToken) == address(createDeposit.token)) {c_28c23fc5(0x54b4ab17973d3222); /* branch */ \n\r\nc_28c23fc5(0xbb372447a92d737e); /* line */ \n            c_28c23fc5(0x22453c249b596ba3); /* statement */ \n(, uint256 result) = balance.trySub(_amount);\r\nc_28c23fc5(0x284ccd79b24eaf7b); /* line */ \n            c_28c23fc5(0x4ef0a128517675ba); /* requirePre */ \nc_28c23fc5(0x13ce5940a025e8d1); /* statement */ \nrequire(\r\n                result >= createDeposit.amount,\r\n                \"ERROR: Should not exceed allowed bounty\"\r\n            );c_28c23fc5(0xea4fac06254b8a1e); /* requirePost */ \n\r\n        }else { c_28c23fc5(0x206332479c6c1e73); /* branch */ \n}\r\n\r\nc_28c23fc5(0x4b1e9e5c8f6cd15f); /* line */ \n        c_28c23fc5(0xad1de8c827a7837f); /* statement */ \nif (_amount > 0) {c_28c23fc5(0xac248d58f87fe5f0); /* branch */ \n\r\nc_28c23fc5(0x6a6e169c03b28733); /* line */ \n            c_28c23fc5(0x2be9a176d42bc00d); /* statement */ \nrewardToken.safeTransfer(_player, _amount);\r\n        }else { c_28c23fc5(0xad4b254d8b8f9cdc); /* branch */ \n}\r\n\r\nc_28c23fc5(0x511e913024485636); /* line */ \n        c_28c23fc5(0x85ecf86c8d7035d0); /* statement */ \nclaims.push(Models.Claim(_evidence, _player, _amount));\r\n\r\nc_28c23fc5(0x8814d876ff183ed9); /* line */ \n        c_28c23fc5(0x23c7f0e23d910870); /* statement */ \nemit QuestClaimed(_evidence, _player, _amount);\r\n    }\r\n\r\n    /*\r\n     * Release create deposit to creator and send unused funds to fundsRecoveryAddress.\r\n     * requires quests to have expired\r\n     *\r\n     * requires quest to be expired\r\n     */\r\n    function recoverFundsAndDeposit() external {c_28c23fc5(0x49ee317a00bfd3ae); /* function */ \n\r\nc_28c23fc5(0x1e5f42ffbf0057dc); /* line */ \n        c_28c23fc5(0xe0101bb9a08ce9c6); /* requirePre */ \nc_28c23fc5(0xced2c7ab168a85de); /* statement */ \nrequire(block.timestamp >= expireTime, \"ERROR: Not expired\");c_28c23fc5(0x16e2349da65aed19); /* requirePost */ \n\r\n\r\n        // Restore deposit if not already released\r\nc_28c23fc5(0xe873bf55a422f100); /* line */ \n        c_28c23fc5(0xc67bb315447bbce0); /* statement */ \nif (!isCreateDepositReleased) {c_28c23fc5(0x4192327b8bcf1e81); /* branch */ \n\r\nc_28c23fc5(0x78e9ae643c139ad7); /* line */ \n            c_28c23fc5(0x9b585cfe66dff3ac); /* statement */ \ncreateDeposit.releaseTo(questCreator);\r\nc_28c23fc5(0x5868bcc870def648); /* line */ \n            isCreateDepositReleased = true;\r\n        }else { c_28c23fc5(0x8fe05a4f2812a431); /* branch */ \n}\r\n\r\nc_28c23fc5(0x242fd74ceb27e63f); /* line */ \n        c_28c23fc5(0x26b2d608d44c887a); /* statement */ \nuint256 balance = rewardToken.balanceOf(address(this));\r\n\r\n        // Restore all but let the player deposit still locked if they are same token\r\nc_28c23fc5(0x7938f75bc1c00291); /* line */ \n        c_28c23fc5(0x38f79bf577616b7a); /* statement */ \nif (address(rewardToken) == address(playDeposit.token) && !isWhiteList) {c_28c23fc5(0x833d3d7320f0701d); /* branch */ \n\r\nc_28c23fc5(0x2547b108dfb5682a); /* line */ \n            (, balance) = balance.trySub(\r\n                playDeposit.amount * playerList.length\r\n            );\r\n        }else { c_28c23fc5(0x03659150f0865c75); /* branch */ \n}\r\n\r\nc_28c23fc5(0x96b5699448e959e0); /* line */ \n        c_28c23fc5(0xd6536ad812e0c4e7); /* statement */ \nrewardToken.safeTransfer(fundsRecoveryAddress, balance);\r\n    }\r\n\r\n    /**\r\n     * Verify given executer can execute this quest.\r\n     * @param executer The player to verify\r\n     */\r\n    function canExecute(\r\n        address executer\r\n    ) external view override returns (bool) {c_28c23fc5(0xb3965c9a4fb2fae1); /* function */ \n\r\nc_28c23fc5(0x87d26b6b15e008cb); /* line */ \n        c_28c23fc5(0x02e06a24254cdc68); /* statement */ \nreturn findIndexOfPlayer(executer) != -1;\r\n    }\r\n\r\n    /**\r\n     * Register a player to the quest. (sender could be the player or quest creator)\r\n     *\r\n     * @param _player Player address.\r\n     *\r\n     * requires sender to be the quest creator or the player\r\n     * requires sender to put a deposit (if its creator, deposit will be released to player)\r\n     * requires player list is not full\r\n     * requires quest is not expired\r\n     * requires player is not already registered\r\n     *\r\n     * emit QuestPlayed with player and timestamp\r\n     */\r\n    function play(address _player) external {c_28c23fc5(0xbdd8913a081625f8); /* function */ \n\r\nc_28c23fc5(0xca820ce9be9d1c1a); /* line */ \n        c_28c23fc5(0x20412470be5617f1); /* requirePre */ \nc_28c23fc5(0xaf9ff70a195c9066); /* statement */ \nrequire(\r\n            isWhiteList == false,\r\n            \"ERROR: Can't self register and play a whitelisted Quest\"\r\n        );c_28c23fc5(0xa33f16a47597eeb4); /* requirePost */ \n\r\nc_28c23fc5(0xf1ad32bfd8362e3f); /* line */ \n        c_28c23fc5(0x9f744bcdd4ca559f); /* requirePre */ \nc_28c23fc5(0x4328584f75b21155); /* statement */ \nrequire(\r\n            (msg.sender == _player && c_true28c23fc5(0xa3c63b90fd69ac72)) || (msg.sender == questCreator && c_true28c23fc5(0xdb414657d0100b1e)),\r\n            \"ERROR: Sender not player nor creator\"\r\n        );c_28c23fc5(0xe9bef6653e501c70); /* requirePost */ \n\r\nc_28c23fc5(0xc289ccc3dab4f402); /* line */ \n        c_28c23fc5(0xd57895a4422d2f5a); /* requirePre */ \nc_28c23fc5(0x03c884caede3dd89); /* statement */ \nrequire(\r\n            (maxPlayers == 0 && c_true28c23fc5(0x62ed42ce61d240be)) || (playerList.length < maxPlayers && c_true28c23fc5(0x7140c0c8d19bd94c)),\r\n            \"ERROR: Max players reached\"\r\n        );c_28c23fc5(0xa6a66235cefcbd0e); /* requirePost */ \n\r\nc_28c23fc5(0xf94c071a0fcac21e); /* line */ \n        c_28c23fc5(0x6e447be0494f14fe); /* requirePre */ \nc_28c23fc5(0xd517f4d84787ab1a); /* statement */ \nrequire(block.timestamp < expireTime, \"ERROR: Quest expired\");c_28c23fc5(0x563be2a60d97c327); /* requirePost */ \n\r\nc_28c23fc5(0x318577897d4e252d); /* line */ \n        c_28c23fc5(0xe8dee74784c1f5b7); /* statement */ \nint256 playerIndex = findIndexOfPlayer(_player);\r\nc_28c23fc5(0xe6b9964cb272c922); /* line */ \n        c_28c23fc5(0x9d2c316ff5f3a9b9); /* requirePre */ \nc_28c23fc5(0xc83e06932aa2ccdb); /* statement */ \nrequire(playerIndex == -1, \"ERROR: Player already exists\");c_28c23fc5(0x4d3d961f8aec5784); /* requirePost */ \n\r\n\r\nc_28c23fc5(0x63da1ef308d7bbef); /* line */ \n        c_28c23fc5(0x0800b5a00353d8f0); /* statement */ \nplayDeposit.collectFrom(msg.sender, address(this));\r\n\r\nc_28c23fc5(0x409fb108bd7ff3fe); /* line */ \n        c_28c23fc5(0xb0c51f8fdf205e84); /* statement */ \nplayerList.push(_player);\r\nc_28c23fc5(0x1f9160fda101764f); /* line */ \n        c_28c23fc5(0xe4382a9823c40ac2); /* statement */ \nemit QuestPlayed(_player, block.timestamp);\r\n    }\r\n\r\n    /***\r\n     * Set the white list of players allowed to play the quest.\r\n     *\r\n     * requires sender to be the quest creator\r\n     * @param _players The list of players allowed to play the quest.\r\n     *\r\n     * emit QuestWhiteListChanged with players and timestamp\r\n     */\r\n    function setWhiteList(address[] memory _players) external  c_modea7514a5 OnlyCreator c_mode76ec6a3  {c_28c23fc5(0x35581ede4eba5c14); /* function */ \n\r\nc_28c23fc5(0xe6fd9d84698aeb73); /* line */ \n        c_28c23fc5(0xffdbb62b7795341c); /* requirePre */ \nc_28c23fc5(0x8411e44fd8b88ca3); /* statement */ \nrequire(\r\n            isWhiteList == true,\r\n            \"ERROR: Can't set the white list to a non-whitelisted contract\"\r\n        );c_28c23fc5(0x1accdf3ebde97917); /* requirePost */ \n\r\n\r\nc_28c23fc5(0x8c3a03c67001fdd3); /* line */ \n        c_28c23fc5(0x3d28b8b5edd6235e); /* statement */ \nbool playerInList = false;\r\n\r\nc_28c23fc5(0xc374ff4a280dbf35); /* line */ \n        c_28c23fc5(0xefff330a40df0bf2); /* statement */ \nfor (uint32 i = 0; i < _players.length; i++) {\r\nc_28c23fc5(0xd0203a72a7608457); /* line */ \n            c_28c23fc5(0xda9eb66dc3d82b0b); /* statement */ \nif (findIndexOfPlayer(_players[i]) != -1) {c_28c23fc5(0x9359447a6c9eaa38); /* branch */ \n\r\nc_28c23fc5(0x6ed5d26b8cdf11c3); /* line */ \n                playerInList = true;\r\n            }else { c_28c23fc5(0x32d5bee520552a85); /* branch */ \n}\r\n        }\r\n\r\nc_28c23fc5(0xa0f9e2c19ced7424); /* line */ \n        c_28c23fc5(0x5ec4fd4020272a7f); /* requirePre */ \nc_28c23fc5(0x96589a48cfdfc9ee); /* statement */ \nrequire(\r\n            playerInList == false,\r\n            \"ERROR: One or more players is already in whitelist\"\r\n        );c_28c23fc5(0x2a4f6cf2038ebf9b); /* requirePost */ \n\r\n\r\nc_28c23fc5(0x96cc6a408a9940d3); /* line */ \n        playerList = _players;\r\nc_28c23fc5(0xd4e1a3635fdbc856); /* line */ \n        c_28c23fc5(0xb5a2c344d7c31f94); /* statement */ \nemit QuestWhiteListChanged(_players, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Unregister a player from the quest. (sender could be the player or quest creator)\r\n     * @param _player Player address.\r\n     *\r\n     * requires sender to be the quest creator or the player\r\n     * requires player is registered\r\n     *\r\n     * emit QuestUnplayed with player and timestamp\r\n     */\r\n    function unplay(address _player) external {c_28c23fc5(0x32efddbbd1f87bb5); /* function */ \n\r\nc_28c23fc5(0xd9c931de784e200c); /* line */ \n        c_28c23fc5(0x4d6d5bd7811ccda1); /* requirePre */ \nc_28c23fc5(0x49e5a4c773555eab); /* statement */ \nrequire(\r\n            isWhiteList == false,\r\n            \"ERROR: can't unplay a whitelisted quest\"\r\n        );c_28c23fc5(0xebbfef2a04fe78a3); /* requirePost */ \n\r\nc_28c23fc5(0xbe90eb0ac3298e7c); /* line */ \n        c_28c23fc5(0x71f725ce80907b35); /* requirePre */ \nc_28c23fc5(0x7cb135e2d9386f05); /* statement */ \nrequire(\r\n            (msg.sender == _player && c_true28c23fc5(0x48f2625fb17a6428)) || (msg.sender == questCreator && c_true28c23fc5(0xfc77a832c8602883)),\r\n            \"ERROR: Sender not player nor creator\"\r\n        );c_28c23fc5(0x9a5d0901e9258638); /* requirePost */ \n\r\nc_28c23fc5(0x20c5db7312fea82c); /* line */ \n        c_28c23fc5(0xa8c6c695dc9ddad4); /* statement */ \nint256 playerIndex = findIndexOfPlayer(_player);\r\nc_28c23fc5(0xe4e40d0375be2837); /* line */ \n        c_28c23fc5(0x429f355e31530f7f); /* requirePre */ \nc_28c23fc5(0xbe76644ceca6017c); /* statement */ \nrequire(playerIndex != -1, \"ERROR: player not in list\");c_28c23fc5(0xc60fd9636a7ef873); /* requirePost */ \n\r\n\r\n        // We put the last player in the place of the player to remove\r\nc_28c23fc5(0x44a6a408a2be2998); /* line */ \n        playerList[uint256(playerIndex)] = playerList[playerList.length - 1];\r\n        // And then we can remove the last element to have the actual lenght updated\r\nc_28c23fc5(0xc9bfe374997edbae); /* line */ \n        c_28c23fc5(0x6f7fc1215b156a51); /* statement */ \nplayerList.pop();\r\n\r\nc_28c23fc5(0xb44331a05f3b0b4e); /* line */ \n        c_28c23fc5(0xd00e531781d8ad3f); /* statement */ \nplayDeposit.releaseTo(_player);\r\nc_28c23fc5(0x552817a91899ecf0); /* line */ \n        c_28c23fc5(0x94770ed3857a2c3f); /* statement */ \nemit QuestUnplayed(_player, block.timestamp);\r\n    }\r\n\r\n    /**\r\n      Simply return the player list as the entire array\r\n    */\r\n    function getPlayers() external view returns (address[] memory) {c_28c23fc5(0x3ea543d729fcaabe); /* function */ \n\r\nc_28c23fc5(0xedcb6c1726fc943b); /* line */ \n        c_28c23fc5(0x86417e35d96aec82); /* statement */ \nreturn playerList;\r\n    }\r\n\r\n    // Private functions\r\n\r\n    function findIndexOfPlayer(address _player) private view returns (int256) {c_28c23fc5(0x5f2983638d9fc6d5); /* function */ \n\r\nc_28c23fc5(0x55f8452fb4531fe9); /* line */ \n        c_28c23fc5(0xb84d1092f4520419); /* statement */ \nfor (uint256 i = 0; i < playerList.length; i++) {\r\nc_28c23fc5(0xca719689d18bf056); /* line */ \n            c_28c23fc5(0x659f8e998dc9c1de); /* statement */ \nif (playerList[i] == _player) {c_28c23fc5(0xa05ea05bd5822e16); /* branch */ \n\r\nc_28c23fc5(0x51108c97d793da70); /* line */ \n                c_28c23fc5(0x1bb7c9a3a27e26fe); /* statement */ \nreturn int256(i);\r\n            }else { c_28c23fc5(0x2bd813f0c0b24269); /* branch */ \n}\r\n        }\r\nc_28c23fc5(0x5a3af027ee4d61e9); /* line */ \n        c_28c23fc5(0x64bcd8e112a86bf0); /* statement */ \nreturn -1;\r\n    }\r\n}\r\n"
    },
    "contracts/QuestFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.2;\nfunction c_e3a31c36(bytes8 c__e3a31c36) pure {}\nfunction c_truee3a31c36(bytes8 c__e3a31c36) pure returns (bool){ return true; }\nfunction c_falsee3a31c36(bytes8 c__e3a31c36) pure returns (bool){ return false; }\n\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"./libraries/Deposit.sol\";\r\nimport \"./libraries/Models.sol\";\r\nimport \"./Quest.sol\";\r\n\r\ncontract QuestFactory is OwnableUpgradeable {\nfunction c_e9fd5542(bytes8 c__e9fd5542) internal pure {}\nfunction c_truee9fd5542(bytes8 c__e9fd5542) internal pure returns (bool){ return true; }\nfunction c_falsee9fd5542(bytes8 c__e9fd5542) internal pure returns (bool){ return false; }\nmodifier c_mod0fa3af38{ c_e9fd5542(0x475cc8a2e7603358); /* modifier-post */ \n _; }\nmodifier c_moddbfdc9ea{ c_e9fd5542(0x4575e17f48255aa2); /* modifier-pre */ \n _; }\nmodifier c_modf6e58f55{ c_e9fd5542(0xde96ed4adae896a1); /* modifier-post */ \n _; }\nmodifier c_mode207a5ba{ c_e9fd5542(0xdbe8c5008ec69876); /* modifier-pre */ \n _; }\nmodifier c_mod15ababcd{ c_e9fd5542(0x9c21a3e69c60caef); /* modifier-post */ \n _; }\nmodifier c_mod0f4a45f4{ c_e9fd5542(0x2a1fdc3dd75731c2); /* modifier-pre */ \n _; }\nmodifier c_moda9254c49{ c_e9fd5542(0x0ed4afce8f7d26f6); /* modifier-post */ \n _; }\nmodifier c_mod58268d1f{ c_e9fd5542(0x928a2ce7112aa1eb); /* modifier-pre */ \n _; }\n\r\n    using DepositLib for Models.Deposit;\r\n\r\n    address public aragonGovernAddress;\r\n    Models.Deposit public createDeposit;\r\n    Models.Deposit public playDeposit;\r\n    uint256 public constant version = 3;\r\n\r\n    event QuestCreated(\r\n        address questAddress,\r\n        string questTitle,\r\n        bytes questDetailsRef,\r\n        address rewardTokenAddress,\r\n        uint256 expireTime,\r\n        address fundsRecoveryAddress,\r\n        Models.Deposit createDeposit,\r\n        Models.Deposit playDeposit,\r\n        address creator,\r\n        uint32 maxPlayers,\r\n        bool isWhiteList,\r\n        uint256 version\r\n    );\r\n\r\n    event CreateDepositChanged(\r\n        uint256 timestamp,\r\n        address token,\r\n        uint256 amount\r\n    );\r\n\r\n    event PlayDepositChanged(uint256 timestamp, address token, uint256 amount);\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {c_e9fd5542(0xc41321543fca567f); /* function */ \n\r\nc_e9fd5542(0xae4593923c8dff5b); /* line */ \n        c_e9fd5542(0x4f8063a3e5971acd); /* statement */ \n_disableInitializers();\r\n    }\r\n\r\n    function initialize(address _aragonGovernAddress) public  c_mod58268d1f initializer c_moda9254c49  {c_e9fd5542(0x028dcf568bedd010); /* function */ \n\r\nc_e9fd5542(0xcbf0976884739d05); /* line */ \n        c_e9fd5542(0x36c5c42fee8a09a5); /* statement */ \n__Ownable_init();\r\nc_e9fd5542(0xd3636fe4d8887b36); /* line */ \n        aragonGovernAddress = _aragonGovernAddress;\r\n    }\r\n\r\n    /*\r\n     * @dev Set the deposit token and amount.\r\n     * @param _depositToken The deposit token.\r\n     * @param _depositAmount The deposit amount.\r\n     * emit CreateDepositChanged\r\n     */\r\n    function setCreateDeposit(\r\n        IERC20Upgradeable token,\r\n        uint256 amount\r\n    ) public  c_mod0f4a45f4 onlyOwner c_mod15ababcd  {c_e9fd5542(0xe4fd2fe5aed7eb85); /* function */ \n\r\nc_e9fd5542(0xe61bb216294da3e4); /* line */ \n        createDeposit = Models.Deposit(token, amount);\r\nc_e9fd5542(0x784fbecdae736a66); /* line */ \n        c_e9fd5542(0x3c4f82d0637c303b); /* statement */ \nemit CreateDepositChanged(block.timestamp, address(token), amount);\r\n    }\r\n\r\n    /*\r\n     * @dev Set the play deposit token and amount.\r\n     * @param _depositToken The deposit token.\r\n     * @param _depositAmount The deposit amount.\r\n     * emit PlayDepositChanged\r\n     */\r\n    function setPlayDeposit(\r\n        IERC20Upgradeable token,\r\n        uint256 amount\r\n    ) public  c_mode207a5ba onlyOwner c_modf6e58f55  {c_e9fd5542(0x154a2d89523cea73); /* function */ \n\r\nc_e9fd5542(0xa65d9775d82b3aee); /* line */ \n        playDeposit = Models.Deposit(token, amount);\r\nc_e9fd5542(0x0ce16bb9af0cbe37); /* line */ \n        c_e9fd5542(0x061c272b4a82d9e2); /* statement */ \nemit PlayDepositChanged(block.timestamp, address(token), amount);\r\n    }\r\n\r\n    /*\r\n     * Collect deposit, deploy a new Quest with given info contract\r\n     * and transfer deposit to new Quest.\r\n     * @param _title Quest title.\r\n     * @param _details Quest details.\r\n     * @param _rewardTokenAddress Reward token address.\r\n     * @param _expireTime Expire time.\r\n     * @param _fundsRecoveryAddress Funds recovery address.\r\n     * requires deposit allowance\r\n     * returns Quest address.\r\n     * emits QuestCreated\r\n     */\r\n    function createQuest(\r\n        string memory _questTitle,\r\n        bytes memory _questDetailsRef,\r\n        IERC20Upgradeable _rewardToken,\r\n        uint256 _expireTime,\r\n        address payable _fundsRecoveryAddress,\r\n        uint32 _maxPlayers,\r\n        bool _isWhiteList\r\n    ) external returns (address) {c_e9fd5542(0xcdbb18a4e6124712); /* function */ \n\r\nc_e9fd5542(0xd031221065f5e8fd); /* line */ \n        c_e9fd5542(0x8b32665e7f31fb8d); /* statement */ \nQuest quest = new Quest(\r\n            _questTitle,\r\n            _questDetailsRef,\r\n            Models.Deposit(createDeposit.token, createDeposit.amount),\r\n            Models.Deposit(playDeposit.token, playDeposit.amount),\r\n            Models.QuestParam(\r\n                msg.sender,\r\n                _maxPlayers,\r\n                _rewardToken,\r\n                _expireTime,\r\n                aragonGovernAddress,\r\n                _fundsRecoveryAddress,\r\n                _isWhiteList\r\n            )\r\n        );\r\n\r\n        // Collect deposit from quest creator and send it to quest\r\nc_e9fd5542(0xb1760f26ace5cbf6); /* line */ \n        c_e9fd5542(0xbf4459b76d855a95); /* statement */ \ncreateDeposit.collectFrom(msg.sender, address(quest));\r\n\r\nc_e9fd5542(0x18cbb442aab95296); /* line */ \n        c_e9fd5542(0xee634f1c6750501d); /* statement */ \nemit QuestCreated(\r\n            address(quest),\r\n            _questTitle,\r\n            _questDetailsRef,\r\n            address(_rewardToken),\r\n            _expireTime,\r\n            _fundsRecoveryAddress,\r\n            createDeposit,\r\n            playDeposit,\r\n            msg.sender,\r\n            _maxPlayers,\r\n            _isWhiteList,\r\n            version\r\n        );\r\n\r\nc_e9fd5542(0x616cfac99824e646); /* line */ \n        c_e9fd5542(0xdf6e6627dae96fb1); /* statement */ \nreturn address(quest);\r\n    }\r\n\r\n    /**\r\n     * @dev Be able to change it after deploy so we can deploy\r\n     * a new GovernQueue but keep the same QuestFactory\r\n     * @param _aragonGovernAddress The aragonGovernAddress.\r\n     */\r\n    function setAragonGovernAddress(\r\n        address _aragonGovernAddress\r\n    ) external  c_moddbfdc9ea onlyOwner c_mod0fa3af38  {c_e9fd5542(0x8369cb1f24452ae2); /* function */ \n\r\nc_e9fd5542(0xefeb67ec9005f1a1); /* line */ \n        aragonGovernAddress = _aragonGovernAddress;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": false
    }
  }
}