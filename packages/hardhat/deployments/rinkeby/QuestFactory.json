{
  "address": "0xa8922609D34472977D2C7749D6eB6E1F0eFe8e01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aragonGovernAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "questAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "questTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "questDetailsRef",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        }
      ],
      "name": "QuestCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aragonGovernAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_questTitle",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_questDetailsRef",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expireTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_fundsRecoveryAddress",
          "type": "address"
        }
      ],
      "name": "createQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27ee72af6bbbd776d5ade7a8dd177ae327146e10d0f5e06291c6da71ab36b0a9",
  "receipt": {
    "to": null,
    "from": "0xe1cD9c5ff87C3A65bAc8847e3ce979e2f23eE7f2",
    "contractAddress": "0xa8922609D34472977D2C7749D6eB6E1F0eFe8e01",
    "transactionIndex": 36,
    "gasUsed": "1314379",
    "logsBloom": "0x
    "blockHash": "0x4096887433cd36a17bfe3e316331a0dd6f9c761578b8dda5e0cc489b82cf7152",
    "transactionHash": "0x27ee72af6bbbd776d5ade7a8dd177ae327146e10d0f5e06291c6da71ab36b0a9",
    "logs": [],
    "blockNumber": 10573676,
    "cumulativeGasUsed": "14596042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0F5e6759d49063040eAB18c1B0E684C45a4B4cA"
  ],
  "solcInputHash": "ae49bc2e98467f1680c4e1c84e99c71c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aragonGovernAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"questAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"questTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"questDetailsRef\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"name\":\"QuestCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aragonGovernAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_questTitle\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_questDetailsRef\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_fundsRecoveryAddress\",\"type\":\"address\"}],\"name\":\"createQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestFactory.sol\":\"QuestFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/Quest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Quest {\\n    using SafeERC20 for IERC20;\\n\\n    struct Claim {\\n        bytes evidence;\\n        address player;\\n        uint256 amount;\\n    }\\n\\n    string public questTitle;\\n    bytes public questDetailsRef;\\n    IERC20 public rewardToken;\\n    uint256 public expireTime;\\n    address public aragonGovernAddress;\\n    address payable public fundsRecoveryAddress;\\n    Claim[] public claims;\\n\\n    event QuestClaimed(bytes evidence, address player, uint256 amount);\\n\\n    constructor(\\n        string memory _questTitle,\\n        bytes memory _questDetailsRef,\\n        IERC20 _rewardToken,\\n        uint256 _expireTime,\\n        address _aragonGovernAddress,\\n        address payable _fundsRecoveryAddress\\n    ) {\\n        questTitle = _questTitle;\\n        questDetailsRef = _questDetailsRef;\\n        rewardToken = _rewardToken;\\n        expireTime = _expireTime;\\n        aragonGovernAddress = _aragonGovernAddress;\\n        fundsRecoveryAddress = _fundsRecoveryAddress;\\n    }\\n\\n    function recoverUnclaimedFunds() external {\\n        require(block.timestamp > expireTime, \\\"ERROR: Not expired\\\");\\n        rewardToken.safeTransfer(\\n            fundsRecoveryAddress,\\n            rewardToken.balanceOf(address(this))\\n        );\\n    }\\n\\n    function claim(\\n        bytes memory _evidence,\\n        address _player,\\n        uint256 _amount,\\n        bool _claimAll\\n    ) external {\\n        require(msg.sender == aragonGovernAddress, \\\"ERROR: Sender not govern\\\");\\n        require(_evidence.length != 0, \\\"ERROR: No evidence\\\");\\n        if (_claimAll) {\\n            rewardToken.safeTransfer(\\n                _player,\\n                rewardToken.balanceOf(address(this))\\n            );\\n        }\\n        //This way the user won't need to trigger a useless safeTransfer call\\n        else if (_amount > 0) {\\n            rewardToken.safeTransfer(_player, _amount);\\n        }\\n\\n        claims.push(Claim(_evidence, _player, _amount));\\n\\n        emit QuestClaimed(_evidence, _player, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0a9cb43b8e1ab45283b2763bdb1fa350d3f85b42e57c506e370392bd5dc54e87\",\"license\":\"GPL-3.0\"},\"contracts/QuestFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Quest.sol\\\";\\n\\ncontract QuestFactory {\\n    address public aragonGovernAddress;\\n\\n    event QuestCreated(\\n        address questAddress,\\n        string questTitle,\\n        bytes questDetailsRef,\\n        address rewardTokenAddress,\\n        uint256 expireTime,\\n        uint256 creationTime\\n    );\\n\\n    constructor(address _aragonGovernAddress) {\\n        aragonGovernAddress = _aragonGovernAddress;\\n    }\\n\\n    function createQuest(\\n        string memory _questTitle,\\n        bytes memory _questDetailsRef,\\n        IERC20 _rewardToken,\\n        uint256 _expireTime,\\n        address payable _fundsRecoveryAddress\\n    ) external returns (address) {\\n        Quest quest = new Quest(\\n            _questTitle,\\n            _questDetailsRef,\\n            _rewardToken,\\n            _expireTime,\\n            aragonGovernAddress,\\n            _fundsRecoveryAddress\\n        );\\n        emit QuestCreated(\\n            address(quest),\\n            _questTitle,\\n            _questDetailsRef,\\n            address(_rewardToken),\\n            _expireTime,\\n            block.timestamp\\n        );\\n        return address(quest);\\n    }\\n}\\n\",\"keccak256\":\"0x6ff38ca960a58c0b76910b467d034cda62cad28b95325c1fa223f4f995d8e777\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161170d38038061170d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b61167c806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063abec0a031461003b578063b0a87ac114610064575b600080fd5b61004e610049366004610200565b61006c565b60405161005b919061031e565b60405180910390f35b61004e61011a565b6000808686868660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040516100a190610136565b6100b09695949392919061039f565b604051809103906000f0801580156100cc573d6000803e3d6000fd5b5090507f1bd38295a0834bcc9a872e1ebb6ef17e61d3f411d94184fb4c35dc82d5212d5b8188888888426040516101089695949392919061033f565b60405180910390a19695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6112128061043583390190565b600067ffffffffffffffff8084111561015e5761015e610405565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156101a4576101a4610405565b816040528093508581528686860111156101bd57600080fd5b858560208301376000602087830101525050509392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101fb57600080fd5b919050565b600080600080600060a08688031215610217578081fd5b853567ffffffffffffffff8082111561022e578283fd5b818801915088601f830112610241578283fd5b61025089833560208501610143565b96506020880135915080821115610265578283fd5b508601601f81018813610276578182fd5b61028588823560208401610143565b945050610294604087016101d7565b9250606086013591506102a9608087016101d7565b90509295509295909350565b60008151808452815b818110156102da576020818501810151868301820152016102be565b818111156102eb5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808916835260c0602084015261036f60c08401896102b5565b838103604085015261038181896102b5565b91909616606084015260808301949094525060a00152949350505050565b600060c082526103b260c08301896102b5565b82810360208401526103c481896102b5565b73ffffffffffffffffffffffffffffffffffffffff978816604085015260608401969096525050918416608083015290921660a09092019190915292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200121238038062001212833981016040819052620000349162000213565b855162000049906000906020890190620000ac565b5084516200005f906001906020880190620000ac565b50600280546001600160a01b039586166001600160a01b03199182161790915560039390935560048054928516928416929092179091556005805491909316911617905550620003389050565b828054620000ba90620002e5565b90600052602060002090601f016020900481019282620000de576000855562000129565b82601f10620000f957805160ff191683800117855562000129565b8280016001018555821562000129579182015b82811115620001295782518255916020019190600101906200010c565b50620001379291506200013b565b5090565b5b808211156200013757600081556001016200013c565b60006001600160401b03808411156200016f576200016f62000322565b604051601f8501601f19908116603f011681019082821181831017156200019a576200019a62000322565b81604052809350858152868686011115620001b457600080fd5b600092505b85831015620001d9578285015160208483010152602083019250620001b9565b85831115620001ec576000602087830101525b5050509392505050565b80516001600160a01b03811681146200020e57600080fd5b919050565b60008060008060008060c087890312156200022c578182fd5b86516001600160401b038082111562000243578384fd5b818901915089601f83011262000257578384fd5b620002688a83516020850162000152565b975060208901519150808211156200027e578384fd5b508701601f8101891362000290578283fd5b620002a18982516020840162000152565b955050620002b260408801620001f6565b935060608701519250620002c960808801620001f6565b9150620002d960a08801620001f6565b90509295509295509295565b600281046001821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610eca80620003486000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b0a87ac111610076578063e0c234231161005b578063e0c2342314610122578063f294cf3814610137578063f7c618c11461013f576100a3565b8063b0a87ac114610107578063b434151c1461010f576100a3565b8063310a1ee3146100a85780634621d082146100c65780637ceae310146100d0578063a888c2cd146100e5575b600080fd5b6100b0610147565b6040516100bd9190610dc7565b60405180910390f35b6100ce61014d565b005b6100d8610262565b6040516100bd9190610b9c565b6100f86100f3366004610b06565b61027e565b6040516100bd93929190610bf6565b6100d8610357565b6100ce61011d366004610a11565b610373565b61012a6105a3565b6040516100bd9190610be3565b61012a610631565b6100d861063e565b60035481565b6003544211610191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610c8e565b60405180910390fd5b6005546002546040517f70a082310000000000000000000000000000000000000000000000000000000081526102609273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906101f0903090600401610b9c565b60206040518083038186803b15801561020857600080fd5b505afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102409190610b1e565b60025473ffffffffffffffffffffffffffffffffffffffff16919061065a565b565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b6006818154811061028e57600080fd5b90600052602060002090600302016000915090508060000180546102b190610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd90610e00565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1633146103c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610cc5565b83516103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610d33565b8015610463576002546040517f70a0823100000000000000000000000000000000000000000000000000000000815261045e91859173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906101f0903090600401610b9c565b61048d565b811561048d5760025461048d9073ffffffffffffffffffffffffffffffffffffffff16848461065a565b6040805160608101825285815273ffffffffffffffffffffffffffffffffffffffff85166020808301919091529181018490526006805460018101825560009190915281518051929360039092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f019261050b928492019061092d565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061059590869086908690610bf6565b60405180910390a150505050565b600180546105b090610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546105dc90610e00565b80156106295780601f106105fe57610100808354040283529160200191610629565b820191906000526020600020905b81548152906001019060200180831161060c57829003601f168201915b505050505081565b600080546105b090610e00565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6106fb8363a9059cbb60e01b8484604051602401610679929190610bbd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610700565b505050565b6000610762826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107b69092919063ffffffff16565b8051909150156106fb578080602001905181019061078091906109f5565b6106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610d6a565b60606107c584846000856107cf565b90505b9392505050565b60608247101561080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610c31565b610814856108d0565b61084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610cfc565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108739190610b80565b60006040518083038185875af1925050503d80600081146108b0576040519150601f19603f3d011682016040523d82523d6000602084013e6108b5565b606091505b50915091506108c58282866108da565b979650505050505050565b803b15155b919050565b606083156108e95750816107c8565b8251156108f95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101889190610be3565b82805461093990610e00565b90600052602060002090601f01602090048101928261095b57600085556109a1565b82601f1061097457805160ff19168380011785556109a1565b828001600101855582156109a1579182015b828111156109a1578251825591602001919060010190610986565b506109ad9291506109b1565b5090565b5b808211156109ad57600081556001016109b2565b803573ffffffffffffffffffffffffffffffffffffffff811681146108d557600080fd5b80356108d581610e83565b600060208284031215610a06578081fd5b81516107c881610e83565b60008060008060808587031215610a26578283fd5b843567ffffffffffffffff80821115610a3d578485fd5b818701915087601f830112610a50578485fd5b813581811115610a6257610a62610e54565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610aa857610aa8610e54565b816040528281528a6020848701011115610ac0578788fd5b8260208601602083013787602084830101528098505050505050610ae6602086016109c6565b925060408501359150610afb606086016109ea565b905092959194509250565b600060208284031215610b17578081fd5b5035919050565b600060208284031215610b2f578081fd5b5051919050565b60008151808452610b4e816020860160208601610dd0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610b92818460208701610dd0565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082526107c86020830184610b36565b600060608252610c096060830186610b36565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b83811015610deb578181015183820152602001610dd3565b83811115610dfa576000848401525b50505050565b600281046001821680610e1457607f821691505b60208210811415610e4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114610e9157600080fd5b5056fea26469706673582212207f6f44d55b0b473fc6dafb6e0f731901793d98b4269d1fb322b82774ee43838264736f6c63430008010033a264697066735822122028c2cceb7df6e14c389467a2f3629d26a5a32024438ac896f0e6093cee8646f564736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063abec0a031461003b578063b0a87ac114610064575b600080fd5b61004e610049366004610200565b61006c565b60405161005b919061031e565b60405180910390f35b61004e61011a565b6000808686868660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040516100a190610136565b6100b09695949392919061039f565b604051809103906000f0801580156100cc573d6000803e3d6000fd5b5090507f1bd38295a0834bcc9a872e1ebb6ef17e61d3f411d94184fb4c35dc82d5212d5b8188888888426040516101089695949392919061033f565b60405180910390a19695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6112128061043583390190565b600067ffffffffffffffff8084111561015e5761015e610405565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156101a4576101a4610405565b816040528093508581528686860111156101bd57600080fd5b858560208301376000602087830101525050509392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146101fb57600080fd5b919050565b600080600080600060a08688031215610217578081fd5b853567ffffffffffffffff8082111561022e578283fd5b818801915088601f830112610241578283fd5b61025089833560208501610143565b96506020880135915080821115610265578283fd5b508601601f81018813610276578182fd5b61028588823560208401610143565b945050610294604087016101d7565b9250606086013591506102a9608087016101d7565b90509295509295909350565b60008151808452815b818110156102da576020818501810151868301820152016102be565b818111156102eb5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600073ffffffffffffffffffffffffffffffffffffffff808916835260c0602084015261036f60c08401896102b5565b838103604085015261038181896102b5565b91909616606084015260808301949094525060a00152949350505050565b600060c082526103b260c08301896102b5565b82810360208401526103c481896102b5565b73ffffffffffffffffffffffffffffffffffffffff978816604085015260608401969096525050918416608083015290921660a09092019190915292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200121238038062001212833981016040819052620000349162000213565b855162000049906000906020890190620000ac565b5084516200005f906001906020880190620000ac565b50600280546001600160a01b039586166001600160a01b03199182161790915560039390935560048054928516928416929092179091556005805491909316911617905550620003389050565b828054620000ba90620002e5565b90600052602060002090601f016020900481019282620000de576000855562000129565b82601f10620000f957805160ff191683800117855562000129565b8280016001018555821562000129579182015b82811115620001295782518255916020019190600101906200010c565b50620001379291506200013b565b5090565b5b808211156200013757600081556001016200013c565b60006001600160401b03808411156200016f576200016f62000322565b604051601f8501601f19908116603f011681019082821181831017156200019a576200019a62000322565b81604052809350858152868686011115620001b457600080fd5b600092505b85831015620001d9578285015160208483010152602083019250620001b9565b85831115620001ec576000602087830101525b5050509392505050565b80516001600160a01b03811681146200020e57600080fd5b919050565b60008060008060008060c087890312156200022c578182fd5b86516001600160401b038082111562000243578384fd5b818901915089601f83011262000257578384fd5b620002688a83516020850162000152565b975060208901519150808211156200027e578384fd5b508701601f8101891362000290578283fd5b620002a18982516020840162000152565b955050620002b260408801620001f6565b935060608701519250620002c960808801620001f6565b9150620002d960a08801620001f6565b90509295509295509295565b600281046001821680620002fa57607f821691505b602082108114156200031c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610eca80620003486000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b0a87ac111610076578063e0c234231161005b578063e0c2342314610122578063f294cf3814610137578063f7c618c11461013f576100a3565b8063b0a87ac114610107578063b434151c1461010f576100a3565b8063310a1ee3146100a85780634621d082146100c65780637ceae310146100d0578063a888c2cd146100e5575b600080fd5b6100b0610147565b6040516100bd9190610dc7565b60405180910390f35b6100ce61014d565b005b6100d8610262565b6040516100bd9190610b9c565b6100f86100f3366004610b06565b61027e565b6040516100bd93929190610bf6565b6100d8610357565b6100ce61011d366004610a11565b610373565b61012a6105a3565b6040516100bd9190610be3565b61012a610631565b6100d861063e565b60035481565b6003544211610191576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610c8e565b60405180910390fd5b6005546002546040517f70a082310000000000000000000000000000000000000000000000000000000081526102609273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906101f0903090600401610b9c565b60206040518083038186803b15801561020857600080fd5b505afa15801561021c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102409190610b1e565b60025473ffffffffffffffffffffffffffffffffffffffff16919061065a565b565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b6006818154811061028e57600080fd5b90600052602060002090600302016000915090508060000180546102b190610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd90610e00565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1633146103c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610cc5565b83516103fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610d33565b8015610463576002546040517f70a0823100000000000000000000000000000000000000000000000000000000815261045e91859173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906101f0903090600401610b9c565b61048d565b811561048d5760025461048d9073ffffffffffffffffffffffffffffffffffffffff16848461065a565b6040805160608101825285815273ffffffffffffffffffffffffffffffffffffffff85166020808301919091529181018490526006805460018101825560009190915281518051929360039092027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f019261050b928492019061092d565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061059590869086908690610bf6565b60405180910390a150505050565b600180546105b090610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546105dc90610e00565b80156106295780601f106105fe57610100808354040283529160200191610629565b820191906000526020600020905b81548152906001019060200180831161060c57829003601f168201915b505050505081565b600080546105b090610e00565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6106fb8363a9059cbb60e01b8484604051602401610679929190610bbd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610700565b505050565b6000610762826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107b69092919063ffffffff16565b8051909150156106fb578080602001905181019061078091906109f5565b6106fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610d6a565b60606107c584846000856107cf565b90505b9392505050565b60608247101561080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610c31565b610814856108d0565b61084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018890610cfc565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108739190610b80565b60006040518083038185875af1925050503d80600081146108b0576040519150601f19603f3d011682016040523d82523d6000602084013e6108b5565b606091505b50915091506108c58282866108da565b979650505050505050565b803b15155b919050565b606083156108e95750816107c8565b8251156108f95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101889190610be3565b82805461093990610e00565b90600052602060002090601f01602090048101928261095b57600085556109a1565b82601f1061097457805160ff19168380011785556109a1565b828001600101855582156109a1579182015b828111156109a1578251825591602001919060010190610986565b506109ad9291506109b1565b5090565b5b808211156109ad57600081556001016109b2565b803573ffffffffffffffffffffffffffffffffffffffff811681146108d557600080fd5b80356108d581610e83565b600060208284031215610a06578081fd5b81516107c881610e83565b60008060008060808587031215610a26578283fd5b843567ffffffffffffffff80821115610a3d578485fd5b818701915087601f830112610a50578485fd5b813581811115610a6257610a62610e54565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610aa857610aa8610e54565b816040528281528a6020848701011115610ac0578788fd5b8260208601602083013787602084830101528098505050505050610ae6602086016109c6565b925060408501359150610afb606086016109ea565b905092959194509250565b600060208284031215610b17578081fd5b5035919050565b600060208284031215610b2f578081fd5b5051919050565b60008151808452610b4e816020860160208601610dd0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610b92818460208701610dd0565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000602082526107c86020830184610b36565b600060608252610c096060830186610b36565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b83811015610deb578181015183820152602001610dd3565b83811115610dfa576000848401525b50505050565b600281046001821680610e1457607f821691505b60208210811415610e4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b8015158114610e9157600080fd5b5056fea26469706673582212207f6f44d55b0b473fc6dafb6e0f731901793d98b4269d1fb322b82774ee43838264736f6c63430008010033a264697066735822122028c2cceb7df6e14c389467a2f3629d26a5a32024438ac896f0e6093cee8646f564736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1376,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "aragonGovernAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}