{
  "address": "0x49230EAd7f26859Cce31bF6cC5836FA1B1725fBA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aragonGovernAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "questAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "questTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "questDetailsRef",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundsRecoveryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "QuestCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aragonGovernAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_questTitle",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_questDetailsRef",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expireTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_fundsRecoveryAddress",
          "type": "address"
        }
      ],
      "name": "createQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f2d08e22debd9c73d2fba6aee936a3313ee6022f5b004e795652e72cff47e84",
  "receipt": {
    "to": null,
    "from": "0x91B0d67D3F47A30FBEeB159E67209Ad6cb2cE22E",
    "contractAddress": "0x49230EAd7f26859Cce31bF6cC5836FA1B1725fBA",
    "transactionIndex": 1,
    "gasUsed": "2274314",
    "logsBloom": "0x
    "blockHash": "0x6946d0bf0076ed3ac1f96301df84a6f4a899d2cc34c9c28af5842e798f043987",
    "transactionHash": "0x6f2d08e22debd9c73d2fba6aee936a3313ee6022f5b004e795652e72cff47e84",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10669554,
        "transactionHash": "0x6f2d08e22debd9c73d2fba6aee936a3313ee6022f5b004e795652e72cff47e84",
        "address": "0x49230EAd7f26859Cce31bF6cC5836FA1B1725fBA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000091b0d67d3f47a30fbeeb159e67209ad6cb2ce22e"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6946d0bf0076ed3ac1f96301df84a6f4a899d2cc34c9c28af5842e798f043987"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10669554,
        "transactionHash": "0x6f2d08e22debd9c73d2fba6aee936a3313ee6022f5b004e795652e72cff47e84",
        "address": "0x49230EAd7f26859Cce31bF6cC5836FA1B1725fBA",
        "topics": [
          "0x556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca4199"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000627e77be0000000000000000000000003050e20fabe19f8576865811c9f28e85b96fa4f9000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 2,
        "blockHash": "0x6946d0bf0076ed3ac1f96301df84a6f4a899d2cc34c9c28af5842e798f043987"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10669554,
        "transactionHash": "0x6f2d08e22debd9c73d2fba6aee936a3313ee6022f5b004e795652e72cff47e84",
        "address": "0x49230EAd7f26859Cce31bF6cC5836FA1B1725fBA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000091b0d67d3f47a30fbeeb159e67209ad6cb2ce22e",
          "0x0000000000000000000000007375ed576952bd6ced060eee2db763130ea13ba0"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6946d0bf0076ed3ac1f96301df84a6f4a899d2cc34c9c28af5842e798f043987"
      }
    ],
    "blockNumber": 10669554,
    "cumulativeGasUsed": "3531117",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7881C66Fa323eabE8470b3c6Fa14259B9918baEA",
    "0x3050E20FAbE19f8576865811c9F28e85b96Fa4f9",
    "10000000000000000",
    "0x7375Ed576952BD6CeD060EeE2Db763130eA13bA0"
  ],
  "solcInputHash": "55762042aa62f69cb5859e68ffbc45e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aragonGovernAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"questAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"questTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"questDetailsRef\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsRecoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"QuestCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aragonGovernAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_questTitle\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_questDetailsRef\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_fundsRecoveryAddress\",\"type\":\"address\"}],\"name\":\"createQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestFactory.sol\":\"QuestFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Quest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Deposit.sol\\\";\\r\\nimport \\\"./libraries/Models.sol\\\";\\r\\nimport \\\"./QuestFactory.sol\\\";\\r\\n\\r\\ncontract Quest {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using DepositLib for Models.Deposit;\\r\\n\\r\\n    address public questCreator;\\r\\n    string public questTitle;\\r\\n    bytes public questDetailsRef;\\r\\n    IERC20 public rewardToken;\\r\\n    uint256 public expireTime;\\r\\n    address public aragonGovernAddress;\\r\\n    address payable public fundsRecoveryAddress;\\r\\n    Models.Claim[] public claims;\\r\\n    Models.Deposit public deposit;\\r\\n    bool public isDepositReleased;\\r\\n\\r\\n    event QuestClaimed(bytes evidence, address player, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        string memory _questTitle,\\r\\n        bytes memory _questDetailsRef,\\r\\n        IERC20 _rewardToken,\\r\\n        uint256 _expireTime,\\r\\n        address _aragonGovernAddress,\\r\\n        address payable _fundsRecoveryAddress,\\r\\n        IERC20 _depositToken,\\r\\n        uint256 _depositAmount,\\r\\n        address _questCreator\\r\\n    ) {\\r\\n        questTitle = _questTitle;\\r\\n        questDetailsRef = _questDetailsRef;\\r\\n        rewardToken = _rewardToken;\\r\\n        expireTime = _expireTime;\\r\\n        aragonGovernAddress = _aragonGovernAddress;\\r\\n        fundsRecoveryAddress = _fundsRecoveryAddress;\\r\\n        questCreator = _questCreator;\\r\\n        deposit = Models.Deposit(_depositToken, _depositAmount);\\r\\n        isDepositReleased = false;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Release deposit to creator and send unused funds to fundsRecoveryAddress.\\r\\n     * requires quests to have expired\\r\\n     */\\r\\n    function recoverFundsAndDeposit() external {\\r\\n        require(block.timestamp > expireTime, \\\"ERROR: Not expired\\\");\\r\\n\\r\\n        // Restore deposit if not already released\\r\\n        if (!isDepositReleased) {\\r\\n            deposit.releaseTo(questCreator);\\r\\n            isDepositReleased = true;\\r\\n        }\\r\\n\\r\\n        rewardToken.safeTransfer(\\r\\n            fundsRecoveryAddress,\\r\\n            rewardToken.balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Claim a quest reward.\\r\\n     * @param _evidence Evidence of the claim.\\r\\n     * @param _player Player address.\\r\\n     * @param _amount Amount of the reward.\\r\\n     * requires sender to be aragonGovernAddress\\r\\n     * requires evidence to not be empty\\r\\n     * requires claim amount to not exceed available deposit when same token\\r\\n     * emit QuestClaimed\\r\\n     */\\r\\n    function claim(\\r\\n        bytes memory _evidence,\\r\\n        address _player,\\r\\n        uint256 _amount,\\r\\n        bool _claimAll\\r\\n    ) external {\\r\\n        require(msg.sender == aragonGovernAddress, \\\"ERROR: Sender not govern\\\");\\r\\n        require(_evidence.length != 0, \\\"ERROR: No evidence\\\");\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        if (_claimAll) {\\r\\n            // Claim all but let deposit if they are same token\\r\\n            if (address(rewardToken) == address(deposit.token)) {\\r\\n                (, uint256 result) = balance.trySub(deposit.amount);\\r\\n                _amount = result;\\r\\n            } else {\\r\\n                _amount = balance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (address(rewardToken) == address(deposit.token)) {\\r\\n            (, uint256 result) = balance.trySub(_amount);\\r\\n            require(\\r\\n                result >= deposit.amount,\\r\\n                \\\"ERROR: Should not exceed allowed bounty\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            rewardToken.safeTransfer(_player, _amount);\\r\\n        }\\r\\n\\r\\n        claims.push(Models.Claim(_evidence, _player, _amount));\\r\\n\\r\\n        emit QuestClaimed(_evidence, _player, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x716b3fb1a3217a932100c374c16545fafc7782556fe33866a0a75257202d7d16\",\"license\":\"GPL-3.0\"},\"contracts/QuestFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Deposit.sol\\\";\\r\\nimport \\\"./libraries/Models.sol\\\";\\r\\nimport \\\"./Quest.sol\\\";\\r\\n\\r\\ncontract QuestFactory is Ownable {\\r\\n    using DepositLib for Models.Deposit;\\r\\n\\r\\n    address public aragonGovernAddress;\\r\\n    Models.Deposit public deposit;\\r\\n\\r\\n    event QuestCreated(\\r\\n        address questAddress,\\r\\n        string questTitle,\\r\\n        bytes questDetailsRef,\\r\\n        address rewardTokenAddress,\\r\\n        uint256 expireTime,\\r\\n        address fundsRecoveryAddress,\\r\\n        address depositToken,\\r\\n        uint256 depositAmount,\\r\\n        address creator\\r\\n    );\\r\\n\\r\\n    event DepositChanged(uint256 timestamp, address token, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _aragonGovernAddress,\\r\\n        IERC20 _depositToken,\\r\\n        uint256 _depositAmount,\\r\\n        address _initialOwner\\r\\n    ) {\\r\\n        aragonGovernAddress = _aragonGovernAddress;\\r\\n        setDeposit(_depositToken, _depositAmount);\\r\\n        if (_initialOwner != msg.sender) {\\r\\n            transferOwnership(_initialOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Set the deposit token and amount.\\r\\n     * @param _depositToken The deposit token.\\r\\n     * @param _depositAmount The deposit amount.\\r\\n     * emit DepositChanged\\r\\n     */\\r\\n    function setDeposit(IERC20 token, uint256 amount) public onlyOwner {\\r\\n        deposit = Models.Deposit(token, amount);\\r\\n        emit DepositChanged(block.timestamp, address(token), amount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Collect deposit, deploy a new Quest with given info contract\\r\\n     * and transfer deposit to new Quest.\\r\\n     * @param _title Quest title.\\r\\n     * @param _details Quest details.\\r\\n     * @param _rewardTokenAddress Reward token address.\\r\\n     * @param _expireTime Expire time.\\r\\n     * @param _fundsRecoveryAddress Funds recovery address.\\r\\n     * requires deposit allowance\\r\\n     * returns Quest address.\\r\\n     * emits QuestCreated\\r\\n     */\\r\\n    function createQuest(\\r\\n        string memory _questTitle,\\r\\n        bytes memory _questDetailsRef,\\r\\n        IERC20 _rewardToken,\\r\\n        uint256 _expireTime,\\r\\n        address payable _fundsRecoveryAddress\\r\\n    ) external returns (address) {\\r\\n        Quest quest = new Quest(\\r\\n            _questTitle,\\r\\n            _questDetailsRef,\\r\\n            _rewardToken,\\r\\n            _expireTime,\\r\\n            aragonGovernAddress,\\r\\n            _fundsRecoveryAddress,\\r\\n            deposit.token,\\r\\n            deposit.amount,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // Collect deposit from quest creator and send it to quest\\r\\n        deposit.collectFrom(msg.sender, address(quest));\\r\\n\\r\\n        emit QuestCreated(\\r\\n            address(quest),\\r\\n            _questTitle,\\r\\n            _questDetailsRef,\\r\\n            address(_rewardToken),\\r\\n            _expireTime,\\r\\n            _fundsRecoveryAddress,\\r\\n            address(deposit.token),\\r\\n            deposit.amount,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        return address(quest);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x05a05ddc2bf42d75c2379cd539cdac2702a3a2cfafad5b159e76909bc28d608a\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Models.sol\\\";\\r\\n\\r\\nlibrary DepositLib {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /*\\r\\n     * Collect deposit from signer and send it to _to address.\\r\\n     * @param _token The deposit token.\\r\\n     * @param _amount The deposit amount.\\r\\n     * @param _to The address where the deposit should be transfered.\\r\\n     */\\r\\n    function collectFrom(\\r\\n        Models.Deposit memory _collateral,\\r\\n        address _from,\\r\\n        address _to\\r\\n    ) internal {\\r\\n        collectFrom(_collateral, _from);\\r\\n        releaseTo(_collateral, _to);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * Collect deposit from signer\\r\\n     * @param _token The deposit token.\\r\\n     * @param _amount The deposit amount.\\r\\n     */\\r\\n    function collectFrom(Models.Deposit memory _collateral, address _from)\\r\\n        internal\\r\\n    {\\r\\n        if (_collateral.amount > 0) {\\r\\n            // Verify allowance\\r\\n            uint256 allowance = _collateral.token.allowance(\\r\\n                _from,\\r\\n                address(this)\\r\\n            );\\r\\n            require(\\r\\n                allowance >= _collateral.amount,\\r\\n                \\\"ERROR : Deposit bad allowance\\\"\\r\\n            );\\r\\n\\r\\n            _collateral.token.safeTransferFrom(\\r\\n                _from,\\r\\n                address(this),\\r\\n                _collateral.amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function releaseTo(Models.Deposit memory _collateral, address _to)\\r\\n        internal\\r\\n    {\\r\\n        if (_collateral.amount > 0) {\\r\\n            _collateral.token.safeTransfer(_to, _collateral.amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x00419d7de8fe1cf0e8c06555f8c2929dede75db585aa6c9e8c7a2ff8c91f5051\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Models.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary Models {\\r\\n    struct Deposit {\\r\\n        IERC20 token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    struct Claim {\\r\\n        bytes evidence;\\r\\n        address player;\\r\\n        uint256 amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe986229d7b557584748437b549743509e0fe5e41fc02b2d468dbae860612be26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620029cb380380620029cb83398101604081905262000034916200023a565b620000486200004262000095565b62000099565b600180546001600160a01b0319166001600160a01b0386161790556200006f8383620000e9565b6001600160a01b03811633146200008b576200008b81620001ae565b5050505062000345565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000f362000095565b6001600160a01b0316620001066200022b565b6001600160a01b031614620001385760405162461bcd60e51b81526004016200012f90620002db565b60405180910390fd5b6040805180820182526001600160a01b0384168082526020909101839052600280546001600160a01b03191690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca419990620001a29042908590859062000310565b60405180910390a15050565b620001b862000095565b6001600160a01b0316620001cb6200022b565b6001600160a01b031614620001f45760405162461bcd60e51b81526004016200012f90620002db565b6001600160a01b0381166200021d5760405162461bcd60e51b81526004016200012f9062000295565b620002288162000099565b50565b6000546001600160a01b031690565b6000806000806080858703121562000250578384fd5b84516200025d816200032f565b602086015190945062000270816200032f565b6040860151606087015191945092506200028a816200032f565b939692955090935050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6001600160a01b03811681146200022857600080fd5b61267680620003556000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063b0a87ac11162000063578063b0a87ac114620000d2578063c6b21b0214620000dc578063d0e30db014620000f3578063f2fde38b146200010d5762000088565b8063715018a6146200008d5780638da5cb5b1462000099578063abec0a0314620000bb575b600080fd5b6200009762000124565b005b620000a3620001b5565b604051620000b2919062000ca0565b60405180910390f35b620000a3620000cc36600462000b5b565b620001d1565b620000a3620002f5565b62000097620000ed36600462000b2d565b62000311565b620000fd62000426565b604051620000b292919062000d9a565b620000976200011e36600462000aec565b62000448565b6200012e62000520565b73ffffffffffffffffffffffffffffffffffffffff166200014e620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620001a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b60405180910390fd5b620001b3600062000524565b565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60015460025460035460405160009384938a938a938a938a9373ffffffffffffffffffffffffffffffffffffffff918216938b9392909116913390620002179062000a36565b6200022b9998979695949392919062000dd5565b604051809103906000f08015801562000248573d6000803e3d6000fd5b506040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff16815260035460208201529091506200028690338362000599565b6002546003546040517f4cf18b7944786d158010105e0d058cfa9ca46ad789d42eb9b6fa9490be2a44f792620002e39285928c928c928c928c928c9273ffffffffffffffffffffffffffffffffffffffff90911691339062000d19565b60405180910390a19695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6200031b62000520565b73ffffffffffffffffffffffffffffffffffffffff166200033b620001b5565b73ffffffffffffffffffffffffffffffffffffffff16146200038b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526020909101839052600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca4199906200041a9042908590859062001012565b60405180910390a15050565b60025460035473ffffffffffffffffffffffffffffffffffffffff9091169082565b6200045262000520565b73ffffffffffffffffffffffffffffffffffffffff1662000472620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620004c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b73ffffffffffffffffffffffffffffffffffffffff811662000512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000e58565b6200051d8162000524565b50565b3390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005a58383620005b6565b620005b18382620006e5565b505050565b602082015115620006e15781516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e906200061b908590309060040162000cc1565b60206040518083038186803b1580156200063457600080fd5b505afa15801562000649573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066f919062000c1d565b90508260200151811015620006b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f47565b60208301518351620005b19173ffffffffffffffffffffffffffffffffffffffff90911690849030906200071d565b5050565b602082015115620006e15760208201518251620006e19173ffffffffffffffffffffffffffffffffffffffff909116908390620007ca565b620007c4846323b872dd60e01b858585604051602401620007419392919062000ce8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620007ec565b50505050565b620005b18363a9059cbb60e01b84846040516024016200074192919062000d9a565b600062000850826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620008aa9092919063ffffffff16565b805190915015620005b1578080602001905181019062000871919062000b0b565b620005b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000fb5565b6060620008bb8484600085620008c5565b90505b9392505050565b60608247101562000904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000eb5565b6200090f85620009d4565b62000948576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f7e565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405162000973919062000c82565b60006040518083038185875af1925050503d8060008114620009b2576040519150601f19603f3d011682016040523d82523d6000602084013e620009b7565b606091505b5091509150620009c9828286620009de565b979650505050505050565b803b15155b919050565b60608315620009ef575081620008be565b82511562000a005782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e919062000dc0565b61158180620010c083390190565b600067ffffffffffffffff8084111562000a625762000a626200106d565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000aab5762000aab6200106d565b8160405280935085815286868601111562000ac557600080fd5b858560208301376000602087830101525050509392505050565b8035620009d9816200109c565b60006020828403121562000afe578081fd5b8135620008be816200109c565b60006020828403121562000b1d578081fd5b81518015158114620008be578182fd5b6000806040838503121562000b40578081fd5b823562000b4d816200109c565b946020939093013593505050565b600080600080600060a0868803121562000b73578081fd5b853567ffffffffffffffff8082111562000b8b578283fd5b818801915088601f83011262000b9f578283fd5b62000bb08983356020850162000a44565b9650602088013591508082111562000bc6578283fd5b508601601f8101881362000bd8578182fd5b62000be98882356020840162000a44565b94505062000bfa6040870162000adf565b92506060860135915062000c116080870162000adf565b90509295509295909350565b60006020828403121562000c2f578081fd5b5051919050565b6000815180845262000c508160208601602086016200103e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825162000c968184602087016200103e565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061012073ffffffffffffffffffffffffffffffffffffffff808d16845281602085015262000d4c8285018d62000c36565b9150838203604085015262000d62828c62000c36565b99811660608501526080840198909852505093851660a085015291841660c084015260e0830152909116610100909101529392505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252620008be602083018462000c36565b600061012080835262000deb8184018d62000c36565b9050828103602084015262000e01818c62000c36565b73ffffffffffffffffffffffffffffffffffffffff9a8b16604085015260608401999099525050948716608086015292861660a085015290851660c084015260e08301529092166101009092019190915292915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4552524f52203a204465706f7369742062616420616c6c6f77616e6365000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60005b838110156200105b57818101518382015260200162001041565b83811115620007c45750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200051d57600080fdfe60806040523480156200001157600080fd5b50604051620015813803806200158183398101604081905262000034916200027d565b8851620000499060019060208c0190620000ed565b5087516200005f9060029060208b0190620000ed565b50600380546001600160a01b03199081166001600160a01b03998a161790915560049690965560058054871695881695909517909455600680548616938716939093179092556000805485169386169390931790925560408051808201909152919093168082526020909101839052600880549092161790556009555050600a805460ff19169055620003bf565b828054620000fb906200036c565b90600052602060002090601f0160209004810192826200011f57600085556200016a565b82601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b5b808211156200017857600081556001016200017d565b60006001600160401b0380841115620001b057620001b0620003a9565b604051601f8501601f19908116603f01168101908282118183101715620001db57620001db620003a9565b81604052809350858152868686011115620001f557600080fd5b600092505b858310156200021a578285015160208483010152602083019250620001fa565b858311156200022d576000602087830101525b5050509392505050565b80516001600160a01b03811681146200024f57600080fd5b919050565b600082601f83011262000265578081fd5b620002768383516020850162000193565b9392505050565b60008060008060008060008060006101208a8c0312156200029c578485fd5b89516001600160401b0380821115620002b3578687fd5b818c0191508c601f830112620002c7578687fd5b620002d88d83516020850162000193565b9a5060208c0151915080821115620002ee578687fd5b50620002fd8c828d0162000254565b9850506200030e60408b0162000237565b965060608a015195506200032560808b0162000237565b94506200033560a08b0162000237565b93506200034560c08b0162000237565b925060e08a015191506200035d6101008b0162000237565b90509295985092959850929598565b6002810460018216806200038157607f821691505b60208210811415620003a357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111b280620003cf6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b0a87ac111610081578063e0c234231161005b578063e0c2342314610186578063f294cf381461019b578063f7c618c1146101a3576100d4565b8063b0a87ac114610155578063b434151c1461015d578063d0e30db014610170576100d4565b80637ceae310116100b25780637ceae31014610116578063990cc4891461011e578063a888c2cd14610133576100d4565b8063310a1ee3146100d9578063579ca2c9146100f75780636c3a4cce14610101575b600080fd5b6100e16101ab565b6040516100ee91906110af565b60405180910390f35b6100ff6101b1565b005b610109610338565b6040516100ee9190610e1c565b610109610354565b610126610370565b6040516100ee9190610e63565b610146610141366004610d86565b610379565b6040516100ee93929190610e81565b610109610452565b6100ff61016b366004610c91565b61046e565b6101786107a2565b6040516100ee929190610e3d565b61018e6107c4565b6040516100ee9190610e6e565b61018e610852565b61010961085f565b60045481565b60045442116101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f76565b60405180910390fd5b600a5460ff16610267576000546040805180820190915260085473ffffffffffffffffffffffffffffffffffffffff9081168252600954602083015261023b921661087b565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6006546003546040517f70a082310000000000000000000000000000000000000000000000000000000081526103369273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906102c6903090600401610e1c565b60206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610d9e565b60035473ffffffffffffffffffffffffffffffffffffffff1691906108b4565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b600a5460ff1681565b6007818154811061038957600080fd5b90600052602060002090600302016000915090508060000180546103ac906110e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103d8906110e8565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fad565b83516104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9061101b565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319061054e903090600401610e1c565b60206040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e9190610d9e565b905081156105eb5760085460035473ffffffffffffffffffffffffffffffffffffffff908116911614156105e7576009546000906105dd90839061095a565b94506105eb915050565b8092505b60085460035473ffffffffffffffffffffffffffffffffffffffff9081169116141561066157600061061d828561095a565b91505060086001015481101561065f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610ebc565b505b821561068b5760035461068b9073ffffffffffffffffffffffffffffffffffffffff1685856108b4565b6040805160608101825286815273ffffffffffffffffffffffffffffffffffffffff86166020808301919091529181018590526007805460018101825560009190915281518051929360039092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926107099284920190610bad565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061079390879087908790610e81565b60405180910390a15050505050565b60085460095473ffffffffffffffffffffffffffffffffffffffff9091169082565b600280546107d1906110e8565b80601f01602080910402602001604051908101604052809291908181526020018280546107fd906110e8565b801561084a5780601f1061081f5761010080835404028352916020019161084a565b820191906000526020600020905b81548152906001019060200180831161082d57829003601f168201915b505050505081565b600180546107d1906110e8565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6020820151156108b057602082015182516108b09173ffffffffffffffffffffffffffffffffffffffff9091169083906108b4565b5050565b6109558363a9059cbb60e01b84846040516024016108d3929190610e3d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610980565b505050565b6000808383111561097057506000905080610979565b50600190508183035b9250929050565b60006109e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a369092919063ffffffff16565b8051909150156109555780806020019051810190610a009190610c75565b610955576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90611052565b6060610a458484600085610a4f565b90505b9392505050565b606082471015610a8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f19565b610a9485610b50565b610aca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fe4565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610af39190610e00565b60006040518083038185875af1925050503d8060008114610b30576040519150601f19603f3d011682016040523d82523d6000602084013e610b35565b606091505b5091509150610b45828286610b5a565b979650505050505050565b803b15155b919050565b60608315610b69575081610a48565b825115610b795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9190610e6e565b828054610bb9906110e8565b90600052602060002090601f016020900481019282610bdb5760008555610c21565b82601f10610bf457805160ff1916838001178555610c21565b82800160010185558215610c21579182015b82811115610c21578251825591602001919060010190610c06565b50610c2d929150610c31565b5090565b5b80821115610c2d5760008155600101610c32565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5557600080fd5b8035610b558161116b565b600060208284031215610c86578081fd5b8151610a488161116b565b60008060008060808587031215610ca6578283fd5b843567ffffffffffffffff80821115610cbd578485fd5b818701915087601f830112610cd0578485fd5b813581811115610ce257610ce261113c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d2857610d2861113c565b816040528281528a6020848701011115610d40578788fd5b8260208601602083013787602084830101528098505050505050610d6660208601610c46565b925060408501359150610d7b60608601610c6a565b905092959194509250565b600060208284031215610d97578081fd5b5035919050565b600060208284031215610daf578081fd5b5051919050565b60008151808452610dce8160208601602086016110b8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610e128184602087016110b8565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208252610a486020830184610db6565b600060608252610e946060830186610db6565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526027908201527f4552524f523a2053686f756c64206e6f742065786365656420616c6c6f77656460408201527f20626f756e747900000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b838110156110d35781810151838201526020016110bb565b838111156110e2576000848401525b50505050565b6002810460018216806110fc57607f821691505b60208210811415611136577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461117957600080fd5b5056fea2646970667358221220ed56507b634ebeaae309509ea680f90e736b7873ed34daf4d911bd38dce7becb64736f6c63430008010033a26469706673582212203b76689e14505056015d3b5e2ef896271124d6f9f50c1f051e2f0c3975176c7964736f6c63430008010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063b0a87ac11162000063578063b0a87ac114620000d2578063c6b21b0214620000dc578063d0e30db014620000f3578063f2fde38b146200010d5762000088565b8063715018a6146200008d5780638da5cb5b1462000099578063abec0a0314620000bb575b600080fd5b6200009762000124565b005b620000a3620001b5565b604051620000b2919062000ca0565b60405180910390f35b620000a3620000cc36600462000b5b565b620001d1565b620000a3620002f5565b62000097620000ed36600462000b2d565b62000311565b620000fd62000426565b604051620000b292919062000d9a565b620000976200011e36600462000aec565b62000448565b6200012e62000520565b73ffffffffffffffffffffffffffffffffffffffff166200014e620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620001a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b60405180910390fd5b620001b3600062000524565b565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60015460025460035460405160009384938a938a938a938a9373ffffffffffffffffffffffffffffffffffffffff918216938b9392909116913390620002179062000a36565b6200022b9998979695949392919062000dd5565b604051809103906000f08015801562000248573d6000803e3d6000fd5b506040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff16815260035460208201529091506200028690338362000599565b6002546003546040517f4cf18b7944786d158010105e0d058cfa9ca46ad789d42eb9b6fa9490be2a44f792620002e39285928c928c928c928c928c9273ffffffffffffffffffffffffffffffffffffffff90911691339062000d19565b60405180910390a19695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6200031b62000520565b73ffffffffffffffffffffffffffffffffffffffff166200033b620001b5565b73ffffffffffffffffffffffffffffffffffffffff16146200038b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526020909101839052600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca4199906200041a9042908590859062001012565b60405180910390a15050565b60025460035473ffffffffffffffffffffffffffffffffffffffff9091169082565b6200045262000520565b73ffffffffffffffffffffffffffffffffffffffff1662000472620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620004c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f12565b73ffffffffffffffffffffffffffffffffffffffff811662000512576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000e58565b6200051d8162000524565b50565b3390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620005a58383620005b6565b620005b18382620006e5565b505050565b602082015115620006e15781516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e906200061b908590309060040162000cc1565b60206040518083038186803b1580156200063457600080fd5b505afa15801562000649573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200066f919062000c1d565b90508260200151811015620006b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f47565b60208301518351620005b19173ffffffffffffffffffffffffffffffffffffffff90911690849030906200071d565b5050565b602082015115620006e15760208201518251620006e19173ffffffffffffffffffffffffffffffffffffffff909116908390620007ca565b620007c4846323b872dd60e01b858585604051602401620007419392919062000ce8565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152620007ec565b50505050565b620005b18363a9059cbb60e01b84846040516024016200074192919062000d9a565b600062000850826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620008aa9092919063ffffffff16565b805190915015620005b1578080602001905181019062000871919062000b0b565b620005b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000fb5565b6060620008bb8484600085620008c5565b90505b9392505050565b60608247101562000904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000eb5565b6200090f85620009d4565b62000948576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f7e565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405162000973919062000c82565b60006040518083038185875af1925050503d8060008114620009b2576040519150601f19603f3d011682016040523d82523d6000602084013e620009b7565b606091505b5091509150620009c9828286620009de565b979650505050505050565b803b15155b919050565b60608315620009ef575081620008be565b82511562000a005782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e919062000dc0565b61158180620010c083390190565b600067ffffffffffffffff8084111562000a625762000a626200106d565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000aab5762000aab6200106d565b8160405280935085815286868601111562000ac557600080fd5b858560208301376000602087830101525050509392505050565b8035620009d9816200109c565b60006020828403121562000afe578081fd5b8135620008be816200109c565b60006020828403121562000b1d578081fd5b81518015158114620008be578182fd5b6000806040838503121562000b40578081fd5b823562000b4d816200109c565b946020939093013593505050565b600080600080600060a0868803121562000b73578081fd5b853567ffffffffffffffff8082111562000b8b578283fd5b818801915088601f83011262000b9f578283fd5b62000bb08983356020850162000a44565b9650602088013591508082111562000bc6578283fd5b508601601f8101881362000bd8578182fd5b62000be98882356020840162000a44565b94505062000bfa6040870162000adf565b92506060860135915062000c116080870162000adf565b90509295509295909350565b60006020828403121562000c2f578081fd5b5051919050565b6000815180845262000c508160208601602086016200103e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825162000c968184602087016200103e565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061012073ffffffffffffffffffffffffffffffffffffffff808d16845281602085015262000d4c8285018d62000c36565b9150838203604085015262000d62828c62000c36565b99811660608501526080840198909852505093851660a085015291841660c084015260e0830152909116610100909101529392505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252620008be602083018462000c36565b600061012080835262000deb8184018d62000c36565b9050828103602084015262000e01818c62000c36565b73ffffffffffffffffffffffffffffffffffffffff9a8b16604085015260608401999099525050948716608086015292861660a085015290851660c084015260e08301529092166101009092019190915292915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4552524f52203a204465706f7369742062616420616c6c6f77616e6365000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60005b838110156200105b57818101518382015260200162001041565b83811115620007c45750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200051d57600080fdfe60806040523480156200001157600080fd5b50604051620015813803806200158183398101604081905262000034916200027d565b8851620000499060019060208c0190620000ed565b5087516200005f9060029060208b0190620000ed565b50600380546001600160a01b03199081166001600160a01b03998a161790915560049690965560058054871695881695909517909455600680548616938716939093179092556000805485169386169390931790925560408051808201909152919093168082526020909101839052600880549092161790556009555050600a805460ff19169055620003bf565b828054620000fb906200036c565b90600052602060002090601f0160209004810192826200011f57600085556200016a565b82601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b5b808211156200017857600081556001016200017d565b60006001600160401b0380841115620001b057620001b0620003a9565b604051601f8501601f19908116603f01168101908282118183101715620001db57620001db620003a9565b81604052809350858152868686011115620001f557600080fd5b600092505b858310156200021a578285015160208483010152602083019250620001fa565b858311156200022d576000602087830101525b5050509392505050565b80516001600160a01b03811681146200024f57600080fd5b919050565b600082601f83011262000265578081fd5b620002768383516020850162000193565b9392505050565b60008060008060008060008060006101208a8c0312156200029c578485fd5b89516001600160401b0380821115620002b3578687fd5b818c0191508c601f830112620002c7578687fd5b620002d88d83516020850162000193565b9a5060208c0151915080821115620002ee578687fd5b50620002fd8c828d0162000254565b9850506200030e60408b0162000237565b965060608a015195506200032560808b0162000237565b94506200033560a08b0162000237565b93506200034560c08b0162000237565b925060e08a015191506200035d6101008b0162000237565b90509295985092959850929598565b6002810460018216806200038157607f821691505b60208210811415620003a357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111b280620003cf6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b0a87ac111610081578063e0c234231161005b578063e0c2342314610186578063f294cf381461019b578063f7c618c1146101a3576100d4565b8063b0a87ac114610155578063b434151c1461015d578063d0e30db014610170576100d4565b80637ceae310116100b25780637ceae31014610116578063990cc4891461011e578063a888c2cd14610133576100d4565b8063310a1ee3146100d9578063579ca2c9146100f75780636c3a4cce14610101575b600080fd5b6100e16101ab565b6040516100ee91906110af565b60405180910390f35b6100ff6101b1565b005b610109610338565b6040516100ee9190610e1c565b610109610354565b610126610370565b6040516100ee9190610e63565b610146610141366004610d86565b610379565b6040516100ee93929190610e81565b610109610452565b6100ff61016b366004610c91565b61046e565b6101786107a2565b6040516100ee929190610e3d565b61018e6107c4565b6040516100ee9190610e6e565b61018e610852565b61010961085f565b60045481565b60045442116101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f76565b60405180910390fd5b600a5460ff16610267576000546040805180820190915260085473ffffffffffffffffffffffffffffffffffffffff9081168252600954602083015261023b921661087b565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6006546003546040517f70a082310000000000000000000000000000000000000000000000000000000081526103369273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906102c6903090600401610e1c565b60206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610d9e565b60035473ffffffffffffffffffffffffffffffffffffffff1691906108b4565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b600a5460ff1681565b6007818154811061038957600080fd5b90600052602060002090600302016000915090508060000180546103ac906110e8565b80601f01602080910402602001604051908101604052809291908181526020018280546103d8906110e8565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fad565b83516104f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9061101b565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319061054e903090600401610e1c565b60206040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e9190610d9e565b905081156105eb5760085460035473ffffffffffffffffffffffffffffffffffffffff908116911614156105e7576009546000906105dd90839061095a565b94506105eb915050565b8092505b60085460035473ffffffffffffffffffffffffffffffffffffffff9081169116141561066157600061061d828561095a565b91505060086001015481101561065f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610ebc565b505b821561068b5760035461068b9073ffffffffffffffffffffffffffffffffffffffff1685856108b4565b6040805160608101825286815273ffffffffffffffffffffffffffffffffffffffff86166020808301919091529181018590526007805460018101825560009190915281518051929360039092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926107099284920190610bad565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061079390879087908790610e81565b60405180910390a15050505050565b60085460095473ffffffffffffffffffffffffffffffffffffffff9091169082565b600280546107d1906110e8565b80601f01602080910402602001604051908101604052809291908181526020018280546107fd906110e8565b801561084a5780601f1061081f5761010080835404028352916020019161084a565b820191906000526020600020905b81548152906001019060200180831161082d57829003601f168201915b505050505081565b600180546107d1906110e8565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6020820151156108b057602082015182516108b09173ffffffffffffffffffffffffffffffffffffffff9091169083906108b4565b5050565b6109558363a9059cbb60e01b84846040516024016108d3929190610e3d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610980565b505050565b6000808383111561097057506000905080610979565b50600190508183035b9250929050565b60006109e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a369092919063ffffffff16565b8051909150156109555780806020019051810190610a009190610c75565b610955576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90611052565b6060610a458484600085610a4f565b90505b9392505050565b606082471015610a8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f19565b610a9485610b50565b610aca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fe4565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610af39190610e00565b60006040518083038185875af1925050503d8060008114610b30576040519150601f19603f3d011682016040523d82523d6000602084013e610b35565b606091505b5091509150610b45828286610b5a565b979650505050505050565b803b15155b919050565b60608315610b69575081610a48565b825115610b795782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9190610e6e565b828054610bb9906110e8565b90600052602060002090601f016020900481019282610bdb5760008555610c21565b82601f10610bf457805160ff1916838001178555610c21565b82800160010185558215610c21579182015b82811115610c21578251825591602001919060010190610c06565b50610c2d929150610c31565b5090565b5b80821115610c2d5760008155600101610c32565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b5557600080fd5b8035610b558161116b565b600060208284031215610c86578081fd5b8151610a488161116b565b60008060008060808587031215610ca6578283fd5b843567ffffffffffffffff80821115610cbd578485fd5b818701915087601f830112610cd0578485fd5b813581811115610ce257610ce261113c565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d2857610d2861113c565b816040528281528a6020848701011115610d40578788fd5b8260208601602083013787602084830101528098505050505050610d6660208601610c46565b925060408501359150610d7b60608601610c6a565b905092959194509250565b600060208284031215610d97578081fd5b5035919050565b600060208284031215610daf578081fd5b5051919050565b60008151808452610dce8160208601602086016110b8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610e128184602087016110b8565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208252610a486020830184610db6565b600060608252610e946060830186610db6565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526027908201527f4552524f523a2053686f756c64206e6f742065786365656420616c6c6f77656460408201527f20626f756e747900000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b838110156110d35781810151838201526020016110bb565b838111156110e2576000848401525b50505050565b6002810460018216806110fc57607f821691505b60208210811415611136577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461117957600080fd5b5056fea2646970667358221220ed56507b634ebeaae309509ea680f90e736b7873ed34daf4d911bd38dce7becb64736f6c63430008010033a26469706673582212203b76689e14505056015d3b5e2ef896271124d6f9f50c1f051e2f0c3975176c7964736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1905,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "aragonGovernAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1908,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "deposit",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Deposit)2189_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)728": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_struct(Deposit)2189_storage": {
        "encoding": "inplace",
        "label": "struct Models.Deposit",
        "members": [
          {
            "astId": 2186,
            "contract": "contracts/QuestFactory.sol:QuestFactory",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)728"
          },
          {
            "astId": 2188,
            "contract": "contracts/QuestFactory.sol:QuestFactory",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}