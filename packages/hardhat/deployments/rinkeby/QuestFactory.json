{
  "address": "0x3e716D0A78A8540aAfaF236857f47723E2D7B4C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aragonGovernAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "questAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "questTitle",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "questDetailsRef",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundsRecoveryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "QuestCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aragonGovernAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_questTitle",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_questDetailsRef",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expireTime",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_fundsRecoveryAddress",
          "type": "address"
        }
      ],
      "name": "createQuest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99cd7928e92ec819d2c6265cb112a768c9b7bcd7b1bf1a02c19900b50e4ad29a",
  "receipt": {
    "to": null,
    "from": "0x07AD02e0C1FA0b09fC945ff197E18e9C256838c6",
    "contractAddress": "0x3e716D0A78A8540aAfaF236857f47723E2D7B4C8",
    "transactionIndex": 28,
    "gasUsed": "2271363",
    "logsBloom": "0x40000000000000000000000000200000000000000000000000800000004000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000001000001000000000000000000000004000000020000000000000000000800000000000000000000000000008000400040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd341fcc7d443ebb8e869ad230fed216e4610d8142ee23602646abbfa9c4fd3cf",
    "transactionHash": "0x99cd7928e92ec819d2c6265cb112a768c9b7bcd7b1bf1a02c19900b50e4ad29a",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 10614488,
        "transactionHash": "0x99cd7928e92ec819d2c6265cb112a768c9b7bcd7b1bf1a02c19900b50e4ad29a",
        "address": "0x3e716D0A78A8540aAfaF236857f47723E2D7B4C8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000007ad02e0c1fa0b09fc945ff197e18e9c256838c6"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0xd341fcc7d443ebb8e869ad230fed216e4610d8142ee23602646abbfa9c4fd3cf"
      },
      {
        "transactionIndex": 28,
        "blockNumber": 10614488,
        "transactionHash": "0x99cd7928e92ec819d2c6265cb112a768c9b7bcd7b1bf1a02c19900b50e4ad29a",
        "address": "0x3e716D0A78A8540aAfaF236857f47723E2D7B4C8",
        "topics": [
          "0x556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca4199"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000006271c2240000000000000000000000006e7c3bc98bee14302aa2a98b4c5c86b13eb4b6cd000000000000000000000000000000000000000000000000016345785d8a0000",
        "logIndex": 64,
        "blockHash": "0xd341fcc7d443ebb8e869ad230fed216e4610d8142ee23602646abbfa9c4fd3cf"
      }
    ],
    "blockNumber": 10614488,
    "cumulativeGasUsed": "7889115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0F5e6759d49063040eAB18c1B0E684C45a4B4cA",
    "0x6e7c3BC98bee14302AA2A98B4c5C86b13eB4b6Cd",
    "100000000000000000"
  ],
  "solcInputHash": "fd1d72adce9767b69eed3f4f5598118b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aragonGovernAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"questAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"questTitle\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"questDetailsRef\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsRecoveryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"QuestCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aragonGovernAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_questTitle\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_questDetailsRef\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_fundsRecoveryAddress\",\"type\":\"address\"}],\"name\":\"createQuest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/QuestFactory.sol\":\"QuestFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Quest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Deposit.sol\\\";\\r\\nimport \\\"./libraries/Models.sol\\\";\\r\\nimport \\\"./QuestFactory.sol\\\";\\r\\n\\r\\ncontract Quest {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using DepositLib for Models.Deposit;\\r\\n\\r\\n    address public questCreator;\\r\\n    string public questTitle;\\r\\n    bytes public questDetailsRef;\\r\\n    IERC20 public rewardToken;\\r\\n    uint256 public expireTime;\\r\\n    address public aragonGovernAddress;\\r\\n    address payable public fundsRecoveryAddress;\\r\\n    Models.Claim[] public claims;\\r\\n    Models.Deposit public deposit;\\r\\n    bool public depositHeld;\\r\\n\\r\\n    event QuestClaimed(bytes evidence, address player, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        string memory _questTitle,\\r\\n        bytes memory _questDetailsRef,\\r\\n        IERC20 _rewardToken,\\r\\n        uint256 _expireTime,\\r\\n        address _aragonGovernAddress,\\r\\n        address payable _fundsRecoveryAddress,\\r\\n        IERC20 _depositToken,\\r\\n        uint256 _depositAmount,\\r\\n        address _questCreator\\r\\n    ) {\\r\\n        questTitle = _questTitle;\\r\\n        questDetailsRef = _questDetailsRef;\\r\\n        rewardToken = _rewardToken;\\r\\n        expireTime = _expireTime;\\r\\n        aragonGovernAddress = _aragonGovernAddress;\\r\\n        fundsRecoveryAddress = _fundsRecoveryAddress;\\r\\n        questCreator = _questCreator;\\r\\n        deposit = Models.Deposit(_depositToken, _depositAmount);\\r\\n        depositHeld = true;\\r\\n    }\\r\\n\\r\\n    function recoverUnclaimedFunds() external {\\r\\n        require(block.timestamp > expireTime, \\\"ERROR: Not expired\\\");\\r\\n\\r\\n        // Restore deposit\\r\\n        deposit.releaseTo(questCreator);\\r\\n        depositHeld = false;\\r\\n\\r\\n        rewardToken.safeTransfer(\\r\\n            fundsRecoveryAddress,\\r\\n            rewardToken.balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claim(\\r\\n        bytes memory _evidence,\\r\\n        address _player,\\r\\n        uint256 _amount,\\r\\n        bool _claimAll\\r\\n    ) external {\\r\\n        require(msg.sender == aragonGovernAddress, \\\"ERROR: Sender not govern\\\");\\r\\n        require(_evidence.length != 0, \\\"ERROR: No evidence\\\");\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        if (_claimAll) {\\r\\n            // Claim all but let deposit if they are same token\\r\\n            if (address(rewardToken) == address(deposit.token)) {\\r\\n                (, uint256 result) = balance.trySub(deposit.amount);\\r\\n                _amount = result;\\r\\n            } else {\\r\\n                _amount = balance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (address(rewardToken) == address(deposit.token)) {\\r\\n            (, uint256 result) = balance.trySub(_amount);\\r\\n            require(\\r\\n                result >= deposit.amount,\\r\\n                \\\"ERROR: Should not exceed allowed bounty\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // This way the user won't need to trigger a useless safeTransfer call\\r\\n        if (_amount > 0) {\\r\\n            rewardToken.safeTransfer(_player, _amount);\\r\\n        }\\r\\n\\r\\n        claims.push(Models.Claim(_evidence, _player, _amount));\\r\\n\\r\\n        emit QuestClaimed(_evidence, _player, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ca5772030674b01da627cdecba4d923ef08d539baad1264c03cf8a208b1faa5\",\"license\":\"GPL-3.0\"},\"contracts/QuestFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Deposit.sol\\\";\\r\\nimport \\\"./libraries/Models.sol\\\";\\r\\nimport \\\"./Quest.sol\\\";\\r\\n\\r\\ncontract QuestFactory is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using DepositLib for Models.Deposit;\\r\\n\\r\\n    address public aragonGovernAddress;\\r\\n    Models.Deposit public deposit;\\r\\n\\r\\n    event QuestCreated(\\r\\n        address questAddress,\\r\\n        string questTitle,\\r\\n        bytes questDetailsRef,\\r\\n        address rewardTokenAddress,\\r\\n        uint256 expireTime,\\r\\n        uint256 creationTime,\\r\\n        address fundsRecoveryAddress,\\r\\n        address depositToken,\\r\\n        uint256 depositAmount\\r\\n    );\\r\\n\\r\\n    event DepositChanged(uint256 timestamp, address token, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _aragonGovernAddress,\\r\\n        IERC20 _depositToken,\\r\\n        uint256 _depositAmount\\r\\n    ) {\\r\\n        aragonGovernAddress = _aragonGovernAddress;\\r\\n        setDeposit(_depositToken, _depositAmount);\\r\\n    }\\r\\n\\r\\n    function setDeposit(IERC20 token, uint256 amount) public onlyOwner {\\r\\n        deposit = Models.Deposit(token, amount);\\r\\n        emit DepositChanged(block.timestamp, address(token), amount);\\r\\n    }\\r\\n\\r\\n    function createQuest(\\r\\n        string memory _questTitle,\\r\\n        bytes memory _questDetailsRef,\\r\\n        IERC20 _rewardToken,\\r\\n        uint256 _expireTime,\\r\\n        address payable _fundsRecoveryAddress\\r\\n    ) external returns (address) {\\r\\n        // Collect deposit from quest creator\\r\\n        deposit.collectFrom(msg.sender);\\r\\n\\r\\n        Quest quest = new Quest(\\r\\n            _questTitle,\\r\\n            _questDetailsRef,\\r\\n            _rewardToken,\\r\\n            _expireTime,\\r\\n            aragonGovernAddress,\\r\\n            _fundsRecoveryAddress,\\r\\n            deposit.token,\\r\\n            deposit.amount,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // Transfer deposit to quest, so when reclaiming funds, the quest can release deposit to the creator\\r\\n        deposit.releaseTo(address(quest));\\r\\n        emit QuestCreated(\\r\\n            address(quest),\\r\\n            _questTitle,\\r\\n            _questDetailsRef,\\r\\n            address(_rewardToken),\\r\\n            _expireTime,\\r\\n            block.timestamp,\\r\\n            _fundsRecoveryAddress,\\r\\n            address(deposit.token),\\r\\n            deposit.amount\\r\\n        );\\r\\n\\r\\n        return address(quest);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0aad87f7df5d2662e3394c9aa89d4a5b594e8035e6dc651d1b92445f886d569b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Models.sol\\\";\\r\\n\\r\\nlibrary DepositLib {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function collectFrom(Models.Deposit memory _collateral, address _from)\\r\\n        internal\\r\\n    {\\r\\n        if (_collateral.amount > 0) {\\r\\n            // Verify allowance\\r\\n            uint256 allowance = _collateral.token.allowance(\\r\\n                _from,\\r\\n                address(this)\\r\\n            );\\r\\n            require(\\r\\n                allowance >= _collateral.amount,\\r\\n                \\\"ERROR : Deposit bad allowance\\\"\\r\\n            );\\r\\n\\r\\n            _collateral.token.safeTransferFrom(\\r\\n                _from,\\r\\n                address(this),\\r\\n                _collateral.amount\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function releaseTo(Models.Deposit memory _collateral, address _to)\\r\\n        internal\\r\\n    {\\r\\n        if (_collateral.amount > 0) {\\r\\n            _collateral.token.safeTransfer(_to, _collateral.amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x330f229a7011cee46d0ae158b9e6d6ef963a7c7b6bd4ee78e9d4b5e41e9bfb48\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Models.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.1;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nlibrary Models {\\r\\n    struct Deposit {\\r\\n        IERC20 token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    struct Claim {\\r\\n        bytes evidence;\\r\\n        address player;\\r\\n        uint256 amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe986229d7b557584748437b549743509e0fe5e41fc02b2d468dbae860612be26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620028e9380380620028e98339810160408190526200003491620001a0565b620000486200004262000078565b6200007c565b600180546001600160a01b0319166001600160a01b0385161790556200006f8282620000cc565b50505062000254565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000d662000078565b6001600160a01b0316620000e962000191565b6001600160a01b0316146200011b5760405162461bcd60e51b81526004016200011290620001e7565b60405180910390fd5b6040805180820182526001600160a01b0384168082526020909101839052600280546001600160a01b03191690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca41999062000185904290859085906200021c565b60405180910390a15050565b6000546001600160a01b031690565b600080600060608486031215620001b5578283fd5b8351620001c2816200023b565b6020850151909350620001d5816200023b565b80925050604084015190509250925092565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6001600160a01b03811681146200025157600080fd5b50565b61268580620002646000396000f3fe60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063b0a87ac11162000063578063b0a87ac114620000d2578063c6b21b0214620000dc578063d0e30db014620000f3578063f2fde38b146200010d5762000088565b8063715018a6146200008d5780638da5cb5b1462000099578063abec0a0314620000bb575b600080fd5b6200009762000124565b005b620000a3620001b5565b604051620000b2919062000cbc565b60405180910390f35b620000a3620000cc36600462000b77565b620001d1565b620000a36200032c565b62000097620000ed36600462000b49565b62000348565b620000fd6200045d565b604051620000b292919062000db4565b620000976200011e36600462000b08565b6200047f565b6200012e62000557565b73ffffffffffffffffffffffffffffffffffffffff166200014e620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620001a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b60405180910390fd5b620001b360006200055b565b565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff16815260035460208201526000906200020d9033620005d0565b6001546002546003546040516000938a938a938a938a9373ffffffffffffffffffffffffffffffffffffffff908116938b9391169133906200024f9062000a52565b620002639998979695949392919062000def565b604051809103906000f08015801562000280573d6000803e3d6000fd5b506040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff1681526003546020820152909150620002bd908262000701565b6002546003546040517f3423d8d80de75d9a7261c1498176b675f73f66ad27ce1f0c82651c59139235ac926200031a9285928c928c928c928c9242928d9273ffffffffffffffffffffffffffffffffffffffff9092169162000d35565b60405180910390a19695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6200035262000557565b73ffffffffffffffffffffffffffffffffffffffff1662000372620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620003c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526020909101839052600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca41999062000451904290859085906200102c565b60405180910390a15050565b60025460035473ffffffffffffffffffffffffffffffffffffffff9091169082565b6200048962000557565b73ffffffffffffffffffffffffffffffffffffffff16620004a9620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620004f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b73ffffffffffffffffffffffffffffffffffffffff811662000549576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000e72565b62000554816200055b565b50565b3390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602082015115620006fd5781516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9062000635908590309060040162000cdd565b60206040518083038186803b1580156200064e57600080fd5b505afa15801562000663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000689919062000c39565b90508260200151811015620006cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f61565b60208301518351620006fb9173ffffffffffffffffffffffffffffffffffffffff909116908490309062000739565b505b5050565b602082015115620006fd5760208201518251620006fd9173ffffffffffffffffffffffffffffffffffffffff909116908390620007e6565b620007e0846323b872dd60e01b8585856040516024016200075d9392919062000d04565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000808565b50505050565b620006fb8363a9059cbb60e01b84846040516024016200075d92919062000db4565b60006200086c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620008c69092919063ffffffff16565b805190915015620006fb57808060200190518101906200088d919062000b27565b620006fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000fcf565b6060620008d78484600085620008e1565b90505b9392505050565b60608247101562000920576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000ecf565b6200092b85620009f0565b62000964576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f98565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516200098f919062000c9e565b60006040518083038185875af1925050503d8060008114620009ce576040519150601f19603f3d011682016040523d82523d6000602084013e620009d3565b606091505b5091509150620009e5828286620009fa565b979650505050505050565b803b15155b919050565b6060831562000a0b575081620008da565b82511562000a1c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e919062000dda565b61157680620010da83390190565b600067ffffffffffffffff8084111562000a7e5762000a7e62001087565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000ac75762000ac762001087565b8160405280935085815286868601111562000ae157600080fd5b858560208301376000602087830101525050509392505050565b8035620009f581620010b6565b60006020828403121562000b1a578081fd5b8135620008da81620010b6565b60006020828403121562000b39578081fd5b81518015158114620008da578182fd5b6000806040838503121562000b5c578081fd5b823562000b6981620010b6565b946020939093013593505050565b600080600080600060a0868803121562000b8f578081fd5b853567ffffffffffffffff8082111562000ba7578283fd5b818801915088601f83011262000bbb578283fd5b62000bcc8983356020850162000a60565b9650602088013591508082111562000be2578283fd5b508601601f8101881362000bf4578182fd5b62000c058882356020840162000a60565b94505062000c166040870162000afb565b92506060860135915062000c2d6080870162000afb565b90509295509295909350565b60006020828403121562000c4b578081fd5b5051919050565b6000815180845262000c6c81602086016020860162001058565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825162000cb281846020870162001058565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061012073ffffffffffffffffffffffffffffffffffffffff808d16845281602085015262000d688285018d62000c52565b9150838203604085015262000d7e828c62000c52565b99811660608501526080840198909852505060a081019490945291841660c084015290921660e082015261010001529392505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252620008da602083018462000c52565b600061012080835262000e058184018d62000c52565b9050828103602084015262000e1b818c62000c52565b73ffffffffffffffffffffffffffffffffffffffff9a8b16604085015260608401999099525050948716608086015292861660a085015290851660c084015260e08301529092166101009092019190915292915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4552524f52203a204465706f7369742062616420616c6c6f77616e6365000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60005b83811015620010755781810151838201526020016200105b565b83811115620007e05750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200055457600080fdfe60806040523480156200001157600080fd5b506040516200157638038062001576833981016040819052620000349162000280565b8851620000499060019060208c0190620000f0565b5087516200005f9060029060208b0190620000f0565b50600380546001600160a01b03199081166001600160a01b03998a161790915560049690965560058054871695881695909517909455600680548616938716939093179092556000805485169386169390931790925560408051808201909152919093168082526020909101839052600880549092161790556009555050600a805460ff19166001179055620003c2565b828054620000fe906200036f565b90600052602060002090601f0160209004810192826200012257600085556200016d565b82601f106200013d57805160ff19168380011785556200016d565b828001600101855582156200016d579182015b828111156200016d57825182559160200191906001019062000150565b506200017b9291506200017f565b5090565b5b808211156200017b576000815560010162000180565b60006001600160401b0380841115620001b357620001b3620003ac565b604051601f8501601f19908116603f01168101908282118183101715620001de57620001de620003ac565b81604052809350858152868686011115620001f857600080fd5b600092505b858310156200021d578285015160208483010152602083019250620001fd565b8583111562000230576000602087830101525b5050509392505050565b80516001600160a01b03811681146200025257600080fd5b919050565b600082601f83011262000268578081fd5b620002798383516020850162000196565b9392505050565b60008060008060008060008060006101208a8c0312156200029f578485fd5b89516001600160401b0380821115620002b6578687fd5b818c0191508c601f830112620002ca578687fd5b620002db8d83516020850162000196565b9a5060208c0151915080821115620002f1578687fd5b50620003008c828d0162000257565b9850506200031160408b016200023a565b965060608a015195506200032860808b016200023a565b94506200033860a08b016200023a565b93506200034860c08b016200023a565b925060e08a01519150620003606101008b016200023a565b90509295985092959850929598565b6002810460018216806200038457607f821691505b60208210811415620003a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111a480620003d26000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b434151c11610081578063e0c234231161005b578063e0c2342314610186578063f294cf381461019b578063f7c618c1146101a3576100d4565b8063b434151c14610148578063c6da86111461015b578063d0e30db014610170576100d4565b80637ceae310116100b25780637ceae31014610116578063a888c2cd1461011e578063b0a87ac114610140576100d4565b8063310a1ee3146100d95780634621d082146100f75780636c3a4cce14610101575b600080fd5b6100e16101ab565b6040516100ee91906110a1565b60405180910390f35b6100ff6101b1565b005b61010961032a565b6040516100ee9190610e0e565b610109610346565b61013161012c366004610d78565b610362565b6040516100ee93929190610e73565b61010961043b565b6100ff610156366004610c83565b610457565b61016361078b565b6040516100ee9190610e55565b610178610794565b6040516100ee929190610e2f565b61018e6107b6565b6040516100ee9190610e60565b61018e610844565b610109610851565b60045481565b60045442116101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f68565b60405180910390fd5b6000546040805180820190915260085473ffffffffffffffffffffffffffffffffffffffff90811682526009546020830152610231921661086d565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556006546003546040517f70a082310000000000000000000000000000000000000000000000000000000081526103289273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906102b8903090600401610e0e565b60206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190610d90565b60035473ffffffffffffffffffffffffffffffffffffffff1691906108a6565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b6007818154811061037257600080fd5b9060005260206000209060030201600091509050806000018054610395906110da565b80601f01602080910402602001604051908101604052809291908181526020018280546103c1906110da565b801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f9f565b83516104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9061100d565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190610537903090600401610e0e565b60206040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105879190610d90565b905081156105d45760085460035473ffffffffffffffffffffffffffffffffffffffff908116911614156105d0576009546000906105c690839061094c565b94506105d4915050565b8092505b60085460035473ffffffffffffffffffffffffffffffffffffffff9081169116141561064a576000610606828561094c565b915050600860010154811015610648576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610eae565b505b8215610674576003546106749073ffffffffffffffffffffffffffffffffffffffff1685856108a6565b6040805160608101825286815273ffffffffffffffffffffffffffffffffffffffff86166020808301919091529181018590526007805460018101825560009190915281518051929360039092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926106f29284920190610b9f565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061077c90879087908790610e73565b60405180910390a15050505050565b600a5460ff1681565b60085460095473ffffffffffffffffffffffffffffffffffffffff9091169082565b600280546107c3906110da565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef906110da565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081565b600180546107c3906110da565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6020820151156108a257602082015182516108a29173ffffffffffffffffffffffffffffffffffffffff9091169083906108a6565b5050565b6109478363a9059cbb60e01b84846040516024016108c5929190610e2f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610972565b505050565b600080838311156109625750600090508061096b565b50600190508183035b9250929050565b60006109d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a289092919063ffffffff16565b80519091501561094757808060200190518101906109f29190610c67565b610947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90611044565b6060610a378484600085610a41565b90505b9392505050565b606082471015610a7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f0b565b610a8685610b42565b610abc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fd6565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ae59190610df2565b60006040518083038185875af1925050503d8060008114610b22576040519150601f19603f3d011682016040523d82523d6000602084013e610b27565b606091505b5091509150610b37828286610b4c565b979650505050505050565b803b15155b919050565b60608315610b5b575081610a3a565b825115610b6b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9190610e60565b828054610bab906110da565b90600052602060002090601f016020900481019282610bcd5760008555610c13565b82601f10610be657805160ff1916838001178555610c13565b82800160010185558215610c13579182015b82811115610c13578251825591602001919060010190610bf8565b50610c1f929150610c23565b5090565b5b80821115610c1f5760008155600101610c24565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b4757600080fd5b8035610b478161115d565b600060208284031215610c78578081fd5b8151610a3a8161115d565b60008060008060808587031215610c98578283fd5b843567ffffffffffffffff80821115610caf578485fd5b818701915087601f830112610cc2578485fd5b813581811115610cd457610cd461112e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d1a57610d1a61112e565b816040528281528a6020848701011115610d32578788fd5b8260208601602083013787602084830101528098505050505050610d5860208601610c38565b925060408501359150610d6d60608601610c5c565b905092959194509250565b600060208284031215610d89578081fd5b5035919050565b600060208284031215610da1578081fd5b5051919050565b60008151808452610dc08160208601602086016110aa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610e048184602087016110aa565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208252610a3a6020830184610da8565b600060608252610e866060830186610da8565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526027908201527f4552524f523a2053686f756c64206e6f742065786365656420616c6c6f77656460408201527f20626f756e747900000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b838110156110c55781810151838201526020016110ad565b838111156110d4576000848401525b50505050565b6002810460018216806110ee57607f821691505b60208210811415611128577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461116b57600080fd5b5056fea2646970667358221220c84dfbfaa671f8e9a27f44807bba7d814fb503765aa088da676349afea12a84964736f6c63430008010033a264697066735822122018b5cfdf38e2dd632d88f5be1a8a5d5a8637839ee704b717284316db3f2d6a6764736f6c63430008010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000885760003560e01c8063b0a87ac11162000063578063b0a87ac114620000d2578063c6b21b0214620000dc578063d0e30db014620000f3578063f2fde38b146200010d5762000088565b8063715018a6146200008d5780638da5cb5b1462000099578063abec0a0314620000bb575b600080fd5b6200009762000124565b005b620000a3620001b5565b604051620000b2919062000cbc565b60405180910390f35b620000a3620000cc36600462000b77565b620001d1565b620000a36200032c565b62000097620000ed36600462000b49565b62000348565b620000fd6200045d565b604051620000b292919062000db4565b620000976200011e36600462000b08565b6200047f565b6200012e62000557565b73ffffffffffffffffffffffffffffffffffffffff166200014e620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620001a7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b60405180910390fd5b620001b360006200055b565b565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff16815260035460208201526000906200020d9033620005d0565b6001546002546003546040516000938a938a938a938a9373ffffffffffffffffffffffffffffffffffffffff908116938b9391169133906200024f9062000a52565b620002639998979695949392919062000def565b604051809103906000f08015801562000280573d6000803e3d6000fd5b506040805180820190915260025473ffffffffffffffffffffffffffffffffffffffff1681526003546020820152909150620002bd908262000701565b6002546003546040517f3423d8d80de75d9a7261c1498176b675f73f66ad27ce1f0c82651c59139235ac926200031a9285928c928c928c928c9242928d9273ffffffffffffffffffffffffffffffffffffffff9092169162000d35565b60405180910390a19695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6200035262000557565b73ffffffffffffffffffffffffffffffffffffffff1662000372620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620003c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b60408051808201825273ffffffffffffffffffffffffffffffffffffffff84168082526020909101839052600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556003829055517f556f88907cfe81bbd1433b2c2ba3860920f0b50b218c55ca0a060558e7ca41999062000451904290859085906200102c565b60405180910390a15050565b60025460035473ffffffffffffffffffffffffffffffffffffffff9091169082565b6200048962000557565b73ffffffffffffffffffffffffffffffffffffffff16620004a9620001b5565b73ffffffffffffffffffffffffffffffffffffffff1614620004f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f2c565b73ffffffffffffffffffffffffffffffffffffffff811662000549576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000e72565b62000554816200055b565b50565b3390565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602082015115620006fd5781516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063dd62ed3e9062000635908590309060040162000cdd565b60206040518083038186803b1580156200064e57600080fd5b505afa15801562000663573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000689919062000c39565b90508260200151811015620006cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f61565b60208301518351620006fb9173ffffffffffffffffffffffffffffffffffffffff909116908490309062000739565b505b5050565b602082015115620006fd5760208201518251620006fd9173ffffffffffffffffffffffffffffffffffffffff909116908390620007e6565b620007e0846323b872dd60e01b8585856040516024016200075d9392919062000d04565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915262000808565b50505050565b620006fb8363a9059cbb60e01b84846040516024016200075d92919062000db4565b60006200086c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16620008c69092919063ffffffff16565b805190915015620006fb57808060200190518101906200088d919062000b27565b620006fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000fcf565b6060620008d78484600085620008e1565b90505b9392505050565b60608247101562000920576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000ecf565b6200092b85620009f0565b62000964576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e9062000f98565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516200098f919062000c9e565b60006040518083038185875af1925050503d8060008114620009ce576040519150601f19603f3d011682016040523d82523d6000602084013e620009d3565b606091505b5091509150620009e5828286620009fa565b979650505050505050565b803b15155b919050565b6060831562000a0b575081620008da565b82511562000a1c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019e919062000dda565b61157680620010da83390190565b600067ffffffffffffffff8084111562000a7e5762000a7e62001087565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562000ac75762000ac762001087565b8160405280935085815286868601111562000ae157600080fd5b858560208301376000602087830101525050509392505050565b8035620009f581620010b6565b60006020828403121562000b1a578081fd5b8135620008da81620010b6565b60006020828403121562000b39578081fd5b81518015158114620008da578182fd5b6000806040838503121562000b5c578081fd5b823562000b6981620010b6565b946020939093013593505050565b600080600080600060a0868803121562000b8f578081fd5b853567ffffffffffffffff8082111562000ba7578283fd5b818801915088601f83011262000bbb578283fd5b62000bcc8983356020850162000a60565b9650602088013591508082111562000be2578283fd5b508601601f8101881362000bf4578182fd5b62000c058882356020840162000a60565b94505062000c166040870162000afb565b92506060860135915062000c2d6080870162000afb565b90509295509295909350565b60006020828403121562000c4b578081fd5b5051919050565b6000815180845262000c6c81602086016020860162001058565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825162000cb281846020870162001058565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600061012073ffffffffffffffffffffffffffffffffffffffff808d16845281602085015262000d688285018d62000c52565b9150838203604085015262000d7e828c62000c52565b99811660608501526080840198909852505060a081019490945291841660c084015290921660e082015261010001529392505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252620008da602083018462000c52565b600061012080835262000e058184018d62000c52565b9050828103602084015262000e1b818c62000c52565b73ffffffffffffffffffffffffffffffffffffffff9a8b16604085015260608401999099525050948716608086015292861660a085015290851660c084015260e08301529092166101009092019190915292915050565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4552524f52203a204465706f7369742062616420616c6c6f77616e6365000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60005b83811015620010755781810151838201526020016200105b565b83811115620007e05750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146200055457600080fdfe60806040523480156200001157600080fd5b506040516200157638038062001576833981016040819052620000349162000280565b8851620000499060019060208c0190620000f0565b5087516200005f9060029060208b0190620000f0565b50600380546001600160a01b03199081166001600160a01b03998a161790915560049690965560058054871695881695909517909455600680548616938716939093179092556000805485169386169390931790925560408051808201909152919093168082526020909101839052600880549092161790556009555050600a805460ff19166001179055620003c2565b828054620000fe906200036f565b90600052602060002090601f0160209004810192826200012257600085556200016d565b82601f106200013d57805160ff19168380011785556200016d565b828001600101855582156200016d579182015b828111156200016d57825182559160200191906001019062000150565b506200017b9291506200017f565b5090565b5b808211156200017b576000815560010162000180565b60006001600160401b0380841115620001b357620001b3620003ac565b604051601f8501601f19908116603f01168101908282118183101715620001de57620001de620003ac565b81604052809350858152868686011115620001f857600080fd5b600092505b858310156200021d578285015160208483010152602083019250620001fd565b8583111562000230576000602087830101525b5050509392505050565b80516001600160a01b03811681146200025257600080fd5b919050565b600082601f83011262000268578081fd5b620002798383516020850162000196565b9392505050565b60008060008060008060008060006101208a8c0312156200029f578485fd5b89516001600160401b0380821115620002b6578687fd5b818c0191508c601f830112620002ca578687fd5b620002db8d83516020850162000196565b9a5060208c0151915080821115620002f1578687fd5b50620003008c828d0162000257565b9850506200031160408b016200023a565b965060608a015195506200032860808b016200023a565b94506200033860a08b016200023a565b93506200034860c08b016200023a565b925060e08a01519150620003606101008b016200023a565b90509295985092959850929598565b6002810460018216806200038457607f821691505b60208210811415620003a657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111a480620003d26000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063b434151c11610081578063e0c234231161005b578063e0c2342314610186578063f294cf381461019b578063f7c618c1146101a3576100d4565b8063b434151c14610148578063c6da86111461015b578063d0e30db014610170576100d4565b80637ceae310116100b25780637ceae31014610116578063a888c2cd1461011e578063b0a87ac114610140576100d4565b8063310a1ee3146100d95780634621d082146100f75780636c3a4cce14610101575b600080fd5b6100e16101ab565b6040516100ee91906110a1565b60405180910390f35b6100ff6101b1565b005b61010961032a565b6040516100ee9190610e0e565b610109610346565b61013161012c366004610d78565b610362565b6040516100ee93929190610e73565b61010961043b565b6100ff610156366004610c83565b610457565b61016361078b565b6040516100ee9190610e55565b610178610794565b6040516100ee929190610e2f565b61018e6107b6565b6040516100ee9190610e60565b61018e610844565b610109610851565b60045481565b60045442116101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f68565b60405180910390fd5b6000546040805180820190915260085473ffffffffffffffffffffffffffffffffffffffff90811682526009546020830152610231921661086d565b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556006546003546040517f70a082310000000000000000000000000000000000000000000000000000000081526103289273ffffffffffffffffffffffffffffffffffffffff9081169216906370a08231906102b8903090600401610e0e565b60206040518083038186803b1580156102d057600080fd5b505afa1580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103089190610d90565b60035473ffffffffffffffffffffffffffffffffffffffff1691906108a6565b565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b6007818154811061037257600080fd5b9060005260206000209060030201600091509050806000018054610395906110da565b80601f01602080910402602001604051908101604052809291908181526020018280546103c1906110da565b801561040e5780601f106103e35761010080835404028352916020019161040e565b820191906000526020600020905b8154815290600101906020018083116103f157829003601f168201915b505050506001830154600290930154919273ffffffffffffffffffffffffffffffffffffffff1691905083565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f9f565b83516104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9061100d565b6003546040517f70a0823100000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190610537903090600401610e0e565b60206040518083038186803b15801561054f57600080fd5b505afa158015610563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105879190610d90565b905081156105d45760085460035473ffffffffffffffffffffffffffffffffffffffff908116911614156105d0576009546000906105c690839061094c565b94506105d4915050565b8092505b60085460035473ffffffffffffffffffffffffffffffffffffffff9081169116141561064a576000610606828561094c565b915050600860010154811015610648576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610eae565b505b8215610674576003546106749073ffffffffffffffffffffffffffffffffffffffff1685856108a6565b6040805160608101825286815273ffffffffffffffffffffffffffffffffffffffff86166020808301919091529181018590526007805460018101825560009190915281518051929360039092027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801926106f29284920190610b9f565b5060208201516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055604091820151600290910155517fa1c3b325aa2c115e4b244062eba2515bc5585ae5b41556be8fef399ae9fde11b9061077c90879087908790610e73565b60405180910390a15050505050565b600a5460ff1681565b60085460095473ffffffffffffffffffffffffffffffffffffffff9091169082565b600280546107c3906110da565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef906110da565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505081565b600180546107c3906110da565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6020820151156108a257602082015182516108a29173ffffffffffffffffffffffffffffffffffffffff9091169083906108a6565b5050565b6109478363a9059cbb60e01b84846040516024016108c5929190610e2f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610972565b505050565b600080838311156109625750600090508061096b565b50600190508183035b9250929050565b60006109d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a289092919063ffffffff16565b80519091501561094757808060200190518101906109f29190610c67565b610947576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90611044565b6060610a378484600085610a41565b90505b9392505050565b606082471015610a7d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610f0b565b610a8685610b42565b610abc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610fd6565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ae59190610df2565b60006040518083038185875af1925050503d8060008114610b22576040519150601f19603f3d011682016040523d82523d6000602084013e610b27565b606091505b5091509150610b37828286610b4c565b979650505050505050565b803b15155b919050565b60608315610b5b575081610a3a565b825115610b6b5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec9190610e60565b828054610bab906110da565b90600052602060002090601f016020900481019282610bcd5760008555610c13565b82601f10610be657805160ff1916838001178555610c13565b82800160010185558215610c13579182015b82811115610c13578251825591602001919060010190610bf8565b50610c1f929150610c23565b5090565b5b80821115610c1f5760008155600101610c24565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b4757600080fd5b8035610b478161115d565b600060208284031215610c78578081fd5b8151610a3a8161115d565b60008060008060808587031215610c98578283fd5b843567ffffffffffffffff80821115610caf578485fd5b818701915087601f830112610cc2578485fd5b813581811115610cd457610cd461112e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610d1a57610d1a61112e565b816040528281528a6020848701011115610d32578788fd5b8260208601602083013787602084830101528098505050505050610d5860208601610c38565b925060408501359150610d6d60608601610c5c565b905092959194509250565b600060208284031215610d89578081fd5b5035919050565b600060208284031215610da1578081fd5b5051919050565b60008151808452610dc08160208601602086016110aa565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251610e048184602087016110aa565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b600060208252610a3a6020830184610da8565b600060608252610e866060830186610da8565b73ffffffffffffffffffffffffffffffffffffffff9490941660208301525060400152919050565b60208082526027908201527f4552524f523a2053686f756c64206e6f742065786365656420616c6c6f77656460408201527f20626f756e747900000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f4552524f523a204e6f7420657870697265640000000000000000000000000000604082015260600190565b60208082526018908201527f4552524f523a2053656e646572206e6f7420676f7665726e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526012908201527f4552524f523a204e6f2065766964656e63650000000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60005b838110156110c55781810151838201526020016110ad565b838111156110d4576000848401525b50505050565b6002810460018216806110ee57607f821691505b60208210811415611128577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b801515811461116b57600080fd5b5056fea2646970667358221220c84dfbfaa671f8e9a27f44807bba7d814fb503765aa088da676349afea12a84964736f6c63430008010033a264697066735822122018b5cfdf38e2dd632d88f5be1a8a5d5a8637839ee704b717284316db3f2d6a6764736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1905,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "aragonGovernAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1908,
        "contract": "contracts/QuestFactory.sol:QuestFactory",
        "label": "deposit",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Deposit)2161_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)728": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_struct(Deposit)2161_storage": {
        "encoding": "inplace",
        "label": "struct Models.Deposit",
        "members": [
          {
            "astId": 2158,
            "contract": "contracts/QuestFactory.sol:QuestFactory",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)728"
          },
          {
            "astId": 2160,
            "contract": "contracts/QuestFactory.sol:QuestFactory",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}