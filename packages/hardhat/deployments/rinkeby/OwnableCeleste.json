{
  "address": "0xdCA81bde631EA9A85D12c57150427cAc350E3952",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "decideDispute",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "name": "subject",
          "type": "address"
        },
        {
          "name": "state",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeAmount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDisputeFees",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_submitter",
          "type": "address"
        },
        {
          "name": "_evidence",
          "type": "bytes"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "closeEvidencePeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_possibleRulings",
          "type": "uint256"
        },
        {
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [
        {
          "name": "subject",
          "type": "address"
        },
        {
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_feeToken",
          "type": "address"
        },
        {
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "transactionHash": "0x01a91cceb0f4ed93c5cd49b5a5418b6fb610c95b54856fd66de896bb2161b898",
  "receipt": {
    "to": null,
    "from": "0x91B0d67D3F47A30FBEeB159E67209Ad6cb2cE22E",
    "contractAddress": "0xdCA81bde631EA9A85D12c57150427cAc350E3952",
    "transactionIndex": 0,
    "gasUsed": "874961",
    "logsBloom": "0x
    "blockHash": "0xd775ec049a641eafef795671d7956820febc4a947d8377dbe1454a55d151a4ad",
    "transactionHash": "0x01a91cceb0f4ed93c5cd49b5a5418b6fb610c95b54856fd66de896bb2161b898",
    "logs": [],
    "blockNumber": 10676067,
    "cumulativeGasUsed": "874961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3050E20FAbE19f8576865811c9F28e85b96Fa4f9",
    "50000000000000000"
  ],
  "solcInputHash": "a6944b2f61bcf83839b564892dd1b56e",
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"decideDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputeFees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_submitter\",\"type\":\"address\"},{\"name\":\"_evidence\",\"type\":\"bytes\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"ruling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeToken\",\"type\":\"address\"},{\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"closeEvidencePeriod(uint256)\":{\"details\":\"Close the evidence period of a dispute\\r\",\"params\":{\"_disputeId\":\"Identification number of the dispute to close its evidence submitting period\\r\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Create a dispute over the Arbitrable sender with a number of possible rulings\\r\",\"params\":{\"_metadata\":\"Optional metadata that can be used to provide additional information on the dispute to be created\\r\",\"_possibleRulings\":\"Number of possible rulings allowed for the dispute\\r\"},\"return\":\"Dispute identification number\\r\"},\"getDisputeFees()\":{\"details\":\"Tell the dispute fees information to create a dispute\\r\",\"return\":\"recipient Address where the corresponding dispute fees must be transferred to\\rfeeToken ERC20 token used for the fees\\rfeeAmount Total amount of fees that must be allowed to the recipient\\r\"},\"rule(uint256)\":{\"params\":{\"_disputeId\":\"Identification number of the dispute to be ruled\\r\"},\"return\":\"subject Arbitrable instance associated to the dispute\\rruling Ruling number computed for the given dispute\\r\"},\"submitEvidence(uint256,address,bytes)\":{\"details\":\"Submit evidence for a dispute\\r\",\"params\":{\"_disputeId\":\"Id of the dispute in the Protocol\\r\",\"_evidence\":\"Data submitted for the evidence related to the dispute\\r\",\"_submitter\":\"Address of the account submitting the evidence\\r\"}}}},\"userdoc\":{\"methods\":{\"rule(uint256)\":{\"notice\":\"Rule dispute #`_disputeId` if ready\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/OwnableCelesteMock.sol\":\"OwnableCeleste\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/OwnableCelesteMock.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-01-07\\r\\n */\\r\\n\\r\\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\\r\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 {\\r\\n    function totalSupply() public view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _who) public view returns (uint256);\\r\\n\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n// File: contracts/arbitration/IArbitrator.sol\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\ninterface IArbitrator {\\r\\n    /**\\r\\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\r\\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\\r\\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\r\\n     * @return Dispute identification number\\r\\n     */\\r\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Submit evidence for a dispute\\r\\n     * @param _disputeId Id of the dispute in the Protocol\\r\\n     * @param _submitter Address of the account submitting the evidence\\r\\n     * @param _evidence Data submitted for the evidence related to the dispute\\r\\n     */\\r\\n    function submitEvidence(\\r\\n        uint256 _disputeId,\\r\\n        address _submitter,\\r\\n        bytes calldata _evidence\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Close the evidence period of a dispute\\r\\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\\r\\n     */\\r\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rule dispute #`_disputeId` if ready\\r\\n     * @param _disputeId Identification number of the dispute to be ruled\\r\\n     * @return subject Arbitrable instance associated to the dispute\\r\\n     * @return ruling Ruling number computed for the given dispute\\r\\n     */\\r\\n    function rule(uint256 _disputeId)\\r\\n        external\\r\\n        returns (address subject, uint256 ruling);\\r\\n\\r\\n    /**\\r\\n     * @dev Tell the dispute fees information to create a dispute\\r\\n     * @return recipient Address where the corresponding dispute fees must be transferred to\\r\\n     * @return feeToken ERC20 token used for the fees\\r\\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\\r\\n     */\\r\\n    function getDisputeFees()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address recipient,\\r\\n            ERC20 feeToken,\\r\\n            uint256 feeAmount\\r\\n        );\\r\\n}\\r\\n\\r\\n// File: contracts/lib/os/SafeERC20.sol\\r\\n\\r\\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/SafeERC20.sol\\r\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\r\\n    // https://github.com/ethereum/solidity/issues/3544\\r\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeTransfer(\\r\\n        ERC20 _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory transferCallData = abi.encodeWithSelector(\\r\\n            TRANSFER_SELECTOR,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        ERC20 _token,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\r\\n            _token.transferFrom.selector,\\r\\n            _from,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        ERC20 _token,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory approveCallData = abi.encodeWithSelector(\\r\\n            _token.approve.selector,\\r\\n            _spender,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\r\\n    }\\r\\n\\r\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\r\\n        private\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool ret;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40) // free memory pointer\\r\\n\\r\\n            let success := call(\\r\\n                gas, // forward all gas\\r\\n                _addr, // address\\r\\n                0, // no value\\r\\n                add(_calldata, 0x20), // calldata start\\r\\n                mload(_calldata), // calldata length\\r\\n                ptr, // write output over free memory\\r\\n                0x20 // uint256 return\\r\\n            )\\r\\n\\r\\n            if gt(success, 0) {\\r\\n                // Check number of bytes returned from last function call\\r\\n                switch returndatasize\\r\\n                // No bytes returned: assume success\\r\\n                case 0 {\\r\\n                    ret := 1\\r\\n                }\\r\\n                // 32 bytes returned: check if non-zero\\r\\n                case 0x20 {\\r\\n                    // Only return success if returned data was true\\r\\n                    // Already have output in ptr\\r\\n                    ret := eq(mload(ptr), 1)\\r\\n                }\\r\\n                // Not sure what was returned: don't mark as success\\r\\n                default {\\r\\n\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts/ownable-celeste/OwnableCeleste.sol\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\ncontract OwnableCeleste is IArbitrator {\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\\r\\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \\\"missing\\\", \\\"leaked\\\", and \\\"refused\\\", respectively.\\r\\n    // This Arbitrable introduces the concept of the challenger/submitter (a binary outcome) as 3/4.\\r\\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the challenger.\\r\\n    uint256 private constant DISPUTES_NOT_RULED = 0;\\r\\n    uint256 private constant DISPUTES_RULING_CHALLENGER = 3;\\r\\n    uint256 private constant DISPUTES_RULING_SUBMITTER = 4;\\r\\n\\r\\n    enum State {\\r\\n        NOT_DISPUTED,\\r\\n        DISPUTED,\\r\\n        DISPUTES_NOT_RULED,\\r\\n        DISPUTES_RULING_CHALLENGER,\\r\\n        DISPUTES_RULING_SUBMITTER\\r\\n    }\\r\\n\\r\\n    struct Dispute {\\r\\n        address subject;\\r\\n        State state;\\r\\n    }\\r\\n\\r\\n    ERC20 public feeToken;\\r\\n    uint256 public feeAmount;\\r\\n    uint256 public currentId;\\r\\n    address public owner;\\r\\n    mapping(uint256 => Dispute) public disputes;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"ERR:NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(ERC20 _feeToken, uint256 _feeAmount) public {\\r\\n        owner = msg.sender;\\r\\n        feeToken = _feeToken;\\r\\n        feeAmount = _feeAmount;\\r\\n    }\\r\\n\\r\\n    function setOwner(address _owner) public onlyOwner {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\r\\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\\r\\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\r\\n     * @return Dispute identification number\\r\\n     */\\r\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\\r\\n        external\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 disputeId = currentId;\\r\\n        disputes[disputeId] = Dispute(msg.sender, State.DISPUTED);\\r\\n        currentId++;\\r\\n\\r\\n        require(\\r\\n            feeToken.safeTransferFrom(msg.sender, address(this), feeAmount),\\r\\n            \\\"ERR:DEPOSIT_FAILED\\\"\\r\\n        );\\r\\n        return disputeId;\\r\\n    }\\r\\n\\r\\n    function decideDispute(uint256 _disputeId, State _state)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _state != State.NOT_DISPUTED && _state != State.DISPUTED,\\r\\n            \\\"ERR:OUTCOME_NOT_ASSIGNABLE\\\"\\r\\n        );\\r\\n\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        require(dispute.state == State.DISPUTED, \\\"ERR:NOT_DISPUTED\\\");\\r\\n\\r\\n        dispute.state = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Submit evidence for a dispute\\r\\n     * @param _disputeId Id of the dispute in the Protocol\\r\\n     * @param _submitter Address of the account submitting the evidence\\r\\n     * @param _evidence Data submitted for the evidence related to the dispute\\r\\n     */\\r\\n    function submitEvidence(\\r\\n        uint256 _disputeId,\\r\\n        address _submitter,\\r\\n        bytes calldata _evidence\\r\\n    ) external {}\\r\\n\\r\\n    /**\\r\\n     * @dev Close the evidence period of a dispute\\r\\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\\r\\n     */\\r\\n    function closeEvidencePeriod(uint256 _disputeId) external {}\\r\\n\\r\\n    /**\\r\\n     * @notice Rule dispute #`_disputeId` if ready\\r\\n     * @param _disputeId Identification number of the dispute to be ruled\\r\\n     * @return subject Arbitrable instance associated to the dispute\\r\\n     * @return ruling Ruling number computed for the given dispute\\r\\n     */\\r\\n    function rule(uint256 _disputeId)\\r\\n        external\\r\\n        returns (address subject, uint256 ruling)\\r\\n    {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n\\r\\n        if (dispute.state == State.DISPUTES_RULING_CHALLENGER) {\\r\\n            return (dispute.subject, DISPUTES_RULING_CHALLENGER);\\r\\n        } else if (dispute.state == State.DISPUTES_RULING_SUBMITTER) {\\r\\n            return (dispute.subject, DISPUTES_RULING_SUBMITTER);\\r\\n        } else if (dispute.state == State.DISPUTES_NOT_RULED) {\\r\\n            return (dispute.subject, DISPUTES_NOT_RULED);\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tell the dispute fees information to create a dispute\\r\\n     * @return recipient Address where the corresponding dispute fees must be transferred to\\r\\n     * @return feeToken ERC20 token used for the fees\\r\\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\\r\\n     */\\r\\n    function getDisputeFees()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            ERC20,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (address(this), feeToken, feeAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x511c5adc4e52585d2165d80216803525a96c17e1caa8603558658909cf24c445\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051604080610e898339810180604052604081101561003057600080fd5b81019080805190602001909291908051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001819055505050610da5806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637cb57c64116100715780637cb57c64146102a75780637e9adccf1461034a5780638da5cb5b14610378578063c13517e1146103c2578063db18af6c14610459578063e00dd161146104ce576100b4565b806313af4035146100b95780631da213f2146100fd578063564a565d14610138578063647846a5146101bb57806369e15404146102055780637b751b9e14610223575b600080fd5b6100fb600480360360208110156100cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ec565b005b6101366004803603604081101561011357600080fd5b8101908080359060200190929190803560ff1690602001909291905050506105f3565b005b6101646004803603602081101561014e57600080fd5b8101908080359060200190929190505050610844565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260048111156101a657fe5b60ff1681526020019250505060405180910390f35b6101c3610895565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020d6108ba565b6040518082815260200191505060405180910390f35b61022b6108c0565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610348600480360360608110156102bd57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561030457600080fd5b82018360208201111561031657600080fd5b8035906020019184600183028401116401000000008311171561033857600080fd5b90919293919293905050506108f6565b005b6103766004803603602081101561036057600080fd5b81019080803590602001909291905050506108fc565b005b6103806108ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610443600480360360408110156103d857600080fd5b8101908080359060200190929190803590602001906401000000008111156103ff57600080fd5b82018360208201111561041157600080fd5b8035906020019184600183028401116401000000008311171561043357600080fd5b9091929391929390505050610925565b6040518082815260200191505060405180910390f35b6104856004803603602081101561046f57600080fd5b8101908080359060200190929190505050610ac9565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6104d6610c0f565b6040518082815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b600060048111156106c357fe5b8160048111156106cf57fe5b141580156106f45750600160048111156106e557fe5b8160048111156106f157fe5b14155b610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552523a4f5554434f4d455f4e4f545f41535349474e41424c4500000000000081525060200191505060405180910390fd5b60006004600084815260200190815260200160002090506001600481111561078a57fe5b8160000160149054906101000a900460ff1660048111156107a757fe5b1461081a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4552523a4e4f545f44495350555445440000000000000000000000000000000081525060200191505060405180910390fd5b818160000160146101000a81548160ff0219169083600481111561083a57fe5b0217905550505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000806000306000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600154925092509250909192565b50505050565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600254905060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016001600481111561096157fe5b8152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360048111156109e257fe5b0217905550905050600260008154809291906001019190505550610a4c33306001546000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c15909392919063ffffffff16565b610abe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552523a4445504f5349545f4641494c4544000000000000000000000000000081525060200191505060405180910390fd5b809150509392505050565b600080600060046000858152602001908152602001600020905060036004811115610af057fe5b8160000160149054906101000a900460ff166004811115610b0d57fe5b1415610b44578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660039250925050610c0a565b600480811115610b5057fe5b8160000160149054906101000a900460ff166004811115610b6d57fe5b1415610ba4578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660049250925050610c0a565b60026004811115610bb157fe5b8160000160149054906101000a900460ff166004811115610bce57fe5b1415610c05578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660009250925050610c0a565b600080fd5b915091565b60025481565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610d1c8682610d27565b915050949350505050565b6000806040516020818551602087016000895af16000811115610d6d573d60008114610d5a5760208114610d6357610d6b565b60019350610d6b565b600183511493505b505b5050809150509291505056fea165627a7a7230582024ba3bfca91557b0788050b8a32baa06b2ab282acae29c13e5e404d361b01bac0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80637cb57c64116100715780637cb57c64146102a75780637e9adccf1461034a5780638da5cb5b14610378578063c13517e1146103c2578063db18af6c14610459578063e00dd161146104ce576100b4565b806313af4035146100b95780631da213f2146100fd578063564a565d14610138578063647846a5146101bb57806369e15404146102055780637b751b9e14610223575b600080fd5b6100fb600480360360208110156100cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ec565b005b6101366004803603604081101561011357600080fd5b8101908080359060200190929190803560ff1690602001909291905050506105f3565b005b6101646004803603602081101561014e57600080fd5b8101908080359060200190929190505050610844565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260048111156101a657fe5b60ff1681526020019250505060405180910390f35b6101c3610895565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61020d6108ba565b6040518082815260200191505060405180910390f35b61022b6108c0565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610348600480360360608110156102bd57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561030457600080fd5b82018360208201111561031657600080fd5b8035906020019184600183028401116401000000008311171561033857600080fd5b90919293919293905050506108f6565b005b6103766004803603602081101561036057600080fd5b81019080803590602001909291905050506108fc565b005b6103806108ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610443600480360360408110156103d857600080fd5b8101908080359060200190929190803590602001906401000000008111156103ff57600080fd5b82018360208201111561041157600080fd5b8035906020019184600183028401116401000000008311171561043357600080fd5b9091929391929390505050610925565b6040518082815260200191505060405180910390f35b6104856004803603602081101561046f57600080fd5b8101908080359060200190929190505050610ac9565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6104d6610c0f565b6040518082815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b600060048111156106c357fe5b8160048111156106cf57fe5b141580156106f45750600160048111156106e557fe5b8160048111156106f157fe5b14155b610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552523a4f5554434f4d455f4e4f545f41535349474e41424c4500000000000081525060200191505060405180910390fd5b60006004600084815260200190815260200160002090506001600481111561078a57fe5b8160000160149054906101000a900460ff1660048111156107a757fe5b1461081a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4552523a4e4f545f44495350555445440000000000000000000000000000000081525060200191505060405180910390fd5b818160000160146101000a81548160ff0219169083600481111561083a57fe5b0217905550505050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6000806000306000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600154925092509250909192565b50505050565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600254905060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016001600481111561096157fe5b8152506004600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360048111156109e257fe5b0217905550905050600260008154809291906001019190505550610a4c33306001546000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c15909392919063ffffffff16565b610abe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552523a4445504f5349545f4641494c4544000000000000000000000000000081525060200191505060405180910390fd5b809150509392505050565b600080600060046000858152602001908152602001600020905060036004811115610af057fe5b8160000160149054906101000a900460ff166004811115610b0d57fe5b1415610b44578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660039250925050610c0a565b600480811115610b5057fe5b8160000160149054906101000a900460ff166004811115610b6d57fe5b1415610ba4578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660049250925050610c0a565b60026004811115610bb157fe5b8160000160149054906101000a900460ff166004811115610bce57fe5b1415610c05578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660009250925050610c0a565b600080fd5b915091565b60025481565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610d1c8682610d27565b915050949350505050565b6000806040516020818551602087016000895af16000811115610d6d573d60008114610d5a5760208114610d6357610d6b565b60019350610d6b565b600183511493505b505b5050809150509291505056fea165627a7a7230582024ba3bfca91557b0788050b8a32baa06b2ab282acae29c13e5e404d361b01bac0029",
  "devdoc": {
    "methods": {
      "closeEvidencePeriod(uint256)": {
        "details": "Close the evidence period of a dispute\r",
        "params": {
          "_disputeId": "Identification number of the dispute to close its evidence submitting period\r"
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Create a dispute over the Arbitrable sender with a number of possible rulings\r",
        "params": {
          "_metadata": "Optional metadata that can be used to provide additional information on the dispute to be created\r",
          "_possibleRulings": "Number of possible rulings allowed for the dispute\r"
        },
        "return": "Dispute identification number\r"
      },
      "getDisputeFees()": {
        "details": "Tell the dispute fees information to create a dispute\r",
        "return": "recipient Address where the corresponding dispute fees must be transferred to\rfeeToken ERC20 token used for the fees\rfeeAmount Total amount of fees that must be allowed to the recipient\r"
      },
      "rule(uint256)": {
        "params": {
          "_disputeId": "Identification number of the dispute to be ruled\r"
        },
        "return": "subject Arbitrable instance associated to the dispute\rruling Ruling number computed for the given dispute\r"
      },
      "submitEvidence(uint256,address,bytes)": {
        "details": "Submit evidence for a dispute\r",
        "params": {
          "_disputeId": "Id of the dispute in the Protocol\r",
          "_evidence": "Data submitted for the evidence related to the dispute\r",
          "_submitter": "Address of the account submitting the evidence\r"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "rule(uint256)": {
        "notice": "Rule dispute #`_disputeId` if ready\r"
      }
    }
  }
}