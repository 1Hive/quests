{
  "address": "0xeec9bf3ff552d8ff43954669601f2f483ea45116",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "decideDispute",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "name": "subject",
          "type": "address"
        },
        {
          "name": "state",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeAmount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDisputeFees",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_submitter",
          "type": "address"
        },
        {
          "name": "_evidence",
          "type": "bytes"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "closeEvidencePeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_possibleRulings",
          "type": "uint256"
        },
        {
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [
        {
          "name": "subject",
          "type": "address"
        },
        {
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getDisputeManager",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_feeToken",
          "type": "address"
        },
        {
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "transactionHash": "0x891f2e6c18a13fc5fed337591fa5ed9265fe612116a71f2f490e1b9ad0e5f429",
  "receipt": {
    "to": null,
    "from": "0x91B0d67D3F47A30FBEeB159E67209Ad6cb2cE22E",
    "contractAddress": "0xe772723b98E58F4b6217DeB381AA164f2b5FB33c",
    "transactionIndex": 0,
    "gasUsed": "1166177",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xce624bd609f0b691a4d2038457b69a33651837ebbd31e5fd4fed9c969c7f6336",
    "transactionHash": "0x891f2e6c18a13fc5fed337591fa5ed9265fe612116a71f2f490e1b9ad0e5f429",
    "logs": [],
    "blockNumber": 10764212,
    "cumulativeGasUsed": "1166177",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x3050E20FAbE19f8576865811c9F28e85b96Fa4f9", "50000000000000000"],
  "solcInputHash": "e2fc09f2f93bdc1aa037d1457edd9cbe",
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"decideDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputeFees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_submitter\",\"type\":\"address\"},{\"name\":\"_evidence\",\"type\":\"bytes\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"closeEvidencePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_possibleRulings\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[{\"name\":\"subject\",\"type\":\"address\"},{\"name\":\"ruling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDisputeManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeToken\",\"type\":\"address\"},{\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{\"closeEvidencePeriod(uint256)\":{\"details\":\"Close the evidence period of a dispute\\r\",\"params\":{\"_disputeId\":\"Identification number of the dispute to close its evidence submitting period\\r\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Create a dispute over the Arbitrable sender with a number of possible rulings\\r\",\"params\":{\"_metadata\":\"Optional metadata that can be used to provide additional information on the dispute to be created\\r\",\"_possibleRulings\":\"Number of possible rulings allowed for the dispute\\r\"},\"return\":\"Dispute identification number\\r\"},\"getDisputeFees()\":{\"details\":\"Tell the dispute fees information to create a dispute\\r\",\"return\":\"recipient Address where the corresponding dispute fees must be transferred to\\rfeeToken ERC20 token used for the fees\\rfeeAmount Total amount of fees that must be allowed to the recipient\\r\"},\"rule(uint256)\":{\"params\":{\"_disputeId\":\"Identification number of the dispute to be ruled\\r\"},\"return\":\"subject Arbitrable instance associated to the dispute\\rruling Ruling number computed for the given dispute\\r\"},\"submitEvidence(uint256,address,bytes)\":{\"details\":\"Submit evidence for a dispute\\r\",\"params\":{\"_disputeId\":\"Id of the dispute in the Protocol\\r\",\"_evidence\":\"Data submitted for the evidence related to the dispute\\r\",\"_submitter\":\"Address of the account submitting the evidence\\r\"}}}},\"userdoc\":{\"methods\":{\"rule(uint256)\":{\"notice\":\"Rule dispute #`_disputeId` if ready\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/OwnableCelesteMock.sol\":\"OwnableCeleste\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/OwnableCelesteMock.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-01-07\\r\\n */\\r\\n\\r\\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\\r\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract GovernERC20 {\\r\\n    function totalSupply() public view returns (uint256);\\r\\n\\r\\n    function balanceOf(address _who) public view returns (uint256);\\r\\n\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function transfer(address _to, uint256 _value) public returns (bool);\\r\\n\\r\\n    function approve(address _spender, uint256 _value) public returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n// File: contracts/arbitration/IArbitrator.sol\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\ninterface IArbitrator {\\r\\n    /**\\r\\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\r\\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\\r\\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\r\\n     * @return Dispute identification number\\r\\n     */\\r\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Submit evidence for a dispute\\r\\n     * @param _disputeId Id of the dispute in the Protocol\\r\\n     * @param _submitter Address of the account submitting the evidence\\r\\n     * @param _evidence Data submitted for the evidence related to the dispute\\r\\n     */\\r\\n    function submitEvidence(\\r\\n        uint256 _disputeId,\\r\\n        address _submitter,\\r\\n        bytes calldata _evidence\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Close the evidence period of a dispute\\r\\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\\r\\n     */\\r\\n    function closeEvidencePeriod(uint256 _disputeId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rule dispute #`_disputeId` if ready\\r\\n     * @param _disputeId Identification number of the dispute to be ruled\\r\\n     * @return subject Arbitrable instance associated to the dispute\\r\\n     * @return ruling Ruling number computed for the given dispute\\r\\n     */\\r\\n    function rule(uint256 _disputeId)\\r\\n        external\\r\\n        returns (address subject, uint256 ruling);\\r\\n\\r\\n    /**\\r\\n     * @dev Tell the dispute fees information to create a dispute\\r\\n     * @return recipient Address where the corresponding dispute fees must be transferred to\\r\\n     * @return feeToken ERC20 token used for the fees\\r\\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\\r\\n     */\\r\\n    function getDisputeFees()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address recipient,\\r\\n            GovernERC20 feeToken,\\r\\n            uint256 feeAmount\\r\\n        );\\r\\n}\\r\\n\\r\\n// File: contracts/lib/os/SafeERC20.sol\\r\\n\\r\\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/SafeERC20.sol\\r\\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\nlibrary SafeGovernERC20 {\\r\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\r\\n    // https://github.com/ethereum/solidity/issues/3544\\r\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeTransfer(\\r\\n        GovernERC20 _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory transferCallData = abi.encodeWithSelector(\\r\\n            TRANSFER_SELECTOR,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        GovernERC20 _token,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\r\\n            _token.transferFrom.selector,\\r\\n            _from,\\r\\n            _to,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\r\\n     *      Note that this makes an external call to the token.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        GovernERC20 _token,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) internal returns (bool) {\\r\\n        bytes memory approveCallData = abi.encodeWithSelector(\\r\\n            _token.approve.selector,\\r\\n            _spender,\\r\\n            _amount\\r\\n        );\\r\\n        return invokeAndCheckSuccess(address(_token), approveCallData);\\r\\n    }\\r\\n\\r\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\r\\n        private\\r\\n        returns (bool)\\r\\n    {\\r\\n        bool ret;\\r\\n        assembly {\\r\\n            let ptr := mload(0x40) // free memory pointer\\r\\n\\r\\n            let success := call(\\r\\n                gas, // forward all gas\\r\\n                _addr, // address\\r\\n                0, // no value\\r\\n                add(_calldata, 0x20), // calldata start\\r\\n                mload(_calldata), // calldata length\\r\\n                ptr, // write output over free memory\\r\\n                0x20 // uint256 return\\r\\n            )\\r\\n\\r\\n            if gt(success, 0) {\\r\\n                // Check number of bytes returned from last function call\\r\\n                switch returndatasize\\r\\n                // No bytes returned: assume success\\r\\n                case 0 {\\r\\n                    ret := 1\\r\\n                }\\r\\n                // 32 bytes returned: check if non-zero\\r\\n                case 0x20 {\\r\\n                    // Only return success if returned data was true\\r\\n                    // Already have output in ptr\\r\\n                    ret := eq(mload(ptr), 1)\\r\\n                }\\r\\n                // Not sure what was returned: don't mark as success\\r\\n                default {\\r\\n\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts/ownable-celeste/OwnableCeleste.sol\\r\\n\\r\\npragma solidity ^0.5.8;\\r\\n\\r\\ncontract OwnableCeleste is IArbitrator {\\r\\n    using SafeGovernERC20 for GovernERC20;\\r\\n\\r\\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\\r\\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \\\"missing\\\", \\\"leaked\\\", and \\\"refused\\\", respectively.\\r\\n    // This Arbitrable introduces the concept of the challenger/submitter (a binary outcome) as 3/4.\\r\\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the challenger.\\r\\n    uint256 private constant DISPUTES_NOT_RULED = 0;\\r\\n    uint256 private constant DISPUTES_RULING_CHALLENGER = 3;\\r\\n    uint256 private constant DISPUTES_RULING_SUBMITTER = 4;\\r\\n    address private disputeManager;\\r\\n\\r\\n    enum State {\\r\\n        NOT_DISPUTED,\\r\\n        DISPUTED,\\r\\n        DISPUTES_NOT_RULED,\\r\\n        DISPUTES_RULING_CHALLENGER,\\r\\n        DISPUTES_RULING_SUBMITTER\\r\\n    }\\r\\n\\r\\n    struct Dispute {\\r\\n        address subject;\\r\\n        State state;\\r\\n    }\\r\\n\\r\\n    GovernERC20 public feeToken;\\r\\n    uint256 public feeAmount;\\r\\n    uint256 public currentId;\\r\\n    address public owner;\\r\\n    mapping(uint256 => Dispute) public disputes;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"ERR:NOT_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(GovernERC20 _feeToken, uint256 _feeAmount) public {\\r\\n        owner = msg.sender;\\r\\n        feeToken = _feeToken;\\r\\n        feeAmount = _feeAmount;\\r\\n        disputeManager = address(new DisputeManager(address(this)));\\r\\n    }\\r\\n\\r\\n    function getDisputeManager() external view returns (address) {\\r\\n        return disputeManager;\\r\\n    }\\r\\n\\r\\n    function setOwner(address _owner) public onlyOwner {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\\r\\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\\r\\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\\r\\n     * @return Dispute identification number\\r\\n     */\\r\\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\\r\\n        external\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 disputeId = currentId;\\r\\n        disputes[disputeId] = Dispute(msg.sender, State.DISPUTED);\\r\\n        currentId++;\\r\\n\\r\\n        require(\\r\\n            feeToken.safeTransferFrom(msg.sender, address(this), feeAmount),\\r\\n            \\\"ERR:DEPOSIT_FAILED\\\"\\r\\n        );\\r\\n        return disputeId;\\r\\n    }\\r\\n\\r\\n    function decideDispute(uint256 _disputeId, State _state)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _state != State.NOT_DISPUTED && _state != State.DISPUTED,\\r\\n            \\\"ERR:OUTCOME_NOT_ASSIGNABLE\\\"\\r\\n        );\\r\\n\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n        require(dispute.state == State.DISPUTED, \\\"ERR:NOT_DISPUTED\\\");\\r\\n\\r\\n        dispute.state = _state;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Submit evidence for a dispute\\r\\n     * @param _disputeId Id of the dispute in the Protocol\\r\\n     * @param _submitter Address of the account submitting the evidence\\r\\n     * @param _evidence Data submitted for the evidence related to the dispute\\r\\n     */\\r\\n    function submitEvidence(\\r\\n        uint256 _disputeId,\\r\\n        address _submitter,\\r\\n        bytes calldata _evidence\\r\\n    ) external {}\\r\\n\\r\\n    /**\\r\\n     * @dev Close the evidence period of a dispute\\r\\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\\r\\n     */\\r\\n    function closeEvidencePeriod(uint256 _disputeId) external {}\\r\\n\\r\\n    /**\\r\\n     * @notice Rule dispute #`_disputeId` if ready\\r\\n     * @param _disputeId Identification number of the dispute to be ruled\\r\\n     * @return subject Arbitrable instance associated to the dispute\\r\\n     * @return ruling Ruling number computed for the given dispute\\r\\n     */\\r\\n    function rule(uint256 _disputeId)\\r\\n        external\\r\\n        returns (address subject, uint256 ruling)\\r\\n    {\\r\\n        Dispute storage dispute = disputes[_disputeId];\\r\\n\\r\\n        if (dispute.state == State.DISPUTES_RULING_CHALLENGER) {\\r\\n            return (dispute.subject, DISPUTES_RULING_CHALLENGER);\\r\\n        } else if (dispute.state == State.DISPUTES_RULING_SUBMITTER) {\\r\\n            return (dispute.subject, DISPUTES_RULING_SUBMITTER);\\r\\n        } else if (dispute.state == State.DISPUTES_NOT_RULED) {\\r\\n            return (dispute.subject, DISPUTES_NOT_RULED);\\r\\n        } else {\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tell the dispute fees information to create a dispute\\r\\n     * @return recipient Address where the corresponding dispute fees must be transferred to\\r\\n     * @return feeToken ERC20 token used for the fees\\r\\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\\r\\n     */\\r\\n    function getDisputeFees()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            GovernERC20,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (address(this), feeToken, feeAmount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DisputeManager {\\r\\n    using SafeGovernERC20 for GovernERC20;\\r\\n\\r\\n    OwnableCeleste celeste;\\r\\n\\r\\n    constructor(address mockCelesteAddress) public {\\r\\n        celeste = OwnableCeleste(mockCelesteAddress);\\r\\n    }\\r\\n\\r\\n    function getDisputeFees() external view returns (GovernERC20, uint256) {\\r\\n        (address celeste, GovernERC20 feeToken, uint256 feeAmount) = celeste\\r\\n            .getDisputeFees();\\r\\n        return (feeToken, feeAmount);\\r\\n    }\\r\\n\\r\\n    function getDispute(uint256 _disputeId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address subject,\\r\\n            uint8 possibleRulings,\\r\\n            OwnableCeleste.State state,\\r\\n            uint8 finalRuling,\\r\\n            uint256 lastRoundId,\\r\\n            uint64 createTermId\\r\\n        )\\r\\n    {\\r\\n        (address subject, OwnableCeleste.State state) = celeste.disputes(\\r\\n            _disputeId\\r\\n        );\\r\\n        return (subject, 0, state, 0, 0, 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x36c16a7c7759ec434374979c79afa21d5dcbdaa3f415dbd4b3f9036756f18a99\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516040806113978339810180604052604081101561003057600080fd5b81019080805190602001909291908051906020019092919050505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600281905550306040516100e19061017a565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f080158015610133573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610187565b6103cb80610fcc83390190565b610e36806101966000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637cb57c641161008c578063c13517e111610066578063c13517e1146103dd578063db18af6c14610474578063db9bee46146104e9578063e00dd16114610533576100cf565b80637cb57c64146102c25780637e9adccf146103655780638da5cb5b14610393576100cf565b806313af4035146100d45780631da213f214610118578063564a565d14610153578063647846a5146101d657806369e15404146102205780637b751b9e1461023e575b600080fd5b610116600480360360208110156100ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610551565b005b6101516004803603604081101561012e57600080fd5b8101908080359060200190929190803560ff169060200190929190505050610658565b005b61017f6004803603602081101561016957600080fd5b81019080803590602001909291905050506108a9565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260048111156101c157fe5b60ff1681526020019250505060405180910390f35b6101de6108fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610228610920565b6040518082815260200191505060405180910390f35b610246610926565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610363600480360360608110156102d857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561031f57600080fd5b82018360208201111561033157600080fd5b8035906020019184600183028401116401000000008311171561035357600080fd5b909192939192939050505061095d565b005b6103916004803603602081101561037b57600080fd5b8101908080359060200190929190505050610963565b005b61039b610966565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61045e600480360360408110156103f357600080fd5b81019080803590602001909291908035906020019064010000000081111561041a57600080fd5b82018360208201111561042c57600080fd5b8035906020019184600183028401116401000000008311171561044e57600080fd5b909192939192939050505061098c565b6040518082815260200191505060405180910390f35b6104a06004803603602081101561048a57600080fd5b8101908080359060200190929190505050610b31565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6104f1610c77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61053b610ca0565b6040518082815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600481111561072857fe5b81600481111561073457fe5b1415801561075957506001600481111561074a57fe5b81600481111561075657fe5b14155b6107cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552523a4f5554434f4d455f4e4f545f41535349474e41424c4500000000000081525060200191505060405180910390fd5b6000600560008481526020019081526020016000209050600160048111156107ef57fe5b8160000160149054906101000a900460ff16600481111561080c57fe5b1461087f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4552523a4e4f545f44495350555445440000000000000000000000000000000081525060200191505060405180910390fd5b818160000160146101000a81548160ff0219169083600481111561089f57fe5b0217905550505050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600080600030600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600254925092509250909192565b50505050565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600354905060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600160048111156109c857fe5b8152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836004811115610a4957fe5b0217905550905050600360008154809291906001019190505550610ab43330600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ca6909392919063ffffffff16565b610b26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552523a4445504f5349545f4641494c4544000000000000000000000000000081525060200191505060405180910390fd5b809150509392505050565b600080600060056000858152602001908152602001600020905060036004811115610b5857fe5b8160000160149054906101000a900460ff166004811115610b7557fe5b1415610bac578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660039250925050610c72565b600480811115610bb857fe5b8160000160149054906101000a900460ff166004811115610bd557fe5b1415610c0c578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660049250925050610c72565b60026004811115610c1957fe5b8160000160149054906101000a900460ff166004811115610c3657fe5b1415610c6d578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660009250925050610c72565b600080fd5b915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610dad8682610db8565b915050949350505050565b6000806040516020818551602087016000895af16000811115610dfe573d60008114610deb5760208114610df457610dfc565b60019350610dfc565b600183511493505b505b5050809150509291505056fea165627a7a72305820f2d223fcb3efcfc8d91b9122ffd4a2fa3bbdd3351cccee0c9b8eb3fd973ecf8f0029608060405234801561001057600080fd5b506040516020806103cb8339810180604052602081101561003057600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061033a806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637b751b9e1461003b578063e3a96cbd1461008c575b600080fd5b61004361014b565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6100b8600480360360208110156100a257600080fd5b810190808035906020019092919050505061021c565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018660ff1660ff16815260200185600481111561010657fe5b60ff1681526020018460ff1660ff1681526020018381526020018267ffffffffffffffff1667ffffffffffffffff168152602001965050505050505060405180910390f35b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b751b9e6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101ba57600080fd5b505afa1580156101ce573d6000803e3d6000fd5b505050506040513d60608110156101e457600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050509250925092508181945094505050509091565b6000806000806000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663564a565d8a6040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b15801561029957600080fd5b505afa1580156102ad573d6000803e3d6000fd5b505050506040513d60408110156102c357600080fd5b8101908080519060200190929190805190602001909291905050509150915081600082600080600084945082925081915080905097509750975097509750975050509193955091939556fea165627a7a72305820565a683f33015a30b0ddaff15ba6311e738bf29ed720ecf89f34641d3b42d5120029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637cb57c641161008c578063c13517e111610066578063c13517e1146103dd578063db18af6c14610474578063db9bee46146104e9578063e00dd16114610533576100cf565b80637cb57c64146102c25780637e9adccf146103655780638da5cb5b14610393576100cf565b806313af4035146100d45780631da213f214610118578063564a565d14610153578063647846a5146101d657806369e15404146102205780637b751b9e1461023e575b600080fd5b610116600480360360208110156100ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610551565b005b6101516004803603604081101561012e57600080fd5b8101908080359060200190929190803560ff169060200190929190505050610658565b005b61017f6004803603602081101561016957600080fd5b81019080803590602001909291905050506108a9565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260048111156101c157fe5b60ff1681526020019250505060405180910390f35b6101de6108fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610228610920565b6040518082815260200191505060405180910390f35b610246610926565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390f35b610363600480360360608110156102d857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561031f57600080fd5b82018360208201111561033157600080fd5b8035906020019184600183028401116401000000008311171561035357600080fd5b909192939192939050505061095d565b005b6103916004803603602081101561037b57600080fd5b8101908080359060200190929190505050610963565b005b61039b610966565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61045e600480360360408110156103f357600080fd5b81019080803590602001909291908035906020019064010000000081111561041a57600080fd5b82018360208201111561042c57600080fd5b8035906020019184600183028401116401000000008311171561044e57600080fd5b909192939192939050505061098c565b6040518082815260200191505060405180910390f35b6104a06004803603602081101561048a57600080fd5b8101908080359060200190929190505050610b31565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b6104f1610c77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61053b610ca0565b6040518082815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4552523a4e4f545f4f574e45520000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600481111561072857fe5b81600481111561073457fe5b1415801561075957506001600481111561074a57fe5b81600481111561075657fe5b14155b6107cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4552523a4f5554434f4d455f4e4f545f41535349474e41424c4500000000000081525060200191505060405180910390fd5b6000600560008481526020019081526020016000209050600160048111156107ef57fe5b8160000160149054906101000a900460ff16600481111561080c57fe5b1461087f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4552523a4e4f545f44495350555445440000000000000000000000000000000081525060200191505060405180910390fd5b818160000160146101000a81548160ff0219169083600481111561089f57fe5b0217905550505050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600080600030600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600254925092509250909192565b50505050565b50565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600354905060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600160048111156109c857fe5b8152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836004811115610a4957fe5b0217905550905050600360008154809291906001019190505550610ab43330600254600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610ca6909392919063ffffffff16565b610b26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4552523a4445504f5349545f4641494c4544000000000000000000000000000081525060200191505060405180910390fd5b809150509392505050565b600080600060056000858152602001908152602001600020905060036004811115610b5857fe5b8160000160149054906101000a900460ff166004811115610b7557fe5b1415610bac578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660039250925050610c72565b600480811115610bb857fe5b8160000160149054906101000a900460ff166004811115610bd557fe5b1415610c0c578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660049250925050610c72565b60026004811115610c1957fe5b8160000160149054906101000a900460ff166004811115610c3657fe5b1415610c6d578060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660009250925050610c72565b600080fd5b915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b600060608573ffffffffffffffffffffffffffffffffffffffff166323b872dd905060e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610dad8682610db8565b915050949350505050565b6000806040516020818551602087016000895af16000811115610dfe573d60008114610deb5760208114610df457610dfc565b60019350610dfc565b600183511493505b505b5050809150509291505056fea165627a7a72305820f2d223fcb3efcfc8d91b9122ffd4a2fa3bbdd3351cccee0c9b8eb3fd973ecf8f0029",
  "devdoc": {
    "methods": {
      "closeEvidencePeriod(uint256)": {
        "details": "Close the evidence period of a dispute\r",
        "params": {
          "_disputeId": "Identification number of the dispute to close its evidence submitting period\r"
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Create a dispute over the Arbitrable sender with a number of possible rulings\r",
        "params": {
          "_metadata": "Optional metadata that can be used to provide additional information on the dispute to be created\r",
          "_possibleRulings": "Number of possible rulings allowed for the dispute\r"
        },
        "return": "Dispute identification number\r"
      },
      "getDisputeFees()": {
        "details": "Tell the dispute fees information to create a dispute\r",
        "return": "recipient Address where the corresponding dispute fees must be transferred to\rfeeToken ERC20 token used for the fees\rfeeAmount Total amount of fees that must be allowed to the recipient\r"
      },
      "rule(uint256)": {
        "params": {
          "_disputeId": "Identification number of the dispute to be ruled\r"
        },
        "return": "subject Arbitrable instance associated to the dispute\rruling Ruling number computed for the given dispute\r"
      },
      "submitEvidence(uint256,address,bytes)": {
        "details": "Submit evidence for a dispute\r",
        "params": {
          "_disputeId": "Id of the dispute in the Protocol\r",
          "_evidence": "Data submitted for the evidence related to the dispute\r",
          "_submitter": "Address of the account submitting the evidence\r"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "rule(uint256)": {
        "notice": "Rule dispute #`_disputeId` if ready\r"
      }
    }
  }
}
