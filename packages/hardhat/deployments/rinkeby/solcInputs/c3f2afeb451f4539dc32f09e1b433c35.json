{
  "language": "Solidity",
  "sources": {
    "contracts/mocks/OwnableCelesteMock.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2022-01-07\r\n */\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/lib/token/ERC20.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract GovernERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _who) public view returns (uint256);\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/arbitration/IArbitrator.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\ninterface IArbitrator {\r\n    /**\r\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\r\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\r\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\r\n     * @return Dispute identification number\r\n     */\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\r\n        external\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Submit evidence for a dispute\r\n     * @param _disputeId Id of the dispute in the Protocol\r\n     * @param _submitter Address of the account submitting the evidence\r\n     * @param _evidence Data submitted for the evidence related to the dispute\r\n     */\r\n    function submitEvidence(\r\n        uint256 _disputeId,\r\n        address _submitter,\r\n        bytes calldata _evidence\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Close the evidence period of a dispute\r\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\r\n     */\r\n    function closeEvidencePeriod(uint256 _disputeId) external;\r\n\r\n    /**\r\n     * @notice Rule dispute #`_disputeId` if ready\r\n     * @param _disputeId Identification number of the dispute to be ruled\r\n     * @return subject Arbitrable instance associated to the dispute\r\n     * @return ruling Ruling number computed for the given dispute\r\n     */\r\n    function rule(uint256 _disputeId)\r\n        external\r\n        returns (address subject, uint256 ruling);\r\n\r\n    /**\r\n     * @dev Tell the dispute fees information to create a dispute\r\n     * @return recipient Address where the corresponding dispute fees must be transferred to\r\n     * @return feeToken ERC20 token used for the fees\r\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n     */\r\n    function getDisputeFees()\r\n        external\r\n        view\r\n        returns (\r\n            address recipient,\r\n            GovernERC20 feeToken,\r\n            uint256 feeAmount\r\n        );\r\n}\r\n\r\n// File: contracts/lib/os/SafeERC20.sol\r\n\r\n// Brought from https://github.com/aragon/aragonOS/blob/v4.3.0/contracts/common/SafeERC20.sol\r\n// Adapted to use pragma ^0.5.8 and satisfy our linter rules\r\n\r\npragma solidity ^0.5.8;\r\n\r\nlibrary SafeGovernERC20 {\r\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\r\n    // https://github.com/ethereum/solidity/issues/3544\r\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\r\n\r\n    /**\r\n     * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\r\n     *      Note that this makes an external call to the token.\r\n     */\r\n    function safeTransfer(\r\n        GovernERC20 _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        bytes memory transferCallData = abi.encodeWithSelector(\r\n            TRANSFER_SELECTOR,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), transferCallData);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\r\n     *      Note that this makes an external call to the token.\r\n     */\r\n    function safeTransferFrom(\r\n        GovernERC20 _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        bytes memory transferFromCallData = abi.encodeWithSelector(\r\n            _token.transferFrom.selector,\r\n            _from,\r\n            _to,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), transferFromCallData);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\r\n     *      Note that this makes an external call to the token.\r\n     */\r\n    function safeApprove(\r\n        GovernERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        bytes memory approveCallData = abi.encodeWithSelector(\r\n            _token.approve.selector,\r\n            _spender,\r\n            _amount\r\n        );\r\n        return invokeAndCheckSuccess(address(_token), approveCallData);\r\n    }\r\n\r\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\r\n        private\r\n        returns (bool)\r\n    {\r\n        bool ret;\r\n        assembly {\r\n            let ptr := mload(0x40) // free memory pointer\r\n\r\n            let success := call(\r\n                gas, // forward all gas\r\n                _addr, // address\r\n                0, // no value\r\n                add(_calldata, 0x20), // calldata start\r\n                mload(_calldata), // calldata length\r\n                ptr, // write output over free memory\r\n                0x20 // uint256 return\r\n            )\r\n\r\n            if gt(success, 0) {\r\n                // Check number of bytes returned from last function call\r\n                switch returndatasize\r\n                // No bytes returned: assume success\r\n                case 0 {\r\n                    ret := 1\r\n                }\r\n                // 32 bytes returned: check if non-zero\r\n                case 0x20 {\r\n                    // Only return success if returned data was true\r\n                    // Already have output in ptr\r\n                    ret := eq(mload(ptr), 1)\r\n                }\r\n                // Not sure what was returned: don't mark as success\r\n                default {\r\n\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n// File: contracts/ownable-celeste/OwnableCeleste.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\ncontract OwnableCeleste is IArbitrator {\r\n    using SafeGovernERC20 for GovernERC20;\r\n\r\n    // Note that Aragon Court treats the possible outcomes as arbitrary numbers, leaving the Arbitrable (us) to define how to understand them.\r\n    // Some outcomes [0, 1, and 2] are reserved by Aragon Court: \"missing\", \"leaked\", and \"refused\", respectively.\r\n    // This Arbitrable introduces the concept of the challenger/submitter (a binary outcome) as 3/4.\r\n    // Note that Aragon Court emits the lowest outcome in the event of a tie, and so for us, we prefer the challenger.\r\n    uint256 private constant DISPUTES_NOT_RULED = 0;\r\n    uint256 private constant DISPUTES_RULING_CHALLENGER = 3;\r\n    uint256 private constant DISPUTES_RULING_SUBMITTER = 4;\r\n\r\n    enum State {\r\n        NOT_DISPUTED,\r\n        DISPUTED,\r\n        DISPUTES_NOT_RULED,\r\n        DISPUTES_RULING_CHALLENGER,\r\n        DISPUTES_RULING_SUBMITTER\r\n    }\r\n\r\n    struct Dispute {\r\n        address subject;\r\n        State state;\r\n    }\r\n\r\n    GovernERC20 public feeToken;\r\n    uint256 public feeAmount;\r\n    uint256 public currentId;\r\n    address public owner;\r\n    mapping(uint256 => Dispute) public disputes;\r\n    address disputeManager;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"ERR:NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    constructor(GovernERC20 _feeToken, uint256 _feeAmount) public {\r\n        owner = msg.sender;\r\n        feeToken = _feeToken;\r\n        feeAmount = _feeAmount;\r\n        disputeManager = address(new DisputeManager(address(this)));\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a dispute over the Arbitrable sender with a number of possible rulings\r\n     * @param _possibleRulings Number of possible rulings allowed for the dispute\r\n     * @param _metadata Optional metadata that can be used to provide additional information on the dispute to be created\r\n     * @return Dispute identification number\r\n     */\r\n    function createDispute(uint256 _possibleRulings, bytes calldata _metadata)\r\n        external\r\n        returns (uint256)\r\n    {\r\n        uint256 disputeId = currentId;\r\n        disputes[disputeId] = Dispute(msg.sender, State.DISPUTED);\r\n        currentId++;\r\n\r\n        require(\r\n            feeToken.safeTransferFrom(msg.sender, address(this), feeAmount),\r\n            \"ERR:DEPOSIT_FAILED\"\r\n        );\r\n        return disputeId;\r\n    }\r\n\r\n    function decideDispute(uint256 _disputeId, State _state)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _state != State.NOT_DISPUTED && _state != State.DISPUTED,\r\n            \"ERR:OUTCOME_NOT_ASSIGNABLE\"\r\n        );\r\n\r\n        Dispute storage dispute = disputes[_disputeId];\r\n        require(dispute.state == State.DISPUTED, \"ERR:NOT_DISPUTED\");\r\n\r\n        dispute.state = _state;\r\n    }\r\n\r\n    /**\r\n     * @dev Submit evidence for a dispute\r\n     * @param _disputeId Id of the dispute in the Protocol\r\n     * @param _submitter Address of the account submitting the evidence\r\n     * @param _evidence Data submitted for the evidence related to the dispute\r\n     */\r\n    function submitEvidence(\r\n        uint256 _disputeId,\r\n        address _submitter,\r\n        bytes calldata _evidence\r\n    ) external {}\r\n\r\n    /**\r\n     * @dev Close the evidence period of a dispute\r\n     * @param _disputeId Identification number of the dispute to close its evidence submitting period\r\n     */\r\n    function closeEvidencePeriod(uint256 _disputeId) external {}\r\n\r\n    /**\r\n     * @notice Rule dispute #`_disputeId` if ready\r\n     * @param _disputeId Identification number of the dispute to be ruled\r\n     * @return subject Arbitrable instance associated to the dispute\r\n     * @return ruling Ruling number computed for the given dispute\r\n     */\r\n    function rule(uint256 _disputeId)\r\n        external\r\n        returns (address subject, uint256 ruling)\r\n    {\r\n        Dispute storage dispute = disputes[_disputeId];\r\n\r\n        if (dispute.state == State.DISPUTES_RULING_CHALLENGER) {\r\n            return (dispute.subject, DISPUTES_RULING_CHALLENGER);\r\n        } else if (dispute.state == State.DISPUTES_RULING_SUBMITTER) {\r\n            return (dispute.subject, DISPUTES_RULING_SUBMITTER);\r\n        } else if (dispute.state == State.DISPUTES_NOT_RULED) {\r\n            return (dispute.subject, DISPUTES_NOT_RULED);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tell the dispute fees information to create a dispute\r\n     * @return recipient Address where the corresponding dispute fees must be transferred to\r\n     * @return feeToken ERC20 token used for the fees\r\n     * @return feeAmount Total amount of fees that must be allowed to the recipient\r\n     */\r\n    function getDisputeFees()\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            GovernERC20,\r\n            uint256\r\n        )\r\n    {\r\n        return (address(this), feeToken, feeAmount);\r\n    }\r\n}\r\n\r\ncontract DisputeManager {\r\n    using SafeGovernERC20 for GovernERC20;\r\n\r\n    OwnableCeleste celeste;\r\n\r\n    uint256 private constant DISPUTES_NOT_RULED = 0;\r\n    uint256 private constant DISPUTES_RULING_CHALLENGER = 3;\r\n    uint256 private constant DISPUTES_RULING_SUBMITTER = 4;\r\n\r\n    enum State {\r\n        NOT_DISPUTED,\r\n        DISPUTED,\r\n        DISPUTES_NOT_RULED,\r\n        DISPUTES_RULING_CHALLENGER,\r\n        DISPUTES_RULING_SUBMITTER\r\n    }\r\n\r\n    constructor(address mockCelesteAddress) public {\r\n        celeste = OwnableCeleste(mockCelesteAddress);\r\n    }\r\n\r\n    function getDisputeFees() external view returns (GovernERC20, uint256) {\r\n        (address celeste, GovernERC20 feeToken, uint256 feeAmount) = celeste\r\n            .getDisputeFees();\r\n        return (feeToken, feeAmount);\r\n    }\r\n\r\n    function getDispute(uint256 _disputeId)\r\n        external\r\n        view\r\n        returns (\r\n            address subject,\r\n            uint8 possibleRulings,\r\n            OwnableCeleste.State state,\r\n            uint8 finalRuling,\r\n            uint256 lastRoundId,\r\n            uint64 createTermId\r\n        )\r\n    {\r\n        (address subject, OwnableCeleste.State state) = celeste.disputes(\r\n            _disputeId\r\n        );\r\n        return (subject, 0, state, 0, 0, 0);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}