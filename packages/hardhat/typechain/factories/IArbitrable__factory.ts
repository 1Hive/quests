/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { IArbitrable } from "../IArbitrable";

export class IArbitrable__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<IArbitrable> {
    return super.deploy(overrides || {}) as Promise<IArbitrable>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IArbitrable {
    return super.attach(address) as IArbitrable;
  }
  connect(signer: Signer): IArbitrable__factory {
    return super.connect(signer) as IArbitrable__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IArbitrable {
    return new Contract(address, _abi, signerOrProvider) as IArbitrable;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "arbitrator",
        type: "address",
      },
      {
        indexed: true,
        name: "disputeId",
        type: "uint256",
      },
      {
        indexed: false,
        name: "ruling",
        type: "uint256",
      },
    ],
    name: "Ruled",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a72305820f0b6cd0156f229ec2003686eacff612db24067d37989778c39a1b2c9dff6a67d0029";
