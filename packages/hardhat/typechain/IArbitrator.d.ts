/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IArbitratorInterface extends ethers.utils.Interface {
  functions: {
    "getDisputeFees()": FunctionFragment;
    "submitEvidence(uint256,address,bytes)": FunctionFragment;
    "closeEvidencePeriod(uint256)": FunctionFragment;
    "createDispute(uint256,bytes)": FunctionFragment;
    "rule(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDisputeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeEvidencePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "rule", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "getDisputeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeEvidencePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;

  events: {};
}

export class IArbitrator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IArbitratorInterface;

  functions: {
    getDisputeFees(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        recipient: string;
        feeToken: string;
        feeAmount: BigNumber;
      }
    >;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        recipient: string;
        feeToken: string;
        feeAmount: BigNumber;
      }
    >;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeEvidencePeriod(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeEvidencePeriod(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rule(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getDisputeFees(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      recipient: string;
      feeToken: string;
      feeAmount: BigNumber;
    }
  >;

  "getDisputeFees()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      recipient: string;
      feeToken: string;
      feeAmount: BigNumber;
    }
  >;

  submitEvidence(
    _disputeId: BigNumberish,
    _submitter: string,
    _evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitEvidence(uint256,address,bytes)"(
    _disputeId: BigNumberish,
    _submitter: string,
    _evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeEvidencePeriod(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeEvidencePeriod(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDispute(
    _possibleRulings: BigNumberish,
    _metadata: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDispute(uint256,bytes)"(
    _possibleRulings: BigNumberish,
    _metadata: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rule(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rule(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getDisputeFees(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        recipient: string;
        feeToken: string;
        feeAmount: BigNumber;
      }
    >;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        recipient: string;
        feeToken: string;
        feeAmount: BigNumber;
      }
    >;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    closeEvidencePeriod(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeEvidencePeriod(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rule(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { subject: string; ruling: BigNumber }>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { subject: string; ruling: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    getDisputeFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeEvidencePeriod(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeEvidencePeriod(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rule(_disputeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDisputeFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeEvidencePeriod(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeEvidencePeriod(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
