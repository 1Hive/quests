/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OwnableCelesteInterface extends ethers.utils.Interface {
  functions: {
    "setOwner(address)": FunctionFragment;
    "decideDispute(uint256,uint8)": FunctionFragment;
    "disputes(uint256)": FunctionFragment;
    "feeToken()": FunctionFragment;
    "feeAmount()": FunctionFragment;
    "draft(uint256)": FunctionFragment;
    "getDisputeFees()": FunctionFragment;
    "submitEvidence(uint256,address,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "heartbeat(uint64)": FunctionFragment;
    "computeRuling(uint256)": FunctionFragment;
    "createDispute(uint256,bytes)": FunctionFragment;
    "closeEvidencePeriod(address,uint256)": FunctionFragment;
    "rule(uint256)": FunctionFragment;
    "getDisputeManager()": FunctionFragment;
    "currentId()": FunctionFragment;
    "delayStartTime(uint64)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decideDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disputes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "draft", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getDisputeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitEvidence",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRuling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDispute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeEvidencePeriod",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rule", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getDisputeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "currentId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delayStartTime",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decideDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disputes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "draft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEvidence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeRuling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeEvidencePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delayStartTime",
    data: BytesLike
  ): Result;

  events: {
    "Heartbeat(uint64,uint64)": EventFragment;
    "StartTimeDelayed(uint64,uint64)": EventFragment;
    "DisputeStateChanged(uint256,uint8)": EventFragment;
    "EvidenceSubmitted(uint256,address,bytes)": EventFragment;
    "EvidencePeriodClosed(uint256,uint64)": EventFragment;
    "NewDispute(uint256,address,uint64,uint64,bytes)": EventFragment;
    "JurorDrafted(uint256,uint256,address)": EventFragment;
    "RulingAppealed(uint256,uint256,uint8)": EventFragment;
    "RulingAppealConfirmed(uint256,uint256,uint64,uint256)": EventFragment;
    "RulingComputed(uint256,uint8)": EventFragment;
    "PenaltiesSettled(uint256,uint256,uint256)": EventFragment;
    "RewardSettled(uint256,uint256,address,uint256,uint256)": EventFragment;
    "AppealDepositSettled(uint256,uint256)": EventFragment;
    "MaxJurorsPerDraftBatchChanged(uint64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Heartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartTimeDelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidenceSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvidencePeriodClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JurorDrafted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulingAppealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulingAppealConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulingComputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PenaltiesSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppealDepositSettled"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxJurorsPerDraftBatchChanged"
  ): EventFragment;
}

export class OwnableCeleste extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OwnableCelesteInterface;

  functions: {
    setOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decideDispute(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decideDispute(uint256,uint8)"(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disputes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; state: number }>;

    "disputes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; state: number }>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    "feeToken()"(overrides?: CallOverrides): Promise<[string]>;

    feeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    draft(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "draft(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDisputeFees(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    heartbeat(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "heartbeat(uint64)"(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    computeRuling(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "computeRuling(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    closeEvidencePeriod(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closeEvidencePeriod(address,uint256)"(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rule(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDisputeManager(overrides?: CallOverrides): Promise<[string]>;

    "getDisputeManager()"(overrides?: CallOverrides): Promise<[string]>;

    currentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayStartTime(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delayStartTime(uint64)"(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  setOwner(_owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setOwner(address)"(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decideDispute(
    _disputeId: BigNumberish,
    _state: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decideDispute(uint256,uint8)"(
    _disputeId: BigNumberish,
    _state: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disputes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { subject: string; state: number }>;

  "disputes(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number] & { subject: string; state: number }>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  "feeToken()"(overrides?: CallOverrides): Promise<string>;

  feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "feeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  draft(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "draft(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDisputeFees(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  "getDisputeFees()"(
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  submitEvidence(
    _disputeId: BigNumberish,
    _submitter: string,
    _evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitEvidence(uint256,address,bytes)"(
    _disputeId: BigNumberish,
    _submitter: string,
    _evidence: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  heartbeat(
    _maxRequestedTransitions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "heartbeat(uint64)"(
    _maxRequestedTransitions: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  computeRuling(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "computeRuling(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createDispute(
    _possibleRulings: BigNumberish,
    _metadata: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDispute(uint256,bytes)"(
    _possibleRulings: BigNumberish,
    _metadata: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  closeEvidencePeriod(
    _subject: string,
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closeEvidencePeriod(address,uint256)"(
    _subject: string,
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rule(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rule(uint256)"(
    _disputeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDisputeManager(overrides?: CallOverrides): Promise<string>;

  "getDisputeManager()"(overrides?: CallOverrides): Promise<string>;

  currentId(overrides?: CallOverrides): Promise<BigNumber>;

  "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

  delayStartTime(
    _newFirstTermStartTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delayStartTime(uint64)"(
    _newFirstTermStartTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decideDispute(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decideDispute(uint256,uint8)"(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disputes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; state: number }>;

    "disputes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; state: number }>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    "feeToken()"(overrides?: CallOverrides): Promise<string>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "feeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    draft(_disputeId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "draft(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDisputeFees(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    heartbeat(
      _maxRequestedTransitions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "heartbeat(uint64)"(
      _maxRequestedTransitions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRuling(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; finalRuling: number }>;

    "computeRuling(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number] & { subject: string; finalRuling: number }>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeEvidencePeriod(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "closeEvidencePeriod(address,uint256)"(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rule(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { subject: string; ruling: BigNumber }>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { subject: string; ruling: BigNumber }>;

    getDisputeManager(overrides?: CallOverrides): Promise<string>;

    "getDisputeManager()"(overrides?: CallOverrides): Promise<string>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayStartTime(
      _newFirstTermStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "delayStartTime(uint64)"(
      _newFirstTermStartTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Heartbeat(previousTermId: null, currentTermId: null): EventFilter;

    StartTimeDelayed(
      previousStartTime: null,
      currentStartTime: null
    ): EventFilter;

    DisputeStateChanged(
      disputeId: BigNumberish | null,
      state: BigNumberish | null
    ): EventFilter;

    EvidenceSubmitted(
      disputeId: BigNumberish | null,
      submitter: string | null,
      evidence: null
    ): EventFilter;

    EvidencePeriodClosed(
      disputeId: BigNumberish | null,
      termId: BigNumberish | null
    ): EventFilter;

    NewDispute(
      disputeId: BigNumberish | null,
      subject: string | null,
      draftTermId: BigNumberish | null,
      jurorsNumber: null,
      metadata: null
    ): EventFilter;

    JurorDrafted(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null,
      juror: string | null
    ): EventFilter;

    RulingAppealed(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null,
      ruling: null
    ): EventFilter;

    RulingAppealConfirmed(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null,
      draftTermId: BigNumberish | null,
      jurorsNumber: null
    ): EventFilter;

    RulingComputed(
      disputeId: BigNumberish | null,
      ruling: BigNumberish | null
    ): EventFilter;

    PenaltiesSettled(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null,
      collectedTokens: null
    ): EventFilter;

    RewardSettled(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null,
      juror: null,
      tokens: null,
      fees: null
    ): EventFilter;

    AppealDepositSettled(
      disputeId: BigNumberish | null,
      roundId: BigNumberish | null
    ): EventFilter;

    MaxJurorsPerDraftBatchChanged(
      previousMaxJurorsPerDraftBatch: null,
      currentMaxJurorsPerDraftBatch: null
    ): EventFilter;
  };

  estimateGas: {
    setOwner(_owner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decideDispute(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decideDispute(uint256,uint8)"(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disputes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "disputes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "feeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    draft(_disputeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "draft(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDisputeFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    heartbeat(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "heartbeat(uint64)"(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    computeRuling(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "computeRuling(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    closeEvidencePeriod(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closeEvidencePeriod(address,uint256)"(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rule(_disputeId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDisputeManager(overrides?: CallOverrides): Promise<BigNumber>;

    "getDisputeManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayStartTime(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delayStartTime(uint64)"(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decideDispute(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decideDispute(uint256,uint8)"(
      _disputeId: BigNumberish,
      _state: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disputes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "disputes(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    draft(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "draft(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDisputeFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDisputeFees()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitEvidence(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitEvidence(uint256,address,bytes)"(
      _disputeId: BigNumberish,
      _submitter: string,
      _evidence: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    heartbeat(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "heartbeat(uint64)"(
      _maxRequestedTransitions: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    computeRuling(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "computeRuling(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createDispute(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDispute(uint256,bytes)"(
      _possibleRulings: BigNumberish,
      _metadata: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    closeEvidencePeriod(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closeEvidencePeriod(address,uint256)"(
      _subject: string,
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rule(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rule(uint256)"(
      _disputeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDisputeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDisputeManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayStartTime(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delayStartTime(uint64)"(
      _newFirstTermStartTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
