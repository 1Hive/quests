// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class QuestEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questAddress", Value.fromString(""));
    this.set("questTitle", Value.fromString(""));
    this.set("questDetailsRef", Value.fromBytes(Bytes.empty()));
    this.set("questRewardTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("creationTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("questFundsRecoveryAddress", Value.fromBytes(Bytes.empty()));
    this.set("questCreator", Value.fromBytes(Bytes.empty()));
    this.set("depositToken", Value.fromBytes(Bytes.empty()));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save QuestEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("QuestEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestEntity | null {
    return changetype<QuestEntity | null>(store.get("QuestEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questAddress(): string {
    let value = this.get("questAddress");
    return value!.toString();
  }

  set questAddress(value: string) {
    this.set("questAddress", Value.fromString(value));
  }

  get questTitle(): string {
    let value = this.get("questTitle");
    return value!.toString();
  }

  set questTitle(value: string) {
    this.set("questTitle", Value.fromString(value));
  }

  get questDescription(): string | null {
    let value = this.get("questDescription");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set questDescription(value: string | null) {
    if (!value) {
      this.unset("questDescription");
    } else {
      this.set("questDescription", Value.fromString(<string>value));
    }
  }

  get questExpireTimeSec(): BigInt | null {
    let value = this.get("questExpireTimeSec");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questExpireTimeSec(value: BigInt | null) {
    if (!value) {
      this.unset("questExpireTimeSec");
    } else {
      this.set("questExpireTimeSec", Value.fromBigInt(<BigInt>value));
    }
  }

  get questDetailsRef(): Bytes {
    let value = this.get("questDetailsRef");
    return value!.toBytes();
  }

  set questDetailsRef(value: Bytes) {
    this.set("questDetailsRef", Value.fromBytes(value));
  }

  get questRewardTokenAddress(): Bytes {
    let value = this.get("questRewardTokenAddress");
    return value!.toBytes();
  }

  set questRewardTokenAddress(value: Bytes) {
    this.set("questRewardTokenAddress", Value.fromBytes(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value!.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get questFundsRecoveryAddress(): Bytes {
    let value = this.get("questFundsRecoveryAddress");
    return value!.toBytes();
  }

  set questFundsRecoveryAddress(value: Bytes) {
    this.set("questFundsRecoveryAddress", Value.fromBytes(value));
  }

  get questCreator(): Bytes {
    let value = this.get("questCreator");
    return value!.toBytes();
  }

  set questCreator(value: Bytes) {
    this.set("questCreator", Value.fromBytes(value));
  }

  get depositToken(): Bytes {
    let value = this.get("depositToken");
    return value!.toBytes();
  }

  set depositToken(value: Bytes) {
    this.set("depositToken", Value.fromBytes(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }
}

export class DepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("depositToken", Value.fromBytes(Bytes.empty()));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositEntity | null {
    return changetype<DepositEntity | null>(store.get("DepositEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get depositToken(): Bytes {
    let value = this.get("depositToken");
    return value!.toBytes();
  }

  set depositToken(value: Bytes) {
    this.set("depositToken", Value.fromBytes(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }
}
