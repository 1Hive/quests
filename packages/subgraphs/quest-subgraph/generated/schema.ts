// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class QuestEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("version", Value.fromI32(0));
    this.set("questAddress", Value.fromString(""));
    this.set("questTitle", Value.fromString(""));
    this.set("questDescription", Value.fromString(""));
    this.set("questDetailsRef", Value.fromBytes(Bytes.empty()));
    this.set("questRewardTokenAddress", Value.fromBytes(Bytes.empty()));
    this.set("creationTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("questFundsRecoveryAddress", Value.fromBytes(Bytes.empty()));
    this.set("questCreator", Value.fromBytes(Bytes.empty()));
    this.set("questCreateDepositToken", Value.fromBytes(Bytes.empty()));
    this.set("questCreateDepositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("questPlayDepositToken", Value.fromBytes(Bytes.empty()));
    this.set("questPlayDepositAmount", Value.fromBigInt(BigInt.zero()));
    this.set("questPlayers", Value.fromStringArray(new Array(0)));
    this.set("questIsWhiteListed", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save QuestEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("QuestEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestEntity | null {
    return changetype<QuestEntity | null>(store.get("QuestEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get questAddress(): string {
    let value = this.get("questAddress");
    return value!.toString();
  }

  set questAddress(value: string) {
    this.set("questAddress", Value.fromString(value));
  }

  get questTitle(): string {
    let value = this.get("questTitle");
    return value!.toString();
  }

  set questTitle(value: string) {
    this.set("questTitle", Value.fromString(value));
  }

  get questDescription(): string {
    let value = this.get("questDescription");
    return value!.toString();
  }

  set questDescription(value: string) {
    this.set("questDescription", Value.fromString(value));
  }

  get questCommunicationLink(): string | null {
    let value = this.get("questCommunicationLink");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set questCommunicationLink(value: string | null) {
    if (!value) {
      this.unset("questCommunicationLink");
    } else {
      this.set("questCommunicationLink", Value.fromString(<string>value));
    }
  }

  get questExpireTimeSec(): BigInt | null {
    let value = this.get("questExpireTimeSec");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questExpireTimeSec(value: BigInt | null) {
    if (!value) {
      this.unset("questExpireTimeSec");
    } else {
      this.set("questExpireTimeSec", Value.fromBigInt(<BigInt>value));
    }
  }

  get questDetailsRef(): Bytes {
    let value = this.get("questDetailsRef");
    return value!.toBytes();
  }

  set questDetailsRef(value: Bytes) {
    this.set("questDetailsRef", Value.fromBytes(value));
  }

  get questRewardTokenAddress(): Bytes {
    let value = this.get("questRewardTokenAddress");
    return value!.toBytes();
  }

  set questRewardTokenAddress(value: Bytes) {
    this.set("questRewardTokenAddress", Value.fromBytes(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value!.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get questFundsRecoveryAddress(): Bytes {
    let value = this.get("questFundsRecoveryAddress");
    return value!.toBytes();
  }

  set questFundsRecoveryAddress(value: Bytes) {
    this.set("questFundsRecoveryAddress", Value.fromBytes(value));
  }

  get questCreator(): Bytes {
    let value = this.get("questCreator");
    return value!.toBytes();
  }

  set questCreator(value: Bytes) {
    this.set("questCreator", Value.fromBytes(value));
  }

  get questMaxPlayers(): BigInt | null {
    let value = this.get("questMaxPlayers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set questMaxPlayers(value: BigInt | null) {
    if (!value) {
      this.unset("questMaxPlayers");
    } else {
      this.set("questMaxPlayers", Value.fromBigInt(<BigInt>value));
    }
  }

  get questCreateDepositToken(): Bytes {
    let value = this.get("questCreateDepositToken");
    return value!.toBytes();
  }

  set questCreateDepositToken(value: Bytes) {
    this.set("questCreateDepositToken", Value.fromBytes(value));
  }

  get questCreateDepositAmount(): BigInt {
    let value = this.get("questCreateDepositAmount");
    return value!.toBigInt();
  }

  set questCreateDepositAmount(value: BigInt) {
    this.set("questCreateDepositAmount", Value.fromBigInt(value));
  }

  get questPlayDepositToken(): Bytes {
    let value = this.get("questPlayDepositToken");
    return value!.toBytes();
  }

  set questPlayDepositToken(value: Bytes) {
    this.set("questPlayDepositToken", Value.fromBytes(value));
  }

  get questPlayDepositAmount(): BigInt {
    let value = this.get("questPlayDepositAmount");
    return value!.toBigInt();
  }

  set questPlayDepositAmount(value: BigInt) {
    this.set("questPlayDepositAmount", Value.fromBigInt(value));
  }

  get questPlayers(): Array<string> {
    let value = this.get("questPlayers");
    return value!.toStringArray();
  }

  set questPlayers(value: Array<string>) {
    this.set("questPlayers", Value.fromStringArray(value));
  }

  get questIsWhiteListed(): boolean {
    let value = this.get("questIsWhiteListed");
    return value!.toBoolean();
  }

  set questIsWhiteListed(value: boolean) {
    this.set("questIsWhiteListed", Value.fromBoolean(value));
  }
}

export class CreateDepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("depositToken", Value.fromBytes(Bytes.empty()));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreateDepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CreateDepositEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CreateDepositEntity", id.toString(), this);
    }
  }

  static load(id: string): CreateDepositEntity | null {
    return changetype<CreateDepositEntity | null>(
      store.get("CreateDepositEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get depositToken(): Bytes {
    let value = this.get("depositToken");
    return value!.toBytes();
  }

  set depositToken(value: Bytes) {
    this.set("depositToken", Value.fromBytes(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }
}

export class PlayDepositEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("depositToken", Value.fromBytes(Bytes.empty()));
    this.set("depositAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlayDepositEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PlayDepositEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PlayDepositEntity", id.toString(), this);
    }
  }

  static load(id: string): PlayDepositEntity | null {
    return changetype<PlayDepositEntity | null>(
      store.get("PlayDepositEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get depositToken(): Bytes {
    let value = this.get("depositToken");
    return value!.toBytes();
  }

  set depositToken(value: Bytes) {
    this.set("depositToken", Value.fromBytes(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }
}

export class QuestClaimEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("questAddress", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("evidenceIpfsHash", Value.fromBytes(Bytes.empty()));
    this.set("player", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save QuestClaimEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save QuestClaimEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("QuestClaimEntity", id.toString(), this);
    }
  }

  static load(id: string): QuestClaimEntity | null {
    return changetype<QuestClaimEntity | null>(
      store.get("QuestClaimEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get questAddress(): string {
    let value = this.get("questAddress");
    return value!.toString();
  }

  set questAddress(value: string) {
    this.set("questAddress", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get evidenceIpfsHash(): Bytes {
    let value = this.get("evidenceIpfsHash");
    return value!.toBytes();
  }

  set evidenceIpfsHash(value: Bytes) {
    this.set("evidenceIpfsHash", Value.fromBytes(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }
}
