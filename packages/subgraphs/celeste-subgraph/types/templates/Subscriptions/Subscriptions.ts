// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FeesClaimed extends ethereum.Event {
  get params(): FeesClaimed__Params {
    return new FeesClaimed__Params(this);
  }
}

export class FeesClaimed__Params {
  _event: FeesClaimed;

  constructor(event: FeesClaimed) {
    this._event = event;
  }

  get juror(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get periodId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get jurorShare(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeTokenChanged extends ethereum.Event {
  get params(): FeeTokenChanged__Params {
    return new FeeTokenChanged__Params(this);
  }
}

export class FeeTokenChanged__Params {
  _event: FeeTokenChanged;

  constructor(event: FeeTokenChanged) {
    this._event = event;
  }

  get previousFeeToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentFeeToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PeriodPercentageYieldChanged extends ethereum.Event {
  get params(): PeriodPercentageYieldChanged__Params {
    return new PeriodPercentageYieldChanged__Params(this);
  }
}

export class PeriodPercentageYieldChanged__Params {
  _event: PeriodPercentageYieldChanged;

  constructor(event: PeriodPercentageYieldChanged) {
    this._event = event;
  }

  get previousYield(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currenetYield(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RecoverFunds extends ethereum.Event {
  get params(): RecoverFunds__Params {
    return new RecoverFunds__Params(this);
  }
}

export class RecoverFunds__Params {
  _event: RecoverFunds;

  constructor(event: RecoverFunds) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Subscriptions__getCurrentPeriodResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Subscriptions__getJurorShareResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Subscriptions__getPeriodResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Subscriptions extends ethereum.SmartContract {
  static bind(address: Address): Subscriptions {
    return new Subscriptions("Subscriptions", address);
  }

  periodPercentageYield(): BigInt {
    let result = super.call(
      "periodPercentageYield",
      "periodPercentageYield():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_periodPercentageYield(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodPercentageYield",
      "periodPercentageYield():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPeriod(): Subscriptions__getCurrentPeriodResult {
    let result = super.call(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint64,address,uint256,uint256)",
      []
    );

    return new Subscriptions__getCurrentPeriodResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getCurrentPeriod(): ethereum.CallResult<
    Subscriptions__getCurrentPeriodResult
  > {
    let result = super.tryCall(
      "getCurrentPeriod",
      "getCurrentPeriod():(uint64,address,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__getCurrentPeriodResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getJurorShare(_juror: Address): Subscriptions__getJurorShareResult {
    let result = super.call(
      "getJurorShare",
      "getJurorShare(address):(address,uint256)",
      [ethereum.Value.fromAddress(_juror)]
    );

    return new Subscriptions__getJurorShareResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getJurorShare(
    _juror: Address
  ): ethereum.CallResult<Subscriptions__getJurorShareResult> {
    let result = super.tryCall(
      "getJurorShare",
      "getJurorShare(address):(address,uint256)",
      [ethereum.Value.fromAddress(_juror)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__getJurorShareResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentPeriodId(): BigInt {
    let result = super.call(
      "getCurrentPeriodId",
      "getCurrentPeriodId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentPeriodId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPeriodId",
      "getCurrentPeriodId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPeriod(_periodId: BigInt): Subscriptions__getPeriodResult {
    let result = super.call(
      "getPeriod",
      "getPeriod(uint256):(uint64,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_periodId)]
    );

    return new Subscriptions__getPeriodResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPeriod(
    _periodId: BigInt
  ): ethereum.CallResult<Subscriptions__getPeriodResult> {
    let result = super.tryCall(
      "getPeriod",
      "getPeriod(uint256):(uint64,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_periodId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscriptions__getPeriodResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  currentFeeToken(): Address {
    let result = super.call(
      "currentFeeToken",
      "currentFeeToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentFeeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentFeeToken",
      "currentFeeToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodDuration(): BigInt {
    let result = super.call("periodDuration", "periodDuration():(uint64)", []);

    return result[0].toBigInt();
  }

  try_periodDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodDuration",
      "periodDuration():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasJurorClaimed(_juror: Address): boolean {
    let result = super.call(
      "hasJurorClaimed",
      "hasJurorClaimed(address):(bool)",
      [ethereum.Value.fromAddress(_juror)]
    );

    return result[0].toBoolean();
  }

  try_hasJurorClaimed(_juror: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasJurorClaimed",
      "hasJurorClaimed(address):(bool)",
      [ethereum.Value.fromAddress(_juror)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetFeeTokenCall extends ethereum.Call {
  get inputs(): SetFeeTokenCall__Inputs {
    return new SetFeeTokenCall__Inputs(this);
  }

  get outputs(): SetFeeTokenCall__Outputs {
    return new SetFeeTokenCall__Outputs(this);
  }
}

export class SetFeeTokenCall__Inputs {
  _call: SetFeeTokenCall;

  constructor(call: SetFeeTokenCall) {
    this._call = call;
  }

  get _feeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeTokenCall__Outputs {
  _call: SetFeeTokenCall;

  constructor(call: SetFeeTokenCall) {
    this._call = call;
  }
}

export class RecoverFundsCall extends ethereum.Call {
  get inputs(): RecoverFundsCall__Inputs {
    return new RecoverFundsCall__Inputs(this);
  }

  get outputs(): RecoverFundsCall__Outputs {
    return new RecoverFundsCall__Outputs(this);
  }
}

export class RecoverFundsCall__Inputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RecoverFundsCall__Outputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }
}

export class SetPeriodPercentageYieldCall extends ethereum.Call {
  get inputs(): SetPeriodPercentageYieldCall__Inputs {
    return new SetPeriodPercentageYieldCall__Inputs(this);
  }

  get outputs(): SetPeriodPercentageYieldCall__Outputs {
    return new SetPeriodPercentageYieldCall__Outputs(this);
  }
}

export class SetPeriodPercentageYieldCall__Inputs {
  _call: SetPeriodPercentageYieldCall;

  constructor(call: SetPeriodPercentageYieldCall) {
    this._call = call;
  }

  get _periodPercentageYield(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPeriodPercentageYieldCall__Outputs {
  _call: SetPeriodPercentageYieldCall;

  constructor(call: SetPeriodPercentageYieldCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _periodDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _feeToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _periodPercentageYield(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
