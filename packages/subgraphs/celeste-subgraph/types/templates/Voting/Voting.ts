// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VotingCreated extends ethereum.Event {
  get params(): VotingCreated__Params {
    return new VotingCreated__Params(this);
  }
}

export class VotingCreated__Params {
  _event: VotingCreated;

  constructor(event: VotingCreated) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get possibleOutcomes(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class VoteCommitted extends ethereum.Event {
  get params(): VoteCommitted__Params {
    return new VoteCommitted__Params(this);
  }
}

export class VoteCommitted__Params {
  _event: VoteCommitted;

  constructor(event: VoteCommitted) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get commitment(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class VoteRevealed extends ethereum.Event {
  get params(): VoteRevealed__Params {
    return new VoteRevealed__Params(this);
  }
}

export class VoteRevealed__Params {
  _event: VoteRevealed;

  constructor(event: VoteRevealed) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outcome(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get revealer(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class VoteLeaked extends ethereum.Event {
  get params(): VoteLeaked__Params {
    return new VoteLeaked__Params(this);
  }
}

export class VoteLeaked__Params {
  _event: VoteLeaked;

  constructor(event: VoteLeaked) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get outcome(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get leaker(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Voting extends ethereum.SmartContract {
  static bind(address: Address): Voting {
    return new Voting("Voting", address);
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaxAllowedOutcome(_voteId: BigInt): i32 {
    let result = super.call(
      "getMaxAllowedOutcome",
      "getMaxAllowedOutcome(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_voteId)]
    );

    return result[0].toI32();
  }

  try_getMaxAllowedOutcome(_voteId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getMaxAllowedOutcome",
      "getMaxAllowedOutcome(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_voteId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getWinningOutcome(_voteId: BigInt): i32 {
    let result = super.call(
      "getWinningOutcome",
      "getWinningOutcome(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_voteId)]
    );

    return result[0].toI32();
  }

  try_getWinningOutcome(_voteId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getWinningOutcome",
      "getWinningOutcome(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(_voteId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getOutcomeTally(_voteId: BigInt, _outcome: i32): BigInt {
    let result = super.call(
      "getOutcomeTally",
      "getOutcomeTally(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome))
      ]
    );

    return result[0].toBigInt();
  }

  try_getOutcomeTally(
    _voteId: BigInt,
    _outcome: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOutcomeTally",
      "getOutcomeTally(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isValidOutcome(_voteId: BigInt, _outcome: i32): boolean {
    let result = super.call(
      "isValidOutcome",
      "isValidOutcome(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome))
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidOutcome(
    _voteId: BigInt,
    _outcome: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidOutcome",
      "isValidOutcome(uint256,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVoterOutcome(_voteId: BigInt, _voter: Address): i32 {
    let result = super.call(
      "getVoterOutcome",
      "getVoterOutcome(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromAddress(_voter)
      ]
    );

    return result[0].toI32();
  }

  try_getVoterOutcome(
    _voteId: BigInt,
    _voter: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getVoterOutcome",
      "getVoterOutcome(uint256,address):(uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromAddress(_voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasVotedInFavorOf(_voteId: BigInt, _outcome: i32, _voter: Address): boolean {
    let result = super.call(
      "hasVotedInFavorOf",
      "hasVotedInFavorOf(uint256,uint8,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
        ethereum.Value.fromAddress(_voter)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasVotedInFavorOf(
    _voteId: BigInt,
    _outcome: i32,
    _voter: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasVotedInFavorOf",
      "hasVotedInFavorOf(uint256,uint8,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
        ethereum.Value.fromAddress(_voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getVotersInFavorOf(
    _voteId: BigInt,
    _outcome: i32,
    _voters: Array<Address>
  ): Array<boolean> {
    let result = super.call(
      "getVotersInFavorOf",
      "getVotersInFavorOf(uint256,uint8,address[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
        ethereum.Value.fromAddressArray(_voters)
      ]
    );

    return result[0].toBooleanArray();
  }

  try_getVotersInFavorOf(
    _voteId: BigInt,
    _outcome: i32,
    _voters: Array<Address>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "getVotersInFavorOf",
      "getVotersInFavorOf(uint256,uint8,address[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
        ethereum.Value.fromAddressArray(_voters)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  hashVote(_outcome: i32, _salt: Bytes): Bytes {
    let result = super.call("hashVote", "hashVote(uint8,bytes32):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
      ethereum.Value.fromFixedBytes(_salt)
    ]);

    return result[0].toBytes();
  }

  try_hashVote(_outcome: i32, _salt: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashVote",
      "hashVote(uint8,bytes32):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_outcome)),
        ethereum.Value.fromFixedBytes(_salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _possibleOutcomes(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _commitment(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class LeakCall extends ethereum.Call {
  get inputs(): LeakCall__Inputs {
    return new LeakCall__Inputs(this);
  }

  get outputs(): LeakCall__Outputs {
    return new LeakCall__Outputs(this);
  }
}

export class LeakCall__Inputs {
  _call: LeakCall;

  constructor(call: LeakCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _outcome(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _salt(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class LeakCall__Outputs {
  _call: LeakCall;

  constructor(call: LeakCall) {
    this._call = call;
  }
}

export class RevealCall extends ethereum.Call {
  get inputs(): RevealCall__Inputs {
    return new RevealCall__Inputs(this);
  }

  get outputs(): RevealCall__Outputs {
    return new RevealCall__Outputs(this);
  }
}

export class RevealCall__Inputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _outcome(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _salt(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RevealCall__Outputs {
  _call: RevealCall;

  constructor(call: RevealCall) {
    this._call = call;
  }
}
