// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DisputeStateChanged extends ethereum.Event {
  get params(): DisputeStateChanged__Params {
    return new DisputeStateChanged__Params(this);
  }
}

export class DisputeStateChanged__Params {
  _event: DisputeStateChanged;

  constructor(event: DisputeStateChanged) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class EvidenceSubmitted extends ethereum.Event {
  get params(): EvidenceSubmitted__Params {
    return new EvidenceSubmitted__Params(this);
  }
}

export class EvidenceSubmitted__Params {
  _event: EvidenceSubmitted;

  constructor(event: EvidenceSubmitted) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get submitter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get evidence(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class EvidencePeriodClosed extends ethereum.Event {
  get params(): EvidencePeriodClosed__Params {
    return new EvidencePeriodClosed__Params(this);
  }
}

export class EvidencePeriodClosed__Params {
  _event: EvidencePeriodClosed;

  constructor(event: EvidencePeriodClosed) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get termId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewDispute extends ethereum.Event {
  get params(): NewDispute__Params {
    return new NewDispute__Params(this);
  }
}

export class NewDispute__Params {
  _event: NewDispute;

  constructor(event: NewDispute) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get draftTermId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get jurorsNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get metadata(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class JurorDrafted extends ethereum.Event {
  get params(): JurorDrafted__Params {
    return new JurorDrafted__Params(this);
  }
}

export class JurorDrafted__Params {
  _event: JurorDrafted;

  constructor(event: JurorDrafted) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get juror(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RulingAppealed extends ethereum.Event {
  get params(): RulingAppealed__Params {
    return new RulingAppealed__Params(this);
  }
}

export class RulingAppealed__Params {
  _event: RulingAppealed;

  constructor(event: RulingAppealed) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ruling(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class RulingAppealConfirmed extends ethereum.Event {
  get params(): RulingAppealConfirmed__Params {
    return new RulingAppealConfirmed__Params(this);
  }
}

export class RulingAppealConfirmed__Params {
  _event: RulingAppealConfirmed;

  constructor(event: RulingAppealConfirmed) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get draftTermId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get jurorsNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RulingComputed extends ethereum.Event {
  get params(): RulingComputed__Params {
    return new RulingComputed__Params(this);
  }
}

export class RulingComputed__Params {
  _event: RulingComputed;

  constructor(event: RulingComputed) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ruling(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class PenaltiesSettled extends ethereum.Event {
  get params(): PenaltiesSettled__Params {
    return new PenaltiesSettled__Params(this);
  }
}

export class PenaltiesSettled__Params {
  _event: PenaltiesSettled;

  constructor(event: PenaltiesSettled) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collectedTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardSettled extends ethereum.Event {
  get params(): RewardSettled__Params {
    return new RewardSettled__Params(this);
  }
}

export class RewardSettled__Params {
  _event: RewardSettled;

  constructor(event: RewardSettled) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get juror(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AppealDepositSettled extends ethereum.Event {
  get params(): AppealDepositSettled__Params {
    return new AppealDepositSettled__Params(this);
  }
}

export class AppealDepositSettled__Params {
  _event: AppealDepositSettled;

  constructor(event: AppealDepositSettled) {
    this._event = event;
  }

  get disputeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxJurorsPerDraftBatchChanged extends ethereum.Event {
  get params(): MaxJurorsPerDraftBatchChanged__Params {
    return new MaxJurorsPerDraftBatchChanged__Params(this);
  }
}

export class MaxJurorsPerDraftBatchChanged__Params {
  _event: MaxJurorsPerDraftBatchChanged;

  constructor(event: MaxJurorsPerDraftBatchChanged) {
    this._event = event;
  }

  get previousMaxJurorsPerDraftBatch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currentMaxJurorsPerDraftBatch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RecoverFunds extends ethereum.Event {
  get params(): RecoverFunds__Params {
    return new RecoverFunds__Params(this);
  }
}

export class RecoverFunds__Params {
  _event: RecoverFunds;

  constructor(event: RecoverFunds) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DisputeManager__getRoundResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: BigInt,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }
}

export class DisputeManager__getJurorResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class DisputeManager__getAppealResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DisputeManager__getDisputeFeesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DisputeManager__computeRulingResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }
}

export class DisputeManager__getNextRoundDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class DisputeManager__getDisputeResult {
  value0: Address;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class DisputeManager extends ethereum.SmartContract {
  static bind(address: Address): DisputeManager {
    return new DisputeManager("DisputeManager", address);
  }

  createDispute(
    _subject: Address,
    _possibleRulings: i32,
    _metadata: Bytes
  ): BigInt {
    let result = super.call(
      "createDispute",
      "createDispute(address,uint8,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_subject),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_possibleRulings)),
        ethereum.Value.fromBytes(_metadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_createDispute(
    _subject: Address,
    _possibleRulings: i32,
    _metadata: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createDispute",
      "createDispute(address,uint8,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(_subject),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_possibleRulings)),
        ethereum.Value.fromBytes(_metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxJurorsPerDraftBatch(): BigInt {
    let result = super.call(
      "maxJurorsPerDraftBatch",
      "maxJurorsPerDraftBatch():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxJurorsPerDraftBatch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxJurorsPerDraftBatch",
      "maxJurorsPerDraftBatch():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRound(
    _disputeId: BigInt,
    _roundId: BigInt
  ): DisputeManager__getRoundResult {
    let result = super.call(
      "getRound",
      "getRound(uint256,uint256):(uint64,uint64,uint64,uint64,uint256,bool,uint256,uint64,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );

    return new DisputeManager__getRoundResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toI32()
    );
  }

  try_getRound(
    _disputeId: BigInt,
    _roundId: BigInt
  ): ethereum.CallResult<DisputeManager__getRoundResult> {
    let result = super.tryCall(
      "getRound",
      "getRound(uint256,uint256):(uint64,uint64,uint64,uint64,uint256,bool,uint256,uint64,uint8)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getRoundResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toI32()
      )
    );
  }

  getJuror(
    _disputeId: BigInt,
    _roundId: BigInt,
    _juror: Address
  ): DisputeManager__getJurorResult {
    let result = super.call(
      "getJuror",
      "getJuror(uint256,uint256,address):(uint64,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_juror)
      ]
    );

    return new DisputeManager__getJurorResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getJuror(
    _disputeId: BigInt,
    _roundId: BigInt,
    _juror: Address
  ): ethereum.CallResult<DisputeManager__getJurorResult> {
    let result = super.tryCall(
      "getJuror",
      "getJuror(uint256,uint256,address):(uint64,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId),
        ethereum.Value.fromAddress(_juror)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getJurorResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  getAppeal(
    _disputeId: BigInt,
    _roundId: BigInt
  ): DisputeManager__getAppealResult {
    let result = super.call(
      "getAppeal",
      "getAppeal(uint256,uint256):(address,uint64,address,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );

    return new DisputeManager__getAppealResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getAppeal(
    _disputeId: BigInt,
    _roundId: BigInt
  ): ethereum.CallResult<DisputeManager__getAppealResult> {
    let result = super.tryCall(
      "getAppeal",
      "getAppeal(uint256,uint256):(address,uint64,address,uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getAppealResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getDisputeFees(): DisputeManager__getDisputeFeesResult {
    let result = super.call(
      "getDisputeFees",
      "getDisputeFees():(address,uint256)",
      []
    );

    return new DisputeManager__getDisputeFeesResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getDisputeFees(): ethereum.CallResult<
    DisputeManager__getDisputeFeesResult
  > {
    let result = super.tryCall(
      "getDisputeFees",
      "getDisputeFees():(address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getDisputeFeesResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  computeRuling(_disputeId: BigInt): DisputeManager__computeRulingResult {
    let result = super.call(
      "computeRuling",
      "computeRuling(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );

    return new DisputeManager__computeRulingResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_computeRuling(
    _disputeId: BigInt
  ): ethereum.CallResult<DisputeManager__computeRulingResult> {
    let result = super.tryCall(
      "computeRuling",
      "computeRuling(uint256):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__computeRulingResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  ensureCanReveal(_voteId: BigInt, _voter: Address): BigInt {
    let result = super.call(
      "ensureCanReveal",
      "ensureCanReveal(uint256,address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromAddress(_voter)
      ]
    );

    return result[0].toBigInt();
  }

  try_ensureCanReveal(
    _voteId: BigInt,
    _voter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ensureCanReveal",
      "ensureCanReveal(uint256,address):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(_voteId),
        ethereum.Value.fromAddress(_voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextRoundDetails(
    _disputeId: BigInt,
    _roundId: BigInt
  ): DisputeManager__getNextRoundDetailsResult {
    let result = super.call(
      "getNextRoundDetails",
      "getNextRoundDetails(uint256,uint256):(uint64,uint64,uint8,address,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );

    return new DisputeManager__getNextRoundDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_getNextRoundDetails(
    _disputeId: BigInt,
    _roundId: BigInt
  ): ethereum.CallResult<DisputeManager__getNextRoundDetailsResult> {
    let result = super.tryCall(
      "getNextRoundDetails",
      "getNextRoundDetails(uint256,uint256):(uint64,uint64,uint8,address,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromUnsignedBigInt(_roundId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getNextRoundDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  getDispute(_disputeId: BigInt): DisputeManager__getDisputeResult {
    let result = super.call(
      "getDispute",
      "getDispute(uint256):(address,uint8,uint8,uint8,uint256,uint64)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );

    return new DisputeManager__getDisputeResult(
      result[0].toAddress(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getDispute(
    _disputeId: BigInt
  ): ethereum.CallResult<DisputeManager__getDisputeResult> {
    let result = super.tryCall(
      "getDispute",
      "getDispute(uint256):(address,uint8,uint8,uint8,uint256,uint64)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DisputeManager__getDisputeResult(
        value[0].toAddress(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }
}

export class SetMaxJurorsPerDraftBatchCall extends ethereum.Call {
  get inputs(): SetMaxJurorsPerDraftBatchCall__Inputs {
    return new SetMaxJurorsPerDraftBatchCall__Inputs(this);
  }

  get outputs(): SetMaxJurorsPerDraftBatchCall__Outputs {
    return new SetMaxJurorsPerDraftBatchCall__Outputs(this);
  }
}

export class SetMaxJurorsPerDraftBatchCall__Inputs {
  _call: SetMaxJurorsPerDraftBatchCall;

  constructor(call: SetMaxJurorsPerDraftBatchCall) {
    this._call = call;
  }

  get _maxJurorsPerDraftBatch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxJurorsPerDraftBatchCall__Outputs {
  _call: SetMaxJurorsPerDraftBatchCall;

  constructor(call: SetMaxJurorsPerDraftBatchCall) {
    this._call = call;
  }
}

export class EnsureCanCommitCall extends ethereum.Call {
  get inputs(): EnsureCanCommitCall__Inputs {
    return new EnsureCanCommitCall__Inputs(this);
  }

  get outputs(): EnsureCanCommitCall__Outputs {
    return new EnsureCanCommitCall__Outputs(this);
  }
}

export class EnsureCanCommitCall__Inputs {
  _call: EnsureCanCommitCall;

  constructor(call: EnsureCanCommitCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EnsureCanCommitCall__Outputs {
  _call: EnsureCanCommitCall;

  constructor(call: EnsureCanCommitCall) {
    this._call = call;
  }
}

export class CreateAppealCall extends ethereum.Call {
  get inputs(): CreateAppealCall__Inputs {
    return new CreateAppealCall__Inputs(this);
  }

  get outputs(): CreateAppealCall__Outputs {
    return new CreateAppealCall__Outputs(this);
  }
}

export class CreateAppealCall__Inputs {
  _call: CreateAppealCall;

  constructor(call: CreateAppealCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ruling(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class CreateAppealCall__Outputs {
  _call: CreateAppealCall;

  constructor(call: CreateAppealCall) {
    this._call = call;
  }
}

export class EnsureCanCommit1Call extends ethereum.Call {
  get inputs(): EnsureCanCommit1Call__Inputs {
    return new EnsureCanCommit1Call__Inputs(this);
  }

  get outputs(): EnsureCanCommit1Call__Outputs {
    return new EnsureCanCommit1Call__Outputs(this);
  }
}

export class EnsureCanCommit1Call__Inputs {
  _call: EnsureCanCommit1Call;

  constructor(call: EnsureCanCommit1Call) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnsureCanCommit1Call__Outputs {
  _call: EnsureCanCommit1Call;

  constructor(call: EnsureCanCommit1Call) {
    this._call = call;
  }
}

export class CreateDisputeCall extends ethereum.Call {
  get inputs(): CreateDisputeCall__Inputs {
    return new CreateDisputeCall__Inputs(this);
  }

  get outputs(): CreateDisputeCall__Outputs {
    return new CreateDisputeCall__Outputs(this);
  }
}

export class CreateDisputeCall__Inputs {
  _call: CreateDisputeCall;

  constructor(call: CreateDisputeCall) {
    this._call = call;
  }

  get _subject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _possibleRulings(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _metadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CreateDisputeCall__Outputs {
  _call: CreateDisputeCall;

  constructor(call: CreateDisputeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RecoverFundsCall extends ethereum.Call {
  get inputs(): RecoverFundsCall__Inputs {
    return new RecoverFundsCall__Inputs(this);
  }

  get outputs(): RecoverFundsCall__Outputs {
    return new RecoverFundsCall__Outputs(this);
  }
}

export class RecoverFundsCall__Inputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RecoverFundsCall__Outputs {
  _call: RecoverFundsCall;

  constructor(call: RecoverFundsCall) {
    this._call = call;
  }
}

export class SubmitEvidenceCall extends ethereum.Call {
  get inputs(): SubmitEvidenceCall__Inputs {
    return new SubmitEvidenceCall__Inputs(this);
  }

  get outputs(): SubmitEvidenceCall__Outputs {
    return new SubmitEvidenceCall__Outputs(this);
  }
}

export class SubmitEvidenceCall__Inputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }

  get _subject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _submitter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _evidence(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitEvidenceCall__Outputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }
}

export class DraftCall extends ethereum.Call {
  get inputs(): DraftCall__Inputs {
    return new DraftCall__Inputs(this);
  }

  get outputs(): DraftCall__Outputs {
    return new DraftCall__Outputs(this);
  }
}

export class DraftCall__Inputs {
  _call: DraftCall;

  constructor(call: DraftCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DraftCall__Outputs {
  _call: DraftCall;

  constructor(call: DraftCall) {
    this._call = call;
  }
}

export class SettleRewardCall extends ethereum.Call {
  get inputs(): SettleRewardCall__Inputs {
    return new SettleRewardCall__Inputs(this);
  }

  get outputs(): SettleRewardCall__Outputs {
    return new SettleRewardCall__Outputs(this);
  }
}

export class SettleRewardCall__Inputs {
  _call: SettleRewardCall;

  constructor(call: SettleRewardCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _juror(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SettleRewardCall__Outputs {
  _call: SettleRewardCall;

  constructor(call: SettleRewardCall) {
    this._call = call;
  }
}

export class SettlePenaltiesCall extends ethereum.Call {
  get inputs(): SettlePenaltiesCall__Inputs {
    return new SettlePenaltiesCall__Inputs(this);
  }

  get outputs(): SettlePenaltiesCall__Outputs {
    return new SettlePenaltiesCall__Outputs(this);
  }
}

export class SettlePenaltiesCall__Inputs {
  _call: SettlePenaltiesCall;

  constructor(call: SettlePenaltiesCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _jurorsToSettle(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettlePenaltiesCall__Outputs {
  _call: SettlePenaltiesCall;

  constructor(call: SettlePenaltiesCall) {
    this._call = call;
  }
}

export class ConfirmAppealCall extends ethereum.Call {
  get inputs(): ConfirmAppealCall__Inputs {
    return new ConfirmAppealCall__Inputs(this);
  }

  get outputs(): ConfirmAppealCall__Outputs {
    return new ConfirmAppealCall__Outputs(this);
  }
}

export class ConfirmAppealCall__Inputs {
  _call: ConfirmAppealCall;

  constructor(call: ConfirmAppealCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _ruling(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ConfirmAppealCall__Outputs {
  _call: ConfirmAppealCall;

  constructor(call: ConfirmAppealCall) {
    this._call = call;
  }
}

export class ComputeRulingCall extends ethereum.Call {
  get inputs(): ComputeRulingCall__Inputs {
    return new ComputeRulingCall__Inputs(this);
  }

  get outputs(): ComputeRulingCall__Outputs {
    return new ComputeRulingCall__Outputs(this);
  }
}

export class ComputeRulingCall__Inputs {
  _call: ComputeRulingCall;

  constructor(call: ComputeRulingCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ComputeRulingCall__Outputs {
  _call: ComputeRulingCall;

  constructor(call: ComputeRulingCall) {
    this._call = call;
  }

  get subject(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get finalRuling(): i32 {
    return this._call.outputValues[1].value.toI32();
  }
}

export class EnsureCanRevealCall extends ethereum.Call {
  get inputs(): EnsureCanRevealCall__Inputs {
    return new EnsureCanRevealCall__Inputs(this);
  }

  get outputs(): EnsureCanRevealCall__Outputs {
    return new EnsureCanRevealCall__Outputs(this);
  }
}

export class EnsureCanRevealCall__Inputs {
  _call: EnsureCanRevealCall;

  constructor(call: EnsureCanRevealCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EnsureCanRevealCall__Outputs {
  _call: EnsureCanRevealCall;

  constructor(call: EnsureCanRevealCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CloseEvidencePeriodCall extends ethereum.Call {
  get inputs(): CloseEvidencePeriodCall__Inputs {
    return new CloseEvidencePeriodCall__Inputs(this);
  }

  get outputs(): CloseEvidencePeriodCall__Outputs {
    return new CloseEvidencePeriodCall__Outputs(this);
  }
}

export class CloseEvidencePeriodCall__Inputs {
  _call: CloseEvidencePeriodCall;

  constructor(call: CloseEvidencePeriodCall) {
    this._call = call;
  }

  get _subject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CloseEvidencePeriodCall__Outputs {
  _call: CloseEvidencePeriodCall;

  constructor(call: CloseEvidencePeriodCall) {
    this._call = call;
  }
}

export class SettleAppealDepositCall extends ethereum.Call {
  get inputs(): SettleAppealDepositCall__Inputs {
    return new SettleAppealDepositCall__Inputs(this);
  }

  get outputs(): SettleAppealDepositCall__Outputs {
    return new SettleAppealDepositCall__Outputs(this);
  }
}

export class SettleAppealDepositCall__Inputs {
  _call: SettleAppealDepositCall;

  constructor(call: SettleAppealDepositCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _roundId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleAppealDepositCall__Outputs {
  _call: SettleAppealDepositCall;

  constructor(call: SettleAppealDepositCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _maxJurorsPerDraftBatch(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _skippedDisputes(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
