// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Ruled extends ethereum.Event {
  get params(): Ruled__Params {
    return new Ruled__Params(this);
  }
}

export class Ruled__Params {
  _event: Ruled;

  constructor(event: Ruled) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get disputeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EvidenceSubmitted extends ethereum.Event {
  get params(): EvidenceSubmitted__Params {
    return new EvidenceSubmitted__Params(this);
  }
}

export class EvidenceSubmitted__Params {
  _event: EvidenceSubmitted;

  constructor(event: EvidenceSubmitted) {
    this._event = event;
  }

  get arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get disputeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get submitter(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get evidence(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get finished(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Arbitrable extends ethereum.SmartContract {
  static bind(address: Address): Arbitrable {
    return new Arbitrable("Arbitrable", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SubmitEvidenceCall extends ethereum.Call {
  get inputs(): SubmitEvidenceCall__Inputs {
    return new SubmitEvidenceCall__Inputs(this);
  }

  get outputs(): SubmitEvidenceCall__Outputs {
    return new SubmitEvidenceCall__Outputs(this);
  }
}

export class SubmitEvidenceCall__Inputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _evidence(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _finished(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SubmitEvidenceCall__Outputs {
  _call: SubmitEvidenceCall;

  constructor(call: SubmitEvidenceCall) {
    this._call = call;
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get _disputeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}
